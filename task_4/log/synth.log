Qflow synthesis logfile created on Mo 10. Aug 13:38:36 CEST 2020
Running yosys for verilog parsing and synthesis
yosys  -s uProcessor.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `uProcessor.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/akash/Documents/DigitalLab/verilog_tasks/task_4/source/uProcessor.v' to AST representation.
Generating RTLIL representation for module `\sum_16bit'.
Generating RTLIL representation for module `\xor_16bit'.
Generating RTLIL representation for module `\or_16bit'.
Generating RTLIL representation for module `\and_16bit'.
Generating RTLIL representation for module `\isEqual_16bit'.
Generating RTLIL representation for module `\isNotEqual_16bit'.
Generating RTLIL representation for module `\sub_16bit'.
Generating RTLIL representation for module `\signedLessThen_16bit'.
Generating RTLIL representation for module `\signedGreaterOrEqual_16bit'.
Generating RTLIL representation for module `\unsignedLessThen_16bit'.
Generating RTLIL representation for module `\unsignedGreaterOrEqual_16bit'.
Generating RTLIL representation for module `\mux4_16bit'.
Note: Assuming pure combinatorial block at ./mux4_16bit.v:27 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\alu_16bit'.
Generating RTLIL representation for module `\immediate_operation'.
Generating RTLIL representation for module `\program_counter'.
Generating RTLIL representation for module `\program_counter_preset'.
Generating RTLIL representation for module `\address_mux'.
Generating RTLIL representation for module `\data_mux'.
Generating RTLIL representation for module `\internal_register'.
Generating RTLIL representation for module `\instruction_decoder'.
Generating RTLIL representation for module `\control_unit'.
Note: Assuming pure combinatorial block at ./control_unit.v:72 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./control_unit.v:88 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./control_unit.v:164 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\uProcessor'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \uProcessor
Used module:     \control_unit
Used module:     \instruction_decoder
Used module:     \internal_register
Used module:     \data_mux
Used module:     \address_mux
Used module:     \program_counter_preset
Used module:     \program_counter
Used module:     \immediate_operation
Used module:     \alu_16bit
Used module:         \mux4_16bit
Used module:         \unsignedGreaterOrEqual_16bit
Used module:         \unsignedLessThen_16bit
Used module:         \signedGreaterOrEqual_16bit
Used module:         \signedLessThen_16bit
Used module:         \sub_16bit
Used module:         \isNotEqual_16bit
Used module:         \isEqual_16bit
Used module:         \and_16bit
Used module:         \or_16bit
Used module:         \xor_16bit
Used module:         \sum_16bit

3.1.2. Analyzing design hierarchy..
Top module:  \uProcessor
Used module:     \control_unit
Used module:     \instruction_decoder
Used module:     \internal_register
Used module:     \data_mux
Used module:     \address_mux
Used module:     \program_counter_preset
Used module:     \program_counter
Used module:     \immediate_operation
Used module:     \alu_16bit
Used module:         \mux4_16bit
Used module:         \unsignedGreaterOrEqual_16bit
Used module:         \unsignedLessThen_16bit
Used module:         \signedGreaterOrEqual_16bit
Used module:         \signedLessThen_16bit
Used module:         \sub_16bit
Used module:         \isNotEqual_16bit
Used module:         \isEqual_16bit
Used module:         \and_16bit
Used module:         \or_16bit
Used module:         \xor_16bit
Used module:         \sum_16bit
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$./program_counter.v:23$18 in module program_counter.
Removed 1 dead cases from process $proc$./mux4_16bit.v:27$14 in module mux4_16bit.
Removed a total of 2 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\internal_register.$proc$./internal_register.v:15$45'.
  Set init value: \rb_out = 16'0000000000000000
Found init rule in `\internal_register.$proc$./internal_register.v:14$44'.
  Set init value: \ra_out = 16'0000000000000000

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\control_unit.$proc$./control_unit.v:164$52'.
     1/2: $1\opcode_type[2:0]
     2/2: $0\opcode_type[2:0]
Creating decoders for process `\control_unit.$proc$./control_unit.v:88$51'.
     1/8: $0\mem_wr[0:0]
     2/8: $0\mem_rd[0:0]
     3/8: $0\adrs_ctrl[0:0]
     4/8: $0\imm_en[0:0]
     5/8: $0\rD_wr[0:0]
     6/8: $0\reg_en[0:0]
     7/8: $0\inst_wr[0:0]
     8/8: $0\pc_op[1:0]
Creating decoders for process `\control_unit.$proc$./control_unit.v:72$50'.
     1/1: $0\nState[2:0]
Creating decoders for process `\control_unit.$proc$./control_unit.v:63$48'.
     1/1: $0\cState[2:0]
Creating decoders for process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
     1/6: $0\rBadrs[2:0]
     2/6: $0\rAadrs[2:0]
     3/6: $0\rDadrs[2:0]
     4/6: $0\opcode[3:0]
     5/6: $0\imm[7:0]
     6/6: $0\flag[0:0]
Creating decoders for process `\internal_register.$proc$./internal_register.v:15$45'.
     1/1: $1\rb_out[15:0]
Creating decoders for process `\internal_register.$proc$./internal_register.v:14$44'.
     1/1: $1\ra_out[15:0]
Creating decoders for process `\internal_register.$proc$./internal_register.v:20$28'.
     1/13: $3$mem2bits$\internal_reg$./internal_register.v:33$26[15:0]$40
     2/13: $3$mem2bits$\internal_reg$./internal_register.v:32$25[15:0]$39
     3/13: $2$mem2bits$\internal_reg$./internal_register.v:33$26[15:0]$38
     4/13: $2$mem2bits$\internal_reg$./internal_register.v:32$25[15:0]$37
     5/13: $1$mem2bits$\internal_reg$./internal_register.v:33$26[15:0]$36
     6/13: $1$mem2bits$\internal_reg$./internal_register.v:32$25[15:0]$35
     7/13: $0$mem2bits$\internal_reg$./internal_register.v:33$26[15:0]$30
     8/13: $0$mem2bits$\internal_reg$./internal_register.v:32$25[15:0]$29
     9/13: $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33
    10/13: $0$memwr$\internal_reg$./internal_register.v:29$27_DATA[15:0]$32
    11/13: $0$memwr$\internal_reg$./internal_register.v:29$27_ADDR[2:0]$31
    12/13: $0\rb_out[15:0]
    13/13: $0\ra_out[15:0]
Creating decoders for process `\data_mux.$proc$./data_mux.v:13$23'.
     1/3: $2\m_regD[15:0]
     2/3: $1\m_regD[15:0]
     3/3: $0\m_regD[15:0]
Creating decoders for process `\program_counter.$proc$./program_counter.v:23$18'.
     1/1: $0\mPc[15:0]
Creating decoders for process `\mux4_16bit.$proc$./mux4_16bit.v:27$14'.
     1/2: $1\y[15:0]
     2/2: $0\y[15:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\control_unit.\opcode_type' from process `\control_unit.$proc$./control_unit.v:164$52'.
No latch inferred for signal `\control_unit.\adrs_ctrl' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\imm_en' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\inst_wr' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\pc_op' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\reg_en' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\rD_wr' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\mem_rd' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\mem_wr' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\nState' from process `\control_unit.$proc$./control_unit.v:72$50'.
No latch inferred for signal `\data_mux.\m_regD' from process `\data_mux.$proc$./data_mux.v:13$23'.
No latch inferred for signal `\mux4_16bit.\y' from process `\mux4_16bit.$proc$./mux4_16bit.v:27$14'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\control_unit.\cState' using process `\control_unit.$proc$./control_unit.v:63$48'.
  created $dff cell `$procdff$327' with positive edge clock.
Creating register for signal `\instruction_decoder.\flag' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$328' with positive edge clock.
Creating register for signal `\instruction_decoder.\imm' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$329' with positive edge clock.
Creating register for signal `\instruction_decoder.\opcode' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$330' with positive edge clock.
Creating register for signal `\instruction_decoder.\rDadrs' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$331' with positive edge clock.
Creating register for signal `\instruction_decoder.\rAadrs' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$332' with positive edge clock.
Creating register for signal `\instruction_decoder.\rBadrs' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$333' with positive edge clock.
Creating register for signal `\internal_register.\ra_out' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$334' with positive edge clock.
Creating register for signal `\internal_register.\rb_out' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$335' with positive edge clock.
Creating register for signal `\internal_register.$mem2bits$\internal_reg$./internal_register.v:32$25' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$336' with positive edge clock.
Creating register for signal `\internal_register.$mem2bits$\internal_reg$./internal_register.v:33$26' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$337' with positive edge clock.
Creating register for signal `\internal_register.$memwr$\internal_reg$./internal_register.v:29$27_ADDR' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$338' with positive edge clock.
Creating register for signal `\internal_register.$memwr$\internal_reg$./internal_register.v:29$27_DATA' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$339' with positive edge clock.
Creating register for signal `\internal_register.$memwr$\internal_reg$./internal_register.v:29$27_EN' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$340' with positive edge clock.
Creating register for signal `\program_counter.\mPc' using process `\program_counter.$proc$./program_counter.v:23$18'.
  created $dff cell `$procdff$341' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\control_unit.$proc$./control_unit.v:164$52'.
Removing empty process `control_unit.$proc$./control_unit.v:164$52'.
Found and cleaned up 3 empty switches in `\control_unit.$proc$./control_unit.v:88$51'.
Removing empty process `control_unit.$proc$./control_unit.v:88$51'.
Found and cleaned up 2 empty switches in `\control_unit.$proc$./control_unit.v:72$50'.
Removing empty process `control_unit.$proc$./control_unit.v:72$50'.
Found and cleaned up 1 empty switch in `\control_unit.$proc$./control_unit.v:63$48'.
Removing empty process `control_unit.$proc$./control_unit.v:63$48'.
Found and cleaned up 2 empty switches in `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
Removing empty process `instruction_decoder.$proc$./instruction_decoder.v:25$46'.
Removing empty process `internal_register.$proc$./internal_register.v:15$45'.
Removing empty process `internal_register.$proc$./internal_register.v:14$44'.
Found and cleaned up 3 empty switches in `\internal_register.$proc$./internal_register.v:20$28'.
Removing empty process `internal_register.$proc$./internal_register.v:20$28'.
Found and cleaned up 2 empty switches in `\data_mux.$proc$./data_mux.v:13$23'.
Removing empty process `data_mux.$proc$./data_mux.v:13$23'.
Found and cleaned up 2 empty switches in `\program_counter.$proc$./program_counter.v:23$18'.
Removing empty process `program_counter.$proc$./program_counter.v:23$18'.
Found and cleaned up 1 empty switch in `\mux4_16bit.$proc$./mux4_16bit.v:27$14'.
Removing empty process `mux4_16bit.$proc$./mux4_16bit.v:27$14'.
Cleaned up 17 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$procmux$69_CMP0' in module `control_unit' with $logic_not.
Replacing $eq cell `$procmux$127_CMP0' in module `control_unit' with $logic_not.
Replacing $eq cell `$procmux$137_CMP0' in module `control_unit' with $logic_not.
Replacing $eq cell `$procmux$146_CMP0' in module `control_unit' with $logic_not.
Replacing $eq cell `$procmux$162_CMP0' in module `control_unit' with $logic_not.
Replacing $eq cell `$procmux$172_CMP0' in module `control_unit' with $logic_not.
Optimizing away select inverter for $mux cell `$procmux$174' in module `control_unit'.
Optimizing away select inverter for $mux cell `$procmux$180' in module `instruction_decoder'.
Optimizing away select inverter for $mux cell `$procmux$186' in module `instruction_decoder'.
Optimizing away select inverter for $mux cell `$procmux$192' in module `instruction_decoder'.
Optimizing away select inverter for $mux cell `$procmux$198' in module `instruction_decoder'.
Optimizing away select inverter for $mux cell `$procmux$204' in module `instruction_decoder'.
Optimizing away select inverter for $mux cell `$procmux$210' in module `instruction_decoder'.
Optimizing away select inverter for $mux cell `$procmux$219' in module `internal_register'.
Optimizing away select inverter for $mux cell `$procmux$228' in module `internal_register'.
Optimizing away select inverter for $mux cell `$procmux$234' in module `internal_register'.
Optimizing away select inverter for $mux cell `$procmux$240' in module `internal_register'.
Optimizing away select inverter for $mux cell `$procmux$243' in module `internal_register'.
Optimizing away select inverter for $mux cell `$procmux$246' in module `internal_register'.
Optimizing away select inverter for $mux cell `$procmux$255' in module `internal_register'.
Optimizing away select inverter for $mux cell `$procmux$264' in module `internal_register'.
Optimizing away select inverter for $mux cell `$procmux$273' in module `internal_register'.
Optimizing away select inverter for $mux cell `$procmux$282' in module `internal_register'.
Optimizing away select inverter for $mux cell `$procmux$291' in module `internal_register'.
Replacing $eq cell `$procmux$306_CMP0' in module `program_counter' with $logic_not.
Optimizing away select inverter for $mux cell `$procmux$308' in module `program_counter'.
Replacing $eq cell `$eq$./alu_16bit.v:68$15' in module `alu_16bit' with $logic_not.
Replacing $eq cell `$procmux$326_CMP0' in module `mux4_16bit' with $logic_not.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \control_unit..
  removing unused `$logic_not' cell `$logic_not$./control_unit.v:64$49'.
Finding unused cells or wires in module \instruction_decoder..
  removing unused `$logic_not' cell `$logic_not$./instruction_decoder.v:27$47'.
Finding unused cells or wires in module \internal_register..
  removing unused `$logic_not' cell `$logic_not$./internal_register.v:22$34'.
  removing unused `$mux' cell `$procmux$214'.
  removing unused `$mux' cell `$procmux$216'.
  removing unused `$mux' cell `$procmux$219'.
  removing unused `$mux' cell `$procmux$223'.
  removing unused `$mux' cell `$procmux$225'.
  removing unused `$mux' cell `$procmux$228'.
  removing unused `$mux' cell `$procmux$231'.
  removing unused `$mux' cell `$procmux$234'.
  removing unused `$mux' cell `$procmux$237'.
  removing unused `$mux' cell `$procmux$240'.
  removing unused `$mux' cell `$procmux$243'.
  removing unused `$mux' cell `$procmux$246'.
  removing unused `$dff' cell `$procdff$336'.
  removing unused `$dff' cell `$procdff$337'.
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \program_counter..
  removing unused `$logic_not' cell `$logic_not$./program_counter.v:25$19'.
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \xor_16bit..
Finding unused cells or wires in module \sum_16bit..

3.5. Executing CHECK pass (checking for obvious problems).
checking module address_mux..
checking module alu_16bit..
checking module and_16bit..
checking module control_unit..
checking module data_mux..
checking module immediate_operation..
checking module instruction_decoder..
checking module internal_register..
checking module isEqual_16bit..
checking module isNotEqual_16bit..
checking module mux4_16bit..
checking module or_16bit..
checking module program_counter..
checking module program_counter_preset..
checking module signedGreaterOrEqual_16bit..
checking module signedLessThen_16bit..
checking module sub_16bit..
checking module sum_16bit..
checking module uProcessor..
checking module unsignedGreaterOrEqual_16bit..
checking module unsignedLessThen_16bit..
checking module xor_16bit..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
  Cell `$procmux$108_CMP0' is identical to cell `$procmux$100_CMP0'.
    Redirecting output \Y: $procmux$108_CMP = $procmux$100_CMP
    Removing $eq cell `$procmux$108_CMP0' from module `\control_unit'.
  Cell `$procmux$116_CMP0' is identical to cell `$procmux$102_CMP0'.
    Redirecting output \Y: $procmux$116_CMP = $procmux$102_CMP
    Removing $eq cell `$procmux$116_CMP0' from module `\control_unit'.
  Cell `$procmux$119_CMP0' is identical to cell `$procmux$114_CMP0'.
    Redirecting output \Y: $procmux$119_CMP = $procmux$114_CMP
    Removing $eq cell `$procmux$119_CMP0' from module `\control_unit'.
  Cell `$procmux$120_CMP0' is identical to cell `$procmux$109_CMP0'.
    Redirecting output \Y: $procmux$120_CMP = $procmux$109_CMP
    Removing $eq cell `$procmux$120_CMP0' from module `\control_unit'.
  Cell `$procmux$125_CMP0' is identical to cell `$procmux$114_CMP0'.
    Redirecting output \Y: $procmux$125_CMP = $procmux$114_CMP
    Removing $eq cell `$procmux$125_CMP0' from module `\control_unit'.
  Cell `$procmux$126_CMP0' is identical to cell `$procmux$107_CMP0'.
    Redirecting output \Y: $procmux$126_CMP = $procmux$107_CMP
    Removing $eq cell `$procmux$126_CMP0' from module `\control_unit'.
  Cell `$procmux$129_CMP0' is identical to cell `$procmux$102_CMP0'.
    Redirecting output \Y: $procmux$129_CMP = $procmux$102_CMP
    Removing $eq cell `$procmux$129_CMP0' from module `\control_unit'.
  Cell `$procmux$134_CMP0' is identical to cell `$procmux$114_CMP0'.
    Redirecting output \Y: $procmux$134_CMP = $procmux$114_CMP
    Removing $eq cell `$procmux$134_CMP0' from module `\control_unit'.
  Cell `$procmux$135_CMP0' is identical to cell `$procmux$107_CMP0'.
    Redirecting output \Y: $procmux$135_CMP = $procmux$107_CMP
    Removing $eq cell `$procmux$135_CMP0' from module `\control_unit'.
  Cell `$procmux$136_CMP0' is identical to cell `$procmux$100_CMP0'.
    Redirecting output \Y: $procmux$136_CMP = $procmux$100_CMP
    Removing $eq cell `$procmux$136_CMP0' from module `\control_unit'.
  Cell `$procmux$137_CMP0' is identical to cell `$procmux$127_CMP0'.
    Redirecting output \Y: $procmux$137_CMP = $procmux$127_CMP
    Removing $logic_not cell `$procmux$137_CMP0' from module `\control_unit'.
  Cell `$procmux$139_CMP0' is identical to cell `$procmux$102_CMP0'.
    Redirecting output \Y: $procmux$139_CMP = $procmux$102_CMP
    Removing $eq cell `$procmux$139_CMP0' from module `\control_unit'.
  Cell `$procmux$144_CMP0' is identical to cell `$procmux$107_CMP0'.
    Redirecting output \Y: $procmux$144_CMP = $procmux$107_CMP
    Removing $eq cell `$procmux$144_CMP0' from module `\control_unit'.
  Cell `$procmux$145_CMP0' is identical to cell `$procmux$100_CMP0'.
    Redirecting output \Y: $procmux$145_CMP = $procmux$100_CMP
    Removing $eq cell `$procmux$145_CMP0' from module `\control_unit'.
  Cell `$procmux$146_CMP0' is identical to cell `$procmux$127_CMP0'.
    Redirecting output \Y: $procmux$146_CMP = $procmux$127_CMP
    Removing $logic_not cell `$procmux$146_CMP0' from module `\control_unit'.
  Cell `$procmux$147_CMP0' is identical to cell `$procmux$109_CMP0'.
    Redirecting output \Y: $procmux$147_CMP = $procmux$109_CMP
    Removing $eq cell `$procmux$147_CMP0' from module `\control_unit'.
  Cell `$procmux$158_CMP0' is identical to cell `$procmux$143_CMP0'.
    Redirecting output \Y: $procmux$158_CMP = $procmux$143_CMP
    Removing $eq cell `$procmux$158_CMP0' from module `\control_unit'.
  Cell `$procmux$160_CMP0' is identical to cell `$procmux$109_CMP0'.
    Redirecting output \Y: $procmux$160_CMP = $procmux$109_CMP
    Removing $eq cell `$procmux$160_CMP0' from module `\control_unit'.
  Cell `$procmux$165_CMP0' is identical to cell `$procmux$102_CMP0'.
    Redirecting output \Y: $procmux$165_CMP = $procmux$102_CMP
    Removing $eq cell `$procmux$165_CMP0' from module `\control_unit'.
  Cell `$procmux$166_CMP0' is identical to cell `$procmux$109_CMP0'.
    Redirecting output \Y: $procmux$166_CMP = $procmux$109_CMP
    Removing $eq cell `$procmux$166_CMP0' from module `\control_unit'.
  Cell `$procmux$167_CMP0' is identical to cell `$procmux$152_CMP0'.
    Redirecting output \Y: $procmux$167_CMP = $procmux$152_CMP
    Removing $eq cell `$procmux$167_CMP0' from module `\control_unit'.
  Cell `$procmux$168_CMP0' is identical to cell `$procmux$161_CMP0'.
    Redirecting output \Y: $procmux$168_CMP = $procmux$161_CMP
    Removing $eq cell `$procmux$168_CMP0' from module `\control_unit'.
  Cell `$procmux$172_CMP0' is identical to cell `$procmux$162_CMP0'.
    Redirecting output \Y: $procmux$172_CMP = $procmux$162_CMP
    Removing $logic_not cell `$procmux$172_CMP0' from module `\control_unit'.
  Cell `$procmux$76_CMP0' is identical to cell `$procmux$100_CMP0'.
    Redirecting output \Y: $procmux$76_CMP = $procmux$100_CMP
    Removing $eq cell `$procmux$76_CMP0' from module `\control_unit'.
  Cell `$procmux$78_CMP0' is identical to cell `$procmux$102_CMP0'.
    Redirecting output \Y: $procmux$78_CMP = $procmux$102_CMP
    Removing $eq cell `$procmux$78_CMP0' from module `\control_unit'.
  Cell `$procmux$84_CMP0' is identical to cell `$procmux$107_CMP0'.
    Redirecting output \Y: $procmux$84_CMP = $procmux$107_CMP
    Removing $eq cell `$procmux$84_CMP0' from module `\control_unit'.
  Cell `$procmux$86_CMP0' is identical to cell `$procmux$102_CMP0'.
    Redirecting output \Y: $procmux$86_CMP = $procmux$102_CMP
    Removing $eq cell `$procmux$86_CMP0' from module `\control_unit'.
  Cell `$procmux$91_CMP0' is identical to cell `$procmux$107_CMP0'.
    Redirecting output \Y: $procmux$91_CMP = $procmux$107_CMP
    Removing $eq cell `$procmux$91_CMP0' from module `\control_unit'.
  Cell `$procmux$92_CMP0' is identical to cell `$procmux$109_CMP0'.
    Redirecting output \Y: $procmux$92_CMP = $procmux$109_CMP
    Removing $eq cell `$procmux$92_CMP0' from module `\control_unit'.
  Cell `$procmux$93_CMP0' is identical to cell `$procmux$152_CMP0'.
    Redirecting output \Y: $procmux$93_CMP = $procmux$152_CMP
    Removing $eq cell `$procmux$93_CMP0' from module `\control_unit'.
  Cell `$procmux$99_CMP0' is identical to cell `$procmux$107_CMP0'.
    Redirecting output \Y: $procmux$99_CMP = $procmux$107_CMP
    Removing $eq cell `$procmux$99_CMP0' from module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 31 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./address_mux.v:8$22 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$101 (pure)
    Root of a mux tree: $procmux$151 (pure)
    Root of a mux tree: $procmux$159 (pure)
    Root of a mux tree: $procmux$128 (pure)
    Root of a mux tree: $procmux$174 (pure)
    Root of a mux tree: $procmux$54 (pure)
    Root of a mux tree: $procmux$77 (pure)
    Root of a mux tree: $procmux$115 (pure)
    Root of a mux tree: $procmux$85 (pure)
    Root of a mux tree: $procmux$138 (pure)
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$170.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$300 (pure)
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$297.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./immediate_operation.v:8$16 (pure)
    Root of a mux tree: $ternary$./immediate_operation.v:9$17 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$186 (pure)
    Root of a mux tree: $procmux$192 (pure)
    Root of a mux tree: $procmux$198 (pure)
    Root of a mux tree: $procmux$204 (pure)
    Root of a mux tree: $procmux$210 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$255 (pure)
    Root of a mux tree: $procmux$264 (pure)
    Root of a mux tree: $procmux$273 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$291 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$310 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$308 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./program_counter_preset.v:8$21 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 2 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
    New ctrl vector for $pmux cell $procmux$124: $auto$opt_reduce.cc:132:opt_mux$343
    New ctrl vector for $pmux cell $procmux$106: $auto$opt_reduce.cc:132:opt_mux$345
    New ctrl vector for $pmux cell $procmux$164: { $procmux$161_CMP $procmux$152_CMP $procmux$109_CMP $auto$opt_reduce.cc:132:opt_mux$347 }
    New ctrl vector for $pmux cell $procmux$133: $auto$opt_reduce.cc:132:opt_mux$349
    New ctrl vector for $pmux cell $procmux$54: { $auto$opt_reduce.cc:132:opt_mux$351 $procmux$58_CMP $procmux$57_CMP $procmux$56_CMP $procmux$55_CMP }
    New ctrl vector for $pmux cell $procmux$142: $auto$opt_reduce.cc:132:opt_mux$353
    New ctrl vector for $pmux cell $procmux$98: $auto$opt_reduce.cc:132:opt_mux$355
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$342: { $procmux$107_CMP $procmux$114_CMP $procmux$127_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$346: { $procmux$102_CMP $procmux$162_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$348: { $procmux$100_CMP $procmux$107_CMP $procmux$114_CMP $procmux$127_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$350: { $procmux$59_CMP $procmux$60_CMP $procmux$61_CMP $procmux$62_CMP $procmux$63_CMP $procmux$64_CMP $procmux$65_CMP $procmux$66_CMP $procmux$67_CMP $procmux$68_CMP $procmux$69_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$352: { $procmux$100_CMP $procmux$107_CMP $procmux$127_CMP $procmux$143_CMP }
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
    Consolidated identical input bits for $mux cell $procmux$250:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$procmux$250_Y
      New ports: A=1'0, B=1'1, Y=$procmux$250_Y [0]
      New connections: $procmux$250_Y [15:1] = { $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] $procmux$250_Y [0] }
  Optimizing cells in module \internal_register.
    Consolidated identical input bits for $mux cell $procmux$252:
      Old ports: A=16'0000000000000000, B=$procmux$250_Y, Y=$procmux$252_Y
      New ports: A=1'0, B=$procmux$250_Y [0], Y=$procmux$252_Y [0]
      New connections: $procmux$252_Y [15:1] = { $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] $procmux$252_Y [0] }
  Optimizing cells in module \internal_register.
    Consolidated identical input bits for $mux cell $procmux$255:
      Old ports: A=16'0000000000000000, B=$procmux$252_Y, Y=$0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33
      New ports: A=1'0, B=$procmux$252_Y [0], Y=$0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0]
      New connections: $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [15:1] = { $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] }
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 15 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$344' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$354'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$345 = $auto$opt_reduce.cc:132:opt_mux$355
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$344' from module `\control_unit'.
  Cell `$procmux$90' is identical to cell `$procmux$83'.
    Redirecting output \Y: $procmux$90_Y = $procmux$83_Y
    Removing $mux cell `$procmux$90' from module `\control_unit'.
  Cell `$procmux$98' is identical to cell `$procmux$106'.
    Redirecting output \Y: $procmux$98_Y = $procmux$106_Y
    Removing $mux cell `$procmux$98' from module `\control_unit'.
  Cell `$procmux$118' is identical to cell `$procmux$113'.
    Redirecting output \Y: $procmux$118_Y = $procmux$113_Y
    Removing $mux cell `$procmux$118' from module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 4 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./address_mux.v:8$22 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$101 (pure)
    Root of a mux tree: $procmux$115 (pure)
    Root of a mux tree: $procmux$128 (pure)
    Root of a mux tree: $procmux$138 (pure)
    Root of a mux tree: $procmux$151 (pure)
    Root of a mux tree: $procmux$159 (pure)
    Root of a mux tree: $procmux$174 (pure)
    Root of a mux tree: $procmux$54 (pure)
    Root of a mux tree: $procmux$77 (pure)
    Root of a mux tree: $procmux$85 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$300 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./immediate_operation.v:8$16 (pure)
    Root of a mux tree: $ternary$./immediate_operation.v:9$17 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$186 (pure)
    Root of a mux tree: $procmux$192 (pure)
    Root of a mux tree: $procmux$198 (pure)
    Root of a mux tree: $procmux$204 (pure)
    Root of a mux tree: $procmux$210 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$255 (pure)
    Root of a mux tree: $procmux$264 (pure)
    Root of a mux tree: $procmux$273 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$291 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$310 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$308 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./program_counter_preset.v:8$21 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
    New ctrl vector for $pmux cell $procmux$101: $auto$opt_reduce.cc:132:opt_mux$357
    New ctrl vector for $pmux cell $procmux$115: $auto$opt_reduce.cc:132:opt_mux$359
    New ctrl vector for $pmux cell $procmux$85: { $procmux$152_CMP $auto$opt_reduce.cc:132:opt_mux$361 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$356: { $procmux$102_CMP $procmux$109_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$358: { $procmux$102_CMP $procmux$109_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$360: { $procmux$102_CMP $procmux$109_CMP }
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 6 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$358' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$360'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$359 = $auto$opt_reduce.cc:132:opt_mux$361
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$358' from module `\control_unit'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$356' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$360'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$357 = $auto$opt_reduce.cc:132:opt_mux$361
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$356' from module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 2 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./address_mux.v:8$22 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$101 (pure)
    Root of a mux tree: $procmux$115 (pure)
    Root of a mux tree: $procmux$128 (pure)
    Root of a mux tree: $procmux$138 (pure)
    Root of a mux tree: $procmux$151 (pure)
    Root of a mux tree: $procmux$159 (pure)
    Root of a mux tree: $procmux$174 (pure)
    Root of a mux tree: $procmux$54 (pure)
    Root of a mux tree: $procmux$77 (pure)
    Root of a mux tree: $procmux$85 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$300 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./immediate_operation.v:8$16 (pure)
    Root of a mux tree: $ternary$./immediate_operation.v:9$17 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$186 (pure)
    Root of a mux tree: $procmux$192 (pure)
    Root of a mux tree: $procmux$198 (pure)
    Root of a mux tree: $procmux$204 (pure)
    Root of a mux tree: $procmux$210 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$255 (pure)
    Root of a mux tree: $procmux$264 (pure)
    Root of a mux tree: $procmux$273 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$291 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$310 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$308 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./program_counter_preset.v:8$21 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.6.22. Executing OPT_EXPR pass (perform const folding).

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$55_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell control_unit.$procmux$56_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell control_unit.$procmux$57_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell control_unit.$procmux$58_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$65_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$66_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$67_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell control_unit.$procmux$100_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unit.$procmux$107_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unit.$procmux$109_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unit.$procmux$114_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unit.$procmux$152_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell control_unit.$procmux$161_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell data_mux.$eq$./data_mux.v:17$24 ($eq).
Removed cell internal_register.$procmux$259 ($mux).
Removed cell internal_register.$procmux$261 ($mux).
Removed cell internal_register.$procmux$264 ($mux).
Removed cell internal_register.$procmux$268 ($mux).
Removed cell internal_register.$procmux$270 ($mux).
Removed cell internal_register.$procmux$273 ($mux).
Removed top 1 bits (of 4) from port B of cell mux4_16bit.$procmux$319_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell mux4_16bit.$procmux$320_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell mux4_16bit.$procmux$321_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell mux4_16bit.$procmux$322_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell mux4_16bit.$procmux$323_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell mux4_16bit.$procmux$324_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell mux4_16bit.$procmux$325_CMP0 ($eq).
Removed top 15 bits (of 16) from port B of cell program_counter.$add$./program_counter.v:35$20 ($add).
Removed top 1 bits (of 2) from port B of cell program_counter.$procmux$305_CMP0 ($eq).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module address_mux:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module alu_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module and_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module control_unit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_mux:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module immediate_operation:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module instruction_decoder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module internal_register:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module isEqual_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module isNotEqual_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux4_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module or_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module program_counter:
  creating $macc model for $add$./program_counter.v:35$20 ($add).
  creating $alu model for $macc $add$./program_counter.v:35$20.
  creating $alu cell for $add$./program_counter.v:35$20: $auto$alumacc.cc:470:replace_alu$362
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module program_counter_preset:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module signedGreaterOrEqual_16bit:
  creating $alu model for $lt$./signedGreaterOrEqual_16bit.v:10$9 ($lt): new $alu
  creating $alu cell for $lt$./signedGreaterOrEqual_16bit.v:10$9: $auto$alumacc.cc:470:replace_alu$366
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module signedLessThen_16bit:
  creating $alu model for $lt$./signedLessThen_16bit.v:10$8 ($lt): new $alu
  creating $alu cell for $lt$./signedLessThen_16bit.v:10$8: $auto$alumacc.cc:470:replace_alu$380
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sub_16bit:
  creating $macc model for $sub$./sub_16bit.v:10$7 ($sub).
  creating $alu model for $macc $sub$./sub_16bit.v:10$7.
  creating $alu cell for $sub$./sub_16bit.v:10$7: $auto$alumacc.cc:470:replace_alu$393
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sum_16bit:
  creating $macc model for $add$./sum_16bit.v:7$1 ($add).
  creating $alu model for $macc $add$./sum_16bit.v:7$1.
  creating $alu cell for $add$./sum_16bit.v:7$1: $auto$alumacc.cc:470:replace_alu$396
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uProcessor:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module unsignedGreaterOrEqual_16bit:
  creating $alu model for $lt$./unsignedGreaterOrEqual_16bit.v:11$12 ($lt): new $alu
  creating $alu cell for $lt$./unsignedGreaterOrEqual_16bit.v:11$12: $auto$alumacc.cc:470:replace_alu$400
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module unsignedLessThen_16bit:
  creating $alu model for $lt$./unsignedLessThen_16bit.v:10$11 ($lt): new $alu
  creating $alu cell for $lt$./unsignedLessThen_16bit.v:10$11: $auto$alumacc.cc:470:replace_alu$412
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module xor_16bit:
  created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module internal_register that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\internal_reg$./internal_register.v:33$42 ($memrd):
    Found 1 activation_patterns using ctrl signal { \wr_en \enable \reset }.
    Found 1 candidates: $memrd$\internal_reg$./internal_register.v:32$41
    Analyzing resource sharing with $memrd$\internal_reg$./internal_register.v:32$41 ($memrd):
      Found 1 activation_patterns using ctrl signal { \wr_en \enable \reset }.
      Activation pattern for cell $memrd$\internal_reg$./internal_register.v:33$42: { \wr_en \enable \reset } = 3'011
      Activation pattern for cell $memrd$\internal_reg$./internal_register.v:32$41: { \wr_en \enable \reset } = 3'011
      Size of SAT problem: 0 cells, 12 variables, 25 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { \wr_en \enable \reset } = 3'011
  Analyzing resource sharing options for $memrd$\internal_reg$./internal_register.v:32$41 ($memrd):
    Found 1 activation_patterns using ctrl signal { \wr_en \enable \reset }.
    No candidates found.

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).
Replacing $not cell `$not$./signedGreaterOrEqual_16bit.v:10$10' (double_invert) in module `\signedGreaterOrEqual_16bit' with constant driver `\result [0] = $auto$rtlil.cc:1630:Or$376'.
Replacing $not cell `$not$./unsignedGreaterOrEqual_16bit.v:11$13' (double_invert) in module `\unsignedGreaterOrEqual_16bit' with constant driver `\result [0] = $auto$rtlil.cc:1630:Or$408'.

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./address_mux.v:8$22 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$101 (pure)
    Root of a mux tree: $procmux$115 (pure)
    Root of a mux tree: $procmux$128 (pure)
    Root of a mux tree: $procmux$138 (pure)
    Root of a mux tree: $procmux$151 (pure)
    Root of a mux tree: $procmux$159 (pure)
    Root of a mux tree: $procmux$174 (pure)
    Root of a mux tree: $procmux$54 (pure)
    Root of a mux tree: $procmux$77 (pure)
    Root of a mux tree: $procmux$85 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$300 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./immediate_operation.v:8$16 (pure)
    Root of a mux tree: $ternary$./immediate_operation.v:9$17 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$186 (pure)
    Root of a mux tree: $procmux$192 (pure)
    Root of a mux tree: $procmux$198 (pure)
    Root of a mux tree: $procmux$204 (pure)
    Root of a mux tree: $procmux$210 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$255 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$291 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$310 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$308 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./program_counter_preset.v:8$21 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$369: { $auto$alumacc.cc:483:replace_alu$367 [0] $auto$alumacc.cc:483:replace_alu$367 [1] $auto$alumacc.cc:483:replace_alu$367 [2] $auto$alumacc.cc:483:replace_alu$367 [3] $auto$alumacc.cc:483:replace_alu$367 [4] $auto$alumacc.cc:483:replace_alu$367 [5] $auto$alumacc.cc:483:replace_alu$367 [6] $auto$alumacc.cc:483:replace_alu$367 [7] $auto$alumacc.cc:483:replace_alu$367 [8] $auto$alumacc.cc:483:replace_alu$367 [9] $auto$alumacc.cc:483:replace_alu$367 [10] $auto$alumacc.cc:483:replace_alu$367 [11] $auto$alumacc.cc:483:replace_alu$367 [12] $auto$alumacc.cc:483:replace_alu$367 [13] $auto$alumacc.cc:483:replace_alu$367 [14] $auto$alumacc.cc:483:replace_alu$367 [15] }
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$383: { $auto$alumacc.cc:483:replace_alu$381 [0] $auto$alumacc.cc:483:replace_alu$381 [1] $auto$alumacc.cc:483:replace_alu$381 [2] $auto$alumacc.cc:483:replace_alu$381 [3] $auto$alumacc.cc:483:replace_alu$381 [4] $auto$alumacc.cc:483:replace_alu$381 [5] $auto$alumacc.cc:483:replace_alu$381 [6] $auto$alumacc.cc:483:replace_alu$381 [7] $auto$alumacc.cc:483:replace_alu$381 [8] $auto$alumacc.cc:483:replace_alu$381 [9] $auto$alumacc.cc:483:replace_alu$381 [10] $auto$alumacc.cc:483:replace_alu$381 [11] $auto$alumacc.cc:483:replace_alu$381 [12] $auto$alumacc.cc:483:replace_alu$381 [13] $auto$alumacc.cc:483:replace_alu$381 [14] $auto$alumacc.cc:483:replace_alu$381 [15] }
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$403: { $auto$alumacc.cc:483:replace_alu$401 [0] $auto$alumacc.cc:483:replace_alu$401 [1] $auto$alumacc.cc:483:replace_alu$401 [2] $auto$alumacc.cc:483:replace_alu$401 [3] $auto$alumacc.cc:483:replace_alu$401 [4] $auto$alumacc.cc:483:replace_alu$401 [5] $auto$alumacc.cc:483:replace_alu$401 [6] $auto$alumacc.cc:483:replace_alu$401 [7] $auto$alumacc.cc:483:replace_alu$401 [8] $auto$alumacc.cc:483:replace_alu$401 [9] $auto$alumacc.cc:483:replace_alu$401 [10] $auto$alumacc.cc:483:replace_alu$401 [11] $auto$alumacc.cc:483:replace_alu$401 [12] $auto$alumacc.cc:483:replace_alu$401 [13] $auto$alumacc.cc:483:replace_alu$401 [14] $auto$alumacc.cc:483:replace_alu$401 [15] }
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$415: { $auto$alumacc.cc:483:replace_alu$413 [0] $auto$alumacc.cc:483:replace_alu$413 [1] $auto$alumacc.cc:483:replace_alu$413 [2] $auto$alumacc.cc:483:replace_alu$413 [3] $auto$alumacc.cc:483:replace_alu$413 [4] $auto$alumacc.cc:483:replace_alu$413 [5] $auto$alumacc.cc:483:replace_alu$413 [6] $auto$alumacc.cc:483:replace_alu$413 [7] $auto$alumacc.cc:483:replace_alu$413 [8] $auto$alumacc.cc:483:replace_alu$413 [9] $auto$alumacc.cc:483:replace_alu$413 [10] $auto$alumacc.cc:483:replace_alu$413 [11] $auto$alumacc.cc:483:replace_alu$413 [12] $auto$alumacc.cc:483:replace_alu$413 [13] $auto$alumacc.cc:483:replace_alu$413 [14] $auto$alumacc.cc:483:replace_alu$413 [15] }
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 4 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
  removing unused `$not' cell `$auto$alumacc.cc:58:get_gt$377'.
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
  removing unused `$not' cell `$auto$alumacc.cc:58:get_gt$409'.
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Rerunning OPT passes. (Maybe there is more to do..)

3.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./address_mux.v:8$22 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$101 (pure)
    Root of a mux tree: $procmux$115 (pure)
    Root of a mux tree: $procmux$128 (pure)
    Root of a mux tree: $procmux$138 (pure)
    Root of a mux tree: $procmux$151 (pure)
    Root of a mux tree: $procmux$159 (pure)
    Root of a mux tree: $procmux$174 (pure)
    Root of a mux tree: $procmux$54 (pure)
    Root of a mux tree: $procmux$77 (pure)
    Root of a mux tree: $procmux$85 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$300 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./immediate_operation.v:8$16 (pure)
    Root of a mux tree: $ternary$./immediate_operation.v:9$17 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$186 (pure)
    Root of a mux tree: $procmux$192 (pure)
    Root of a mux tree: $procmux$198 (pure)
    Root of a mux tree: $procmux$204 (pure)
    Root of a mux tree: $procmux$210 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$255 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$291 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$310 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$308 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./program_counter_preset.v:8$21 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 0 changes.

3.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.10.15. Executing OPT_EXPR pass (perform const folding).

3.10.16. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register control_unit.cState.
Not marking internal_register.$memwr$\internal_reg$./internal_register.v:29$27_EN as FSM state register:
    Users of register don't seem to benefit from recoding.

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\cState' from module `\control_unit'.
  found $dff cell for state register: $procdff$327
  root of input selection tree: $0\cState[2:0]
  found reset state: 3'000 (guessed from mux tree)
  found ctrl input: \reset
  found state code: 3'000
  found ctrl input: $auto$opt_reduce.cc:132:opt_mux$347
  found ctrl input: $procmux$109_CMP
  found ctrl input: $procmux$152_CMP
  found ctrl input: $procmux$161_CMP
  found state code: 3'001
  found state code: 3'110
  found state code: 3'010
  found state code: 3'011
  found ctrl output: $procmux$102_CMP
  found ctrl output: $procmux$109_CMP
  found ctrl output: $procmux$152_CMP
  found ctrl output: $procmux$161_CMP
  found ctrl output: $procmux$162_CMP
  ctrl inputs: { $auto$opt_reduce.cc:132:opt_mux$347 \reset }
  ctrl outputs: { $procmux$162_CMP $procmux$161_CMP $procmux$152_CMP $procmux$109_CMP $procmux$102_CMP $0\cState[2:0] }
  transition:      3'000 2'-0 ->      3'000 8'10000000
  transition:      3'000 2'-1 ->      3'001 8'10000001
  transition:      3'010 2'-0 ->      3'000 8'00010000
  transition:      3'010 2'-1 ->      3'110 8'00010110
  transition:      3'110 2'-0 ->      3'000 8'00001000
  transition:      3'110 2'-1 ->      3'001 8'00001001
  transition:      3'001 2'-0 ->      3'000 8'01000000
  transition:      3'001 2'-1 ->      3'011 8'01000011
  transition:      3'011 2'-0 ->      3'000 8'00100000
  transition:      3'011 2'-1 ->      3'010 8'00100010

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\cState$423' from module `\control_unit'.
  Removing unused input signal $auto$opt_reduce.cc:132:opt_mux$347.

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
  removing unused `$reduce_or' cell `$auto$opt_reduce.cc:126:opt_mux$346'.
  removing unused `$eq' cell `$procmux$102_CMP0'.
  removing unused `$eq' cell `$procmux$109_CMP0'.
  removing unused `$eq' cell `$procmux$152_CMP0'.
  removing unused `$eq' cell `$procmux$161_CMP0'.
  removing unused `$logic_not' cell `$procmux$162_CMP0'.
  removing unused `$pmux' cell `$procmux$164'.
  removing unused `$mux' cell `$procmux$174'.
  removing unused `$dff' cell `$procdff$327'.
  removing unused non-port wire \nState.
  removed 1 unused temporary wires.
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\cState$423' from module `\control_unit'.
  Removing unused output signal $0\cState[2:0] [0].
  Removing unused output signal $0\cState[2:0] [1].
  Removing unused output signal $0\cState[2:0] [2].

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\cState$423' from module `\control_unit' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000 -> ----1
  010 -> ---1-
  110 -> --1--
  001 -> -1---
  011 -> 1----

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\cState$423' from module `\control_unit':
-------------------------------------

  Information on FSM $fsm$\cState$423 (\cState):

  Number of input signals:    1
  Number of output signals:   5
  Number of state bits:       5

  Input signals:
    0: \reset

  Output signals:
    0: $procmux$102_CMP
    1: $procmux$109_CMP
    2: $procmux$152_CMP
    3: $procmux$161_CMP
    4: $procmux$162_CMP

  State encoding:
    0:    5'----1  <RESET STATE>
    1:    5'---1-
    2:    5'--1--
    3:    5'-1---
    4:    5'1----

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 1'0   ->     0 5'10000
      1:     0 1'1   ->     3 5'10000
      2:     1 1'0   ->     0 5'00010
      3:     1 1'1   ->     2 5'00010
      4:     2 1'0   ->     0 5'00001
      5:     2 1'1   ->     3 5'00001
      6:     3 1'0   ->     0 5'01000
      7:     3 1'1   ->     4 5'01000
      8:     4 1'0   ->     0 5'00100
      9:     4 1'1   ->     1 5'00100

-------------------------------------

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\cState$423' from module `\control_unit'.

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$auto$fsm_map.cc:77:implement_pattern_cache$445' (1) in module `\control_unit' with constant driver `$auto$fsm_map.cc:74:implement_pattern_cache$444 = \reset'.
Replacing $eq cell `$auto$fsm_map.cc:77:implement_pattern_cache$437' (1) in module `\control_unit' with constant driver `$auto$fsm_map.cc:74:implement_pattern_cache$436 = \reset'.
Replacing $eq cell `$auto$fsm_map.cc:77:implement_pattern_cache$441' (1) in module `\control_unit' with constant driver `$auto$fsm_map.cc:74:implement_pattern_cache$440 = \reset'.
Replacing $eq cell `$auto$fsm_map.cc:77:implement_pattern_cache$435' in module `control_unit' with inverter.
Replacing $eq cell `$auto$fsm_map.cc:77:implement_pattern_cache$451' (1) in module `\control_unit' with constant driver `$auto$fsm_map.cc:74:implement_pattern_cache$450 = \reset'.

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\internal_reg$./internal_register.v:29$43' in module `\internal_register': merged $dff to cell.
Checking cell `$memrd$\internal_reg$./internal_register.v:32$41' in module `\internal_register': no (compatible) $dff found.
Checking cell `$memrd$\internal_reg$./internal_register.v:33$42' in module `\internal_register': no (compatible) $dff found.

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
  removing unused `$dff' cell `$procdff$338'.
  removing unused `$dff' cell `$procdff$339'.
  removing unused `$dff' cell `$procdff$340'.
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\internal_reg' in module `\internal_register':
  $memwr$\internal_reg$./internal_register.v:29$43 ($memwr)
  $memrd$\internal_reg$./internal_register.v:32$41 ($memrd)
  $memrd$\internal_reg$./internal_register.v:33$42 ($memrd)

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$75' (mux_bool) in module `\control_unit' with constant driver `$procmux$75_Y = $procmux$100_CMP'.
Replacing $mux cell `$procmux$83' (mux_bool) in module `\control_unit' with constant driver `$procmux$83_Y = $procmux$107_CMP'.
Replacing $mux cell `$procmux$106' (mux_bool) in module `\control_unit' with constant driver `$procmux$106_Y = $auto$opt_reduce.cc:132:opt_mux$345'.
Replacing $mux cell `$procmux$113' (mux_bool) in module `\control_unit' with constant driver `$procmux$113_Y = $procmux$114_CMP'.
Replacing $mux cell `$procmux$124' (mux_bool) in module `\control_unit' with constant driver `$procmux$124_Y = $auto$opt_reduce.cc:132:opt_mux$343'.
Replacing $mux cell `$procmux$133' (mux_bool) in module `\control_unit' with constant driver `$procmux$133_Y = $auto$opt_reduce.cc:132:opt_mux$349'.
Replacing $mux cell `$procmux$142' (mux_bool) in module `\control_unit' with constant driver `$procmux$142_Y = $auto$opt_reduce.cc:132:opt_mux$353'.
Replacing $mux cell `$procmux$151' (mux_bool) in module `\control_unit' with constant driver `\inst_wr = \cState [4]'.
Replacing $mux cell `$procmux$77' in module `control_unit' with and-gate.
Replacing $mux cell `$procmux$101' in module `control_unit' with and-gate.
Replacing $mux cell `$procmux$115' in module `control_unit' with and-gate.
Replacing $mux cell `$procmux$128' in module `control_unit' with and-gate.
Replacing $mux cell `$procmux$210' in module `instruction_decoder' with and-gate.
Replacing $mux cell `$procmux$250' (mux_bool) in module `\internal_register' with constant driver `$procmux$250_Y [15] = \wr_en'.
Replacing $mux cell `$procmux$252' in module `internal_register' with and-gate.
Replacing $mux cell `$procmux$255' in module `internal_register' with and-gate.
Optimized away 1 select inputs of $pmux cell `$procmux$310' in module `mux4_16bit'.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
  removing unused `$logic_not' cell `$procmux$326_CMP0'.
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \internal_reg in module \internal_register:
  created 8 $dff cells and 0 static cells of width 16.
  read interface: 0 $dff and 14 $mux cells.
  write interface: 8 write mux blocks.

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$513' in module `internal_register' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$515' in module `internal_register' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$517' in module `internal_register' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$527' (1) in module `\internal_register' with constant driver `$auto$rtlil.cc:1641:Eq$528 = \rd_adrs [0]'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$551' (1) in module `\internal_register' with constant driver `$auto$rtlil.cc:1641:Eq$552 = \rd_adrs [2]'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$535' (1) in module `\internal_register' with constant driver `$auto$rtlil.cc:1641:Eq$536 = \rd_adrs [1]'.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./address_mux.v:8$22 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$138 (pure)
    Root of a mux tree: $procmux$159 (pure)
    Root of a mux tree: $procmux$54 (pure)
    Root of a mux tree: $procmux$85 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$300 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./immediate_operation.v:8$16 (pure)
    Root of a mux tree: $ternary$./immediate_operation.v:9$17 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$186 (pure)
    Root of a mux tree: $procmux$192 (pure)
    Root of a mux tree: $procmux$198 (pure)
    Root of a mux tree: $procmux$204 (pure)
    Root of a mux tree: $procmux$207 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $memory\internal_reg$wrmux[5][0][0]$565 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[4][0][0]$559 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[3][0][0]$549 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[2][0][0]$543 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[6][0][0]$573 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[1][0][0]$533 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[0][0][0]$525 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$291 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[7][0][0]$579 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$310 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$308 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./program_counter_preset.v:8$21 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$360: { \cState [1] \cState [2] }
    New input vector for $reduce_or cell $auto$fsm_map.cc:105:implement_pattern_cache$447: { \cState [0] \cState [2] }
    Consolidated identical input bits for $mux cell $procmux$157:
      Old ports: A=2'11, B=2'01, Y=$procmux$157_Y
      New ports: A=1'1, B=1'0, Y=$procmux$157_Y [1]
      New connections: $procmux$157_Y [0] = 1'1
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 3 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.17.8. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$157' in module `control_unit' with inverter.

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./address_mux.v:8$22 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$138 (pure)
    Root of a mux tree: $procmux$159 (pure)
    Root of a mux tree: $procmux$54 (pure)
    Root of a mux tree: $procmux$85 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$300 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./immediate_operation.v:8$16 (pure)
    Root of a mux tree: $ternary$./immediate_operation.v:9$17 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$186 (pure)
    Root of a mux tree: $procmux$192 (pure)
    Root of a mux tree: $procmux$198 (pure)
    Root of a mux tree: $procmux$204 (pure)
    Root of a mux tree: $procmux$207 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $memory\internal_reg$wrmux[0][0][0]$525 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[1][0][0]$533 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[2][0][0]$543 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[3][0][0]$549 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[4][0][0]$559 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[5][0][0]$565 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[6][0][0]$573 (pure)
    Root of a mux tree: $memory\internal_reg$wrmux[7][0][0]$579 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$291 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$310 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$308 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$./program_counter_preset.v:8$21 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 0 changes.

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.17.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.17.15. Executing OPT_EXPR pass (perform const folding).

3.17.16. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 16
Parameter \B_WIDTH = 16
Parameter \Y_WIDTH = 16
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16'.

3.18.3. Continuing TECHMAP pass.
Mapping sum_16bit.$auto$alumacc.cc:470:replace_alu$396 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.$xor$<techmap.v>:262$628 ($xor) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.$xor$<techmap.v>:263$629 ($xor) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.$and$<techmap.v>:260$627 ($and) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 16
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=16'.

3.18.5. Executing PROC pass (convert processes to netlists).

3.18.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.5.3. Executing PROC_INIT pass (extract init attributes).

3.18.5.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.5.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=16.$proc$<techmap.v>:207$713'.
     1/32: $0\p[15:0] [14]
     2/32: $0\g[15:0] [14]
     3/32: $0\p[15:0] [12]
     4/32: $0\g[15:0] [12]
     5/32: $0\p[15:0] [10]
     6/32: $0\g[15:0] [10]
     7/32: $0\p[15:0] [8]
     8/32: $0\g[15:0] [8]
     9/32: $0\p[15:0] [6]
    10/32: $0\g[15:0] [6]
    11/32: $0\p[15:0] [4]
    12/32: $0\g[15:0] [4]
    13/32: $0\p[15:0] [2]
    14/32: $0\g[15:0] [2]
    15/32: $0\p[15:0] [13]
    16/32: $0\g[15:0] [13]
    17/32: $0\p[15:0] [9]
    18/32: $0\g[15:0] [9]
    19/32: $0\p[15:0] [5]
    20/32: $0\g[15:0] [5]
    21/32: $0\p[15:0] [11]
    22/32: $0\g[15:0] [11]
    23/32: $0\p[15:0] [15]
    24/32: $0\g[15:0] [15]
    25/32: $0\p[15:0] [7]
    26/32: $0\g[15:0] [7]
    27/32: $0\p[15:0] [3]
    28/32: $0\g[15:0] [3]
    29/32: $0\p[15:0] [1]
    30/32: $0\g[15:0] [1]
    31/32: $0\g[15:0] [0]
    32/32: $0\p[15:0] [0]

3.18.5.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=16.\g' from process `$paramod\_90_lcu\WIDTH=16.$proc$<techmap.v>:207$713'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=16.\p' from process `$paramod\_90_lcu\WIDTH=16.$proc$<techmap.v>:207$713'.

3.18.5.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.5.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=16.$proc$<techmap.v>:207$713'.
Cleaned up 0 empty switches.

3.18.6. Executing OPT pass (performing simple optimizations).

3.18.6.1. Executing OPT_EXPR pass (perform const folding).

3.18.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=16'.
Removed a total of 0 cells.

3.18.6.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=16..
  removing unused `$and' cell `$and$<techmap.v>:222$718'.
  removing unused `$and' cell `$and$<techmap.v>:222$742'.
  removing unused `$and' cell `$and$<techmap.v>:222$754'.
  removing unused `$and' cell `$and$<techmap.v>:222$760'.
  removing unused `$and' cell `$and$<techmap.v>:230$763'.
  removing unused `$and' cell `$and$<techmap.v>:230$766'.
  removing unused `$and' cell `$and$<techmap.v>:230$769'.
  removing unused `$and' cell `$and$<techmap.v>:230$772'.
  removing unused `$and' cell `$and$<techmap.v>:230$775'.
  removing unused `$and' cell `$and$<techmap.v>:230$778'.
  removing unused `$and' cell `$and$<techmap.v>:230$781'.
  removing unused `$and' cell `$and$<techmap.v>:230$784'.
  removing unused `$and' cell `$and$<techmap.v>:230$787'.
  removing unused `$and' cell `$and$<techmap.v>:230$790'.
  removing unused `$and' cell `$and$<techmap.v>:230$793'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.6.5. Finished fast OPT passes.

3.18.7. Continuing TECHMAP pass.
Mapping sum_16bit.$auto$alumacc.cc:470:replace_alu$396.lcu using $paramod\_90_lcu\WIDTH=16.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626 ($mux) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.$not$<techmap.v>:258$625 ($not) with simplemap.
Mapping sum_16bit.$auto$alumacc.cc:470:replace_alu$396.B_conv ($pos) with simplemap.
Mapping sum_16bit.$auto$alumacc.cc:470:replace_alu$396.A_conv ($pos) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:212$714 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$716 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$719 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$722 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$725 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$728 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$731 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$734 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$737 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$740 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$743 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$746 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$749 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$752 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$755 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:221$758 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:222$721 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:222$724 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:222$727 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:222$730 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:222$733 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:222$736 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:222$739 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:222$745 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:222$748 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:222$751 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:222$757 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:229$761 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:229$764 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:229$767 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:229$770 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:229$773 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:229$776 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:229$779 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:229$782 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:229$785 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:229$788 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:229$791 ($and) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:212$715 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$717 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$720 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$723 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$726 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$729 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$732 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$735 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$738 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$741 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$744 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$747 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$750 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$753 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$756 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:221$759 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:229$762 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:229$765 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:229$768 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:229$771 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:229$774 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:229$777 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:229$780 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:229$783 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:229$786 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:229$789 ($or) with simplemap.
Mapping sum_16bit.$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$or$<techmap.v>:229$792 ($or) with simplemap.
Mapping xor_16bit.$xor$./xor_16bit.v:11$2 ($xor) with simplemap.
Mapping or_16bit.$or$./or_16bit.v:10$3 ($or) with simplemap.
Mapping and_16bit.$and$./and_16bit.v:10$4 ($and) with simplemap.
Mapping isEqual_16bit.$eq$./isEqual_16bit.v:10$5 ($eq) with simplemap.
Mapping isNotEqual_16bit.$ne$./isNotEqual_16bit.v:10$6 ($ne) with simplemap.
Mapping sub_16bit.$auto$alumacc.cc:470:replace_alu$393 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.$and$<techmap.v>:260$627 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625 ($not) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626 ($mux) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.$xor$<techmap.v>:262$628 ($xor) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.$xor$<techmap.v>:263$629 ($xor) with simplemap.
Mapping sub_16bit.$auto$alumacc.cc:470:replace_alu$393.A_conv ($pos) with simplemap.
Mapping sub_16bit.$auto$alumacc.cc:470:replace_alu$393.B_conv ($pos) with simplemap.
Mapping sub_16bit.$auto$alumacc.cc:470:replace_alu$393.lcu using $paramod\_90_lcu\WIDTH=16.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:212$714 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$716 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$719 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$722 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$725 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$728 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$731 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$734 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$737 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$740 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$743 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$746 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$749 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$752 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$755 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:221$758 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:222$721 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:222$724 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:222$727 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:222$730 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:222$733 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:222$736 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:222$739 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:222$745 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:222$748 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:222$751 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:222$757 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:229$761 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:229$764 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:229$767 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:229$770 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:229$773 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:229$776 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:229$779 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:229$782 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:229$785 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:229$788 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:229$791 ($and) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:212$715 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$717 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$720 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$723 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$726 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$729 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$732 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$735 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$738 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$741 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$744 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$747 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$750 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$753 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$756 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:221$759 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:229$762 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:229$765 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:229$768 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:229$771 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:229$774 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:229$777 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:229$780 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:229$783 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:229$786 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:229$789 ($or) with simplemap.
Mapping sub_16bit.$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$or$<techmap.v>:229$792 ($or) with simplemap.
Mapping signedLessThen_16bit.$auto$alumacc.cc:58:get_gt$389 ($or) with simplemap.
Mapping signedLessThen_16bit.$auto$alumacc.cc:58:get_gt$391 ($not) with simplemap.

3.18.8. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 1
Parameter \B_SIGNED = 1
Parameter \A_WIDTH = 16
Parameter \B_WIDTH = 16
Parameter \Y_WIDTH = 16
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16'.

3.18.9. Continuing TECHMAP pass.
Mapping signedLessThen_16bit.$auto$alumacc.cc:470:replace_alu$380 using $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16.
Mapping signedLessThen_16bit.$auto$alumacc.cc:64:get_eq$383 ($reduce_and) with simplemap.
Mapping signedLessThen_16bit.$auto$alumacc.cc:87:get_of$385 ($xor) with simplemap.
Mapping signedLessThen_16bit.$auto$alumacc.cc:52:get_lt$387 ($xor) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.$xor$<techmap.v>:263$1170 ($xor) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.$xor$<techmap.v>:262$1169 ($xor) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.$and$<techmap.v>:260$1168 ($and) with simplemap.
Mapping signedLessThen_16bit.$auto$alumacc.cc:470:replace_alu$380.lcu using $paramod\_90_lcu\WIDTH=16.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167 ($mux) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166 ($not) with simplemap.
Mapping signedLessThen_16bit.$auto$alumacc.cc:470:replace_alu$380.B_conv ($pos) with simplemap.
Mapping signedLessThen_16bit.$auto$alumacc.cc:470:replace_alu$380.A_conv ($pos) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:212$714 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$716 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$719 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$722 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$725 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$728 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$731 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$734 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$737 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$740 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$743 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$746 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$749 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$752 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$755 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:221$758 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$721 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$724 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$727 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$730 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$733 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$736 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$739 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$745 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$748 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$751 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$757 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:229$761 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:229$764 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:229$767 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:229$770 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:229$773 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:229$776 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:229$779 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:229$782 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:229$785 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:229$788 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:229$791 ($and) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:212$715 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$717 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$720 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$723 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$726 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$729 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$732 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$735 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$738 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$741 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$744 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$747 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$750 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$753 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$756 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:221$759 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:229$762 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:229$765 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:229$768 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:229$771 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:229$774 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:229$777 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:229$780 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:229$783 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:229$786 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:229$789 ($or) with simplemap.
Mapping signedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$or$<techmap.v>:229$792 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$auto$alumacc.cc:64:get_eq$369 ($reduce_and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$auto$alumacc.cc:87:get_of$371 ($xor) with simplemap.
Mapping signedGreaterOrEqual_16bit.$auto$alumacc.cc:52:get_lt$373 ($xor) with simplemap.
Mapping signedGreaterOrEqual_16bit.$auto$alumacc.cc:58:get_gt$375 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$auto$alumacc.cc:470:replace_alu$366 using $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.$xor$<techmap.v>:263$1170 ($xor) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.$xor$<techmap.v>:262$1169 ($xor) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.$and$<techmap.v>:260$1168 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$auto$alumacc.cc:470:replace_alu$366.lcu using $paramod\_90_lcu\WIDTH=16.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167 ($mux) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166 ($not) with simplemap.
Mapping signedGreaterOrEqual_16bit.$auto$alumacc.cc:470:replace_alu$366.B_conv ($pos) with simplemap.
Mapping signedGreaterOrEqual_16bit.$auto$alumacc.cc:470:replace_alu$366.A_conv ($pos) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:212$714 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$716 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$719 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$722 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$725 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$728 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$731 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$734 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$737 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$740 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$743 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$746 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$749 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$752 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$755 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:221$758 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$721 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$724 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$727 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$730 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$733 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$736 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$739 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$745 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$748 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$751 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$757 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:229$761 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:229$764 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:229$767 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:229$770 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:229$773 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:229$776 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:229$779 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:229$782 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:229$785 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:229$788 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:229$791 ($and) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:212$715 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$717 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$720 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$723 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$726 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$729 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$732 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$735 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$738 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$741 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$744 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$747 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$750 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$753 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$756 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:221$759 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:229$762 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:229$765 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:229$768 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:229$771 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:229$774 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:229$777 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:229$780 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:229$783 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:229$786 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:229$789 ($or) with simplemap.
Mapping signedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$or$<techmap.v>:229$792 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$auto$alumacc.cc:58:get_gt$421 ($not) with simplemap.
Mapping unsignedLessThen_16bit.$auto$alumacc.cc:58:get_gt$419 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$auto$alumacc.cc:78:get_cf$417 ($not) with simplemap.
Mapping unsignedLessThen_16bit.$auto$alumacc.cc:64:get_eq$415 ($reduce_and) with simplemap.
Mapping unsignedLessThen_16bit.$auto$alumacc.cc:470:replace_alu$412 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.$and$<techmap.v>:260$627 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625 ($not) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626 ($mux) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.$xor$<techmap.v>:262$628 ($xor) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.$xor$<techmap.v>:263$629 ($xor) with simplemap.
Mapping unsignedLessThen_16bit.$auto$alumacc.cc:470:replace_alu$412.A_conv ($pos) with simplemap.
Mapping unsignedLessThen_16bit.$auto$alumacc.cc:470:replace_alu$412.B_conv ($pos) with simplemap.
Mapping unsignedLessThen_16bit.$auto$alumacc.cc:470:replace_alu$412.lcu using $paramod\_90_lcu\WIDTH=16.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:212$714 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$716 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$719 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$722 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$725 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$728 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$731 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$734 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$737 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$740 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$743 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$746 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$749 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$752 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$755 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:221$758 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$721 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$724 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$727 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$730 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$733 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$736 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$739 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$745 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$748 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$751 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$757 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:229$761 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:229$764 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:229$767 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:229$770 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:229$773 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:229$776 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:229$779 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:229$782 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:229$785 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:229$788 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:229$791 ($and) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:212$715 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$717 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$720 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$723 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$726 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$729 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$732 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$735 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$738 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$741 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$744 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$747 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$750 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$753 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$756 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:221$759 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:229$762 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:229$765 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:229$768 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:229$771 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:229$774 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:229$777 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:229$780 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:229$783 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:229$786 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:229$789 ($or) with simplemap.
Mapping unsignedLessThen_16bit.$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$or$<techmap.v>:229$792 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$auto$alumacc.cc:470:replace_alu$400 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16.
Mapping unsignedGreaterOrEqual_16bit.$auto$alumacc.cc:58:get_gt$407 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$auto$alumacc.cc:78:get_cf$405 ($not) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$auto$alumacc.cc:64:get_eq$403 ($reduce_and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.$and$<techmap.v>:260$627 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625 ($not) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626 ($mux) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.$xor$<techmap.v>:262$628 ($xor) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.$xor$<techmap.v>:263$629 ($xor) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$auto$alumacc.cc:470:replace_alu$400.A_conv ($pos) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$auto$alumacc.cc:470:replace_alu$400.B_conv ($pos) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$auto$alumacc.cc:470:replace_alu$400.lcu using $paramod\_90_lcu\WIDTH=16.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:212$714 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$716 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$719 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$722 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$725 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$728 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$731 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$734 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$737 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$740 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$743 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$746 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$749 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$752 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$755 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:221$758 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$721 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$724 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$727 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$730 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$733 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$736 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$739 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$745 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$748 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$751 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$757 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:229$761 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:229$764 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:229$767 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:229$770 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:229$773 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:229$776 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:229$779 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:229$782 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:229$785 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:229$788 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:229$791 ($and) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:212$715 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$717 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$720 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$723 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$726 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$729 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$732 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$735 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$738 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$741 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$744 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$747 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$750 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$753 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$756 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:221$759 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:229$762 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:229$765 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:229$768 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:229$771 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:229$774 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:229$777 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:229$780 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:229$783 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:229$786 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:229$789 ($or) with simplemap.
Mapping unsignedGreaterOrEqual_16bit.$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$or$<techmap.v>:229$792 ($or) with simplemap.
Mapping mux4_16bit.$procmux$311_CMP0 ($eq) with simplemap.

3.18.10. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 16
Parameter \S_WIDTH = 15
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=16\S_WIDTH=15'.

3.18.11. Continuing TECHMAP pass.
Mapping mux4_16bit.$procmux$310 using $paramod\_90_pmux\WIDTH=16\S_WIDTH=15.
Mapping mux4_16bit.$procmux$312_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$313_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$314_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$315_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$316_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$317_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$318_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$319_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$320_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$321_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$322_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$323_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$324_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$procmux$325_CMP0 ($eq) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1888 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1887 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1886 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1885 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1884 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1883 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1882 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1881 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1880 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1879 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1878 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1877 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1876 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1875 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1874 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:441$1873 ($reduce_or) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1872 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1871 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1870 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1869 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1868 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1867 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1866 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1865 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1864 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1863 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1862 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1861 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1860 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1859 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$and$<techmap.v>:434$1858 ($and) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$ternary$<techmap.v>:445$1857 ($mux) with simplemap.
Mapping mux4_16bit.$techmap$procmux$310.$reduce_or$<techmap.v>:445$1856 ($reduce_or) with simplemap.
Mapping alu_16bit.$eq$./alu_16bit.v:68$15 ($logic_not) with simplemap.
Mapping immediate_operation.$ternary$./immediate_operation.v:8$16 ($mux) with simplemap.
Mapping immediate_operation.$ternary$./immediate_operation.v:9$17 ($mux) with simplemap.

3.18.12. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 16
Parameter \Y_WIDTH = 16
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16'.

3.18.13. Continuing TECHMAP pass.
Mapping program_counter.$auto$alumacc.cc:470:replace_alu$362 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16.
Mapping program_counter.$procmux$304_CMP0 ($eq) with simplemap.

3.18.14. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 16
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=16\S_WIDTH=3'.

3.18.15. Continuing TECHMAP pass.
Mapping program_counter.$procmux$303 using $paramod\_90_pmux\WIDTH=16\S_WIDTH=3.
Mapping program_counter.$procmux$305_CMP0 ($eq) with simplemap.
Mapping program_counter.$procmux$306_CMP0 ($logic_not) with simplemap.
Mapping program_counter.$procmux$308 ($mux) with simplemap.
Mapping program_counter.$procdff$341 ($dff) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:263$2701 ($xor) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700 ($xor) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699 ($and) with simplemap.
Mapping program_counter.$auto$alumacc.cc:470:replace_alu$362.lcu using $paramod\_90_lcu\WIDTH=16.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698 ($mux) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.$not$<techmap.v>:258$2697 ($not) with simplemap.
Mapping program_counter.$auto$alumacc.cc:470:replace_alu$362.B_conv ($pos) with simplemap.
Mapping program_counter.$auto$alumacc.cc:470:replace_alu$362.A_conv ($pos) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2732 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2731 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2730 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2729 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2728 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2727 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2726 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2725 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2724 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2723 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2722 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2721 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2720 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2719 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2718 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:441$2717 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$303.$and$<techmap.v>:434$2716 ($and) with simplemap.
Mapping program_counter.$techmap$procmux$303.$and$<techmap.v>:434$2715 ($and) with simplemap.
Mapping program_counter.$techmap$procmux$303.$and$<techmap.v>:434$2714 ($and) with simplemap.
Mapping program_counter.$techmap$procmux$303.$ternary$<techmap.v>:445$2713 ($mux) with simplemap.
Mapping program_counter.$techmap$procmux$303.$reduce_or$<techmap.v>:445$2712 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:212$714 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$716 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$719 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$722 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$725 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$728 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$731 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$734 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$737 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$740 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$743 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$746 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$749 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$752 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$755 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$758 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:222$721 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:222$724 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:222$727 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:222$730 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:222$733 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:222$736 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:222$739 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:222$745 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:222$748 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:222$751 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:222$757 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$761 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$764 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$767 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$770 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$773 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$776 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$779 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$782 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$785 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$788 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$791 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:212$715 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$717 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$720 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$723 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$726 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$729 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$732 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$735 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$738 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$741 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$744 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$747 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$750 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$753 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$756 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$759 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:229$762 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:229$765 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:229$768 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:229$771 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:229$774 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:229$777 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:229$780 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:229$783 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:229$786 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:229$789 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:229$792 ($or) with simplemap.
Mapping program_counter_preset.$ternary$./program_counter_preset.v:8$21 ($mux) with simplemap.
Mapping address_mux.$ternary$./address_mux.v:8$22 ($mux) with simplemap.
Mapping data_mux.$eq$./data_mux.v:17$24 ($eq) with simplemap.
Mapping data_mux.$procmux$294 ($mux) with simplemap.
Mapping data_mux.$procmux$300 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[1][2][1]$504 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[1][2][2]$507 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[1][2][0]$501 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[0][2][2]$486 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[1][2][3]$510 ($mux) with simplemap.
Mapping internal_register.$auto$memory_map.cc:65:addr_decode$513 ($not) with simplemap.
Mapping internal_register.$auto$memory_map.cc:65:addr_decode$515 ($not) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$519 ($and) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$521 ($and) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$529 ($and) with simplemap.
Mapping internal_register.$memory\internal_reg$wrmux[7][0][0]$579 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$wren[7][0][0]$577 ($and) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[0][0][0]$471 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg[7]$469 ($dff) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$575 ($and) with simplemap.
Mapping internal_register.$memory\internal_reg[3]$461 ($dff) with simplemap.
Mapping internal_register.$memory\internal_reg[6]$467 ($dff) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[0][2][1]$483 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[0][1][1]$477 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg[2]$459 ($dff) with simplemap.
Mapping internal_register.$memory\internal_reg[5]$465 ($dff) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[0][2][3]$489 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[1][1][0]$495 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[1][0][0]$492 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg[4]$463 ($dff) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[0][2][0]$480 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$wrmux[6][0][0]$573 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$wren[6][0][0]$571 ($and) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$569 ($and) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$567 ($and) with simplemap.
Mapping internal_register.$memory\internal_reg$wrmux[5][0][0]$565 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$wren[5][0][0]$563 ($and) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$561 ($and) with simplemap.
Mapping internal_register.$memory\internal_reg$wrmux[4][0][0]$559 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$wren[4][0][0]$557 ($and) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$555 ($and) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$553 ($and) with simplemap.
Mapping internal_register.$memory\internal_reg[1]$457 ($dff) with simplemap.
Mapping internal_register.$memory\internal_reg$wrmux[3][0][0]$549 ($mux) with simplemap.
Mapping internal_register.$procmux$252 ($and) with simplemap.
Mapping internal_register.$memory\internal_reg$wren[3][0][0]$547 ($and) with simplemap.
Mapping internal_register.$procmux$255 ($and) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$545 ($and) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[1][1][1]$498 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$wrmux[2][0][0]$543 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$wren[2][0][0]$541 ($and) with simplemap.
Mapping internal_register.$memory\internal_reg$rdmux[0][1][0]$474 ($mux) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$539 ($and) with simplemap.
Mapping internal_register.$auto$memory_map.cc:70:addr_decode$537 ($and) with simplemap.
Mapping internal_register.$procmux$277 ($mux) with simplemap.
Mapping internal_register.$procmux$279 ($mux) with simplemap.
Mapping internal_register.$procmux$282 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$wrmux[1][0][0]$533 ($mux) with simplemap.
Mapping internal_register.$procmux$286 ($mux) with simplemap.
Mapping internal_register.$procmux$288 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$wren[1][0][0]$531 ($and) with simplemap.
Mapping internal_register.$procmux$291 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$wrmux[0][0][0]$525 ($mux) with simplemap.
Mapping internal_register.$memory\internal_reg$wren[0][0][0]$523 ($and) with simplemap.
Mapping internal_register.$auto$memory_map.cc:65:addr_decode$517 ($not) with simplemap.
Mapping internal_register.$memory\internal_reg[0]$455 ($dff) with simplemap.
Mapping internal_register.$procdff$334 ($dff) with simplemap.
Mapping internal_register.$procdff$335 ($dff) with simplemap.
Mapping instruction_decoder.$procmux$177 ($mux) with simplemap.
Mapping instruction_decoder.$procmux$180 ($mux) with simplemap.
Mapping instruction_decoder.$procmux$183 ($mux) with simplemap.
Mapping instruction_decoder.$procmux$186 ($mux) with simplemap.
Mapping instruction_decoder.$procmux$189 ($mux) with simplemap.
Mapping instruction_decoder.$procmux$192 ($mux) with simplemap.
Mapping instruction_decoder.$procmux$195 ($mux) with simplemap.
Mapping instruction_decoder.$procmux$198 ($mux) with simplemap.
Mapping instruction_decoder.$procmux$201 ($mux) with simplemap.
Mapping instruction_decoder.$procmux$204 ($mux) with simplemap.
Mapping instruction_decoder.$procmux$207 ($mux) with simplemap.
Mapping instruction_decoder.$procmux$210 ($and) with simplemap.
Mapping instruction_decoder.$procdff$328 ($dff) with simplemap.
Mapping instruction_decoder.$procdff$329 ($dff) with simplemap.
Mapping instruction_decoder.$procdff$330 ($dff) with simplemap.
Mapping instruction_decoder.$procdff$331 ($dff) with simplemap.
Mapping instruction_decoder.$procdff$332 ($dff) with simplemap.
Mapping instruction_decoder.$procdff$333 ($dff) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:172:map_fsm$431 ($dff) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:121:implement_pattern_cache$449 ($and) with simplemap.
Mapping control_unit.$procmux$55_CMP0 ($eq) with simplemap.

3.18.16. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 3
Parameter \S_WIDTH = 5
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=3\S_WIDTH=5'.

3.18.17. Continuing TECHMAP pass.
Mapping control_unit.$procmux$54 using $paramod\_90_pmux\WIDTH=3\S_WIDTH=5.
Mapping control_unit.$procmux$56_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$57_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$58_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$59_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$60_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$61_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$62_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$63_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$64_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$65_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$66_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$67_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$68_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$69_CMP0 ($logic_not) with simplemap.
Mapping control_unit.$auto$opt_reduce.cc:126:opt_mux$352 ($reduce_or) with simplemap.
Mapping control_unit.$procmux$77 ($and) with simplemap.
Mapping control_unit.$auto$opt_reduce.cc:126:opt_mux$350 ($reduce_or) with simplemap.

3.18.18. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=2'.

3.18.19. Continuing TECHMAP pass.
Mapping control_unit.$procmux$85 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping control_unit.$auto$opt_reduce.cc:126:opt_mux$348 ($reduce_or) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:105:implement_pattern_cache$447 ($reduce_or) with simplemap.
Mapping control_unit.$procmux$100_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$101 ($and) with simplemap.
Mapping control_unit.$procmux$107_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$114_CMP0 ($eq) with simplemap.
Mapping control_unit.$auto$opt_reduce.cc:126:opt_mux$360 ($reduce_or) with simplemap.
Mapping control_unit.$procmux$115 ($and) with simplemap.
Mapping control_unit.$procmux$127_CMP0 ($logic_not) with simplemap.
Mapping control_unit.$procmux$128 ($and) with simplemap.
Mapping control_unit.$procmux$138 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping control_unit.$procmux$143_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$157 ($not) with simplemap.

3.18.20. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 2
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=2\S_WIDTH=3'.

3.18.21. Continuing TECHMAP pass.
Mapping control_unit.$procmux$159 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=3.
Mapping control_unit.$auto$fsm_map.cc:121:implement_pattern_cache$443 ($and) with simplemap.
Mapping control_unit.$auto$opt_reduce.cc:126:opt_mux$354 ($reduce_or) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:77:implement_pattern_cache$435 ($not) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:121:implement_pattern_cache$453 ($and) with simplemap.
Mapping control_unit.$auto$opt_reduce.cc:126:opt_mux$342 ($reduce_or) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:121:implement_pattern_cache$439 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$54.$reduce_or$<techmap.v>:441$3864 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$54.$reduce_or$<techmap.v>:441$3863 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$54.$reduce_or$<techmap.v>:441$3862 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$54.$and$<techmap.v>:434$3861 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$54.$and$<techmap.v>:434$3860 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$54.$and$<techmap.v>:434$3859 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$54.$and$<techmap.v>:434$3858 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$54.$and$<techmap.v>:434$3857 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$54.$ternary$<techmap.v>:445$3856 ($mux) with simplemap.
Mapping control_unit.$techmap$procmux$54.$reduce_or$<techmap.v>:445$3855 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$85.$reduce_or$<techmap.v>:441$4090 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$85.$and$<techmap.v>:434$4089 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$85.$and$<techmap.v>:434$4088 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$85.$ternary$<techmap.v>:445$4087 ($mux) with simplemap.
Mapping control_unit.$techmap$procmux$85.$reduce_or$<techmap.v>:445$4086 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$138.$reduce_or$<techmap.v>:441$4090 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$138.$and$<techmap.v>:434$4089 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$138.$and$<techmap.v>:434$4088 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$138.$ternary$<techmap.v>:445$4087 ($mux) with simplemap.
Mapping control_unit.$techmap$procmux$138.$reduce_or$<techmap.v>:445$4086 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$159.$reduce_or$<techmap.v>:441$4167 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$159.$reduce_or$<techmap.v>:441$4166 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$159.$and$<techmap.v>:434$4165 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$159.$and$<techmap.v>:434$4164 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$159.$and$<techmap.v>:434$4163 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$159.$ternary$<techmap.v>:445$4162 ($mux) with simplemap.
Mapping control_unit.$techmap$procmux$159.$reduce_or$<techmap.v>:445$4161 ($reduce_or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3843' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3840 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3845' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3840 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3869' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3865 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3870' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3865 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3882' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3880 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3884' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3880 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3885' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3880 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3898' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3895 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3899' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3895 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3900' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3895 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3927' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3925 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3943' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3940 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3957' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3955 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3958' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3955 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3973' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3970 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3974' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3970 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3987' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3985 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3988' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3985 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3989' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3985 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4005' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4000 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4017' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4015 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4018' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4015 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4020' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4015 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4032' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4030 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4035' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4030 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4047' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4045 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4049' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4045 [2] = \opcode [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4208' (1?) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3858_Y [0] = $procmux$56_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4211' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3857_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4193' (0?) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$4192 [0] = $procmux$56_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4202' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3860_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4205' (1?) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3859_Y [0] = $procmux$57_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4194' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$4192 [1] = $procmux$57_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4199' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3861_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4198' (?0) in module `\control_unit' with constant driver `$techmap$procmux$54.$reduce_or$<techmap.v>:441$3862_Y = $auto$simplemap.cc:127:simplemap_reduce$4195'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4209' (1?) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3858_Y [1] = $procmux$56_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4212' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3857_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4186' (0?) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$4185 [0] = $procmux$56_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4203' (1?) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3860_Y [1] = $procmux$58_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4206' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3859_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4187' (0?) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$4185 [1] = $procmux$58_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4200' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3861_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4191' (?0) in module `\control_unit' with constant driver `$techmap$procmux$54.$reduce_or$<techmap.v>:441$3863_Y = $auto$simplemap.cc:127:simplemap_reduce$4188'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4210' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3858_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4213' (1?) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3857_Y [2] = $procmux$55_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4179' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$4178 [0] = $procmux$55_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4204' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3860_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4207' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3859_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4180' (00) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$4178 [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4182' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$4181 = $procmux$55_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4201' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$3861_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4184' (?0) in module `\control_unit' with constant driver `$techmap$procmux$54.$reduce_or$<techmap.v>:441$3864_Y = $procmux$55_CMP'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4149' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4147 [0] = $techmap$procmux$54.$ternary$<techmap.v>:445$3856_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4150' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4147 [1] = $techmap$procmux$54.$ternary$<techmap.v>:445$3856_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4102' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4098 [2] = $techmap$procmux$54.$ternary$<techmap.v>:445$3856_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4101' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4098 [1] = $techmap$procmux$54.$ternary$<techmap.v>:445$3856_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4116' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4112 [2] = $techmap$procmux$54.$ternary$<techmap.v>:445$3856_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4114' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4112 [0] = $techmap$procmux$54.$ternary$<techmap.v>:445$3856_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4129' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$4125 [2] = $techmap$procmux$54.$ternary$<techmap.v>:445$3856_Y [2]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$4160' (double_invert) in module `\control_unit' with constant driver `$procmux$157_Y [1] = $auto$simplemap.cc:256:simplemap_eqne$4152'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4226' (1?) in module `\control_unit' with constant driver `$techmap$procmux$85.$and$<techmap.v>:434$4089_Y = \cState [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4249' (1?) in module `\control_unit' with constant driver `$techmap$procmux$159.$and$<techmap.v>:434$4164_Y [1] = \cState [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4247' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$159.$and$<techmap.v>:434$4165_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4241' (?0) in module `\control_unit' with constant driver `$techmap$procmux$159.$reduce_or$<techmap.v>:441$4167_Y = $auto$simplemap.cc:127:simplemap_reduce$4238'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4248' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$159.$and$<techmap.v>:434$4164_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4250' (1?) in module `\control_unit' with constant driver `$techmap$procmux$159.$and$<techmap.v>:434$4163_Y [0] = \cState [1]'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4243' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$4242 = \cState [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$4246' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$159.$and$<techmap.v>:434$4165_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4245' (?0) in module `\control_unit' with constant driver `$techmap$procmux$159.$reduce_or$<techmap.v>:441$4166_Y = \cState [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3091' (?0) in module `\data_mux' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3088 [1] = \op_code [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3092' (?0) in module `\data_mux' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3088 [2] = \op_code [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3093' (?0) in module `\data_mux' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3088 [3] = \op_code [3]'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3103' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3104' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3105' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3106' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3107' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3108' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3109' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3110' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3111' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3112' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3113' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3114' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3115' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3116' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3117' in module `data_mux'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3118' in module `data_mux'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1891' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1889 [0] = \sel [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1907' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1904 [1] = \sel [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1921' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1919 [0] = \sel [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1922' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1919 [1] = \sel [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1938' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1934 [2] = \sel [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1951' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1949 [0] = \sel [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1953' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1949 [2] = \sel [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1967' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1964 [1] = \sel [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1968' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1964 [2] = \sel [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1981' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1979 [0] = \sel [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1982' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1979 [1] = \sel [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1983' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1979 [2] = \sel [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1999' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1994 [3] = \sel [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2011' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2009 [0] = \sel [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2014' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2009 [3] = \sel [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2027' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2024 [1] = \sel [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2029' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2024 [3] = \sel [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2041' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2039 [0] = \sel [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2042' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2039 [1] = \sel [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2044' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2039 [3] = \sel [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2058' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2054 [2] = \sel [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2059' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2054 [3] = \sel [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2071' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2069 [0] = \sel [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2073' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2069 [2] = \sel [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2074' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2069 [3] = \sel [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2087' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2084 [1] = \sel [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2088' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2084 [2] = \sel [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2089' (?0) in module `\mux4_16bit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2084 [3] = \sel [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2704' (?0) in module `\program_counter' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2702 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2736' (?0) in module `\program_counter' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2733 [1] = \opcode [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2827' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [0] = \mPc [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2778' (?0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:263$2701_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2923' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2922' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2717_Y = $auto$simplemap.cc:127:simplemap_reduce$2919'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2828' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [1] = \mPc [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2796' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [1] = \mPc [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2811' (1?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [0] = \mPc [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2991' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:212$714_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3029' (?0) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [0] = \mPc [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2924' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2918' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2718_Y = $auto$simplemap.cc:127:simplemap_reduce$2915'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2829' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [2] = \mPc [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2797' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [2] = \mPc [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2812' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3030' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [1] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$716_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2925' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2914' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2719_Y = $auto$simplemap.cc:127:simplemap_reduce$2911'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2830' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [3] = \mPc [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2798' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [3] = \mPc [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2813' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3049' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [2] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$773_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2926' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2910' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2720_Y = $auto$simplemap.cc:127:simplemap_reduce$2907'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2831' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [4] = \mPc [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2799' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [4] = \mPc [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2814' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2993' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$719_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3031' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$720_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3038' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [3] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$740_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2927' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2906' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2721_Y = $auto$simplemap.cc:127:simplemap_reduce$2903'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2832' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [5] = \mPc [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2800' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [5] = \mPc [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2815' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3050' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [4] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$776_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2928' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [5] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2902' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2722_Y = $auto$simplemap.cc:127:simplemap_reduce$2899'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2833' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [6] = \mPc [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2801' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [6] = \mPc [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2816' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2994' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$722_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3032' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$723_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3046' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [5] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$764_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2929' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2898' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2723_Y = $auto$simplemap.cc:127:simplemap_reduce$2895'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2834' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [7] = \mPc [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2802' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [7] = \mPc [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2817' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3051' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [6] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$779_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2930' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [7] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2894' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2724_Y = $auto$simplemap.cc:127:simplemap_reduce$2891'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2835' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [8] = \mPc [8]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2803' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [8] = \mPc [8]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3001' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$743_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2818' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [7] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2995' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$725_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3033' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$726_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3039' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$744_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3042' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [7] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$752_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2931' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [8] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2890' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2725_Y = $auto$simplemap.cc:127:simplemap_reduce$2887'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2836' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [9] = \mPc [9]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2804' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [9] = \mPc [9]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2819' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [8] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3052' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [8] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$782_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2932' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [9] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2886' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2726_Y = $auto$simplemap.cc:127:simplemap_reduce$2883'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2837' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [10] = \mPc [10]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2805' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [10] = \mPc [10]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2820' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [9] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2996' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$728_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3034' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$729_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3047' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [9] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$767_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2933' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [10] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2882' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2727_Y = $auto$simplemap.cc:127:simplemap_reduce$2879'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2838' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [11] = \mPc [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2806' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [11] = \mPc [11]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2821' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [10] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3053' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [10] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$785_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2934' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [11] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2878' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2728_Y = $auto$simplemap.cc:127:simplemap_reduce$2875'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2839' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [12] = \mPc [12]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2807' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [12] = \mPc [12]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3002' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$746_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2822' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [11] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2997' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$731_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3035' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$732_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3040' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$747_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3045' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [11] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$761_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2935' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [12] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2874' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2729_Y = $auto$simplemap.cc:127:simplemap_reduce$2871'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2840' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [13] = \mPc [13]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2808' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [13] = \mPc [13]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2823' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [12] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3054' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [12] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$788_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2936' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [13] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2870' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2730_Y = $auto$simplemap.cc:127:simplemap_reduce$2867'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2841' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [14] = \mPc [14]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2809' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [14] = \mPc [14]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2824' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [13] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2998' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$734_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3036' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$735_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3048' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [13] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$770_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2937' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [14] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2866' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2731_Y = $auto$simplemap.cc:127:simplemap_reduce$2863'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2842' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$ternary$<techmap.v>:258$2698_Y [15] = \mPc [15]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2810' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:262$2700_Y [15] = \mPc [15]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2825' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [14] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3055' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [14] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:229$791_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2938' (const_and) in module `\program_counter' with constant driver `$techmap$procmux$303.$and$<techmap.v>:434$2716_Y [15] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2862' (?0) in module `\program_counter' with constant driver `$techmap$procmux$303.$reduce_or$<techmap.v>:441$2732_Y = $auto$simplemap.cc:127:simplemap_reduce$2859'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3005' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$755_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3003' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$749_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2826' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$and$<techmap.v>:260$2699_Y [15] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2999' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$737_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3037' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$738_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3041' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$750_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3043' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$or$<techmap.v>:221$756_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3044' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$364 [15] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$758_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2794' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$362.$xor$<techmap.v>:263$2701_Y [16] = $techmap$auto$alumacc.cc:470:replace_alu$362.lcu.$and$<techmap.v>:221$758_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1423' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [14] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [14]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1424' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [15] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [15]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1421' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [12] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [12]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1422' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [13] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [13]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1419' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [10] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [10]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1420' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [11] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [11]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1417' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [8] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [8]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1418' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [9] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [9]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1415' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1416' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1413' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1414' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1411' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1412' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1409' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1410' (??1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$ternary$<techmap.v>:258$1167_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$366.$not$<techmap.v>:258$1166_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1441' (?1) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:212$714_Y = $techmap$auto$alumacc.cc:470:replace_alu$366.$xor$<techmap.v>:262$1169_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1376' (0?) in module `\signedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$366.$xor$<techmap.v>:263$1170_Y [16] = $auto$alumacc.cc:484:replace_alu$368 [15]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1255' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [14] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [14]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1256' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [15] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [15]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1253' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [12] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [12]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1254' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [13] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [13]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1251' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [10] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [10]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1252' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [11] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [11]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1249' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [8] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [8]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1250' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [9] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [9]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1247' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1248' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1245' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1246' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1243' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1244' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1241' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1242' (??1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$ternary$<techmap.v>:258$1167_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$380.$not$<techmap.v>:258$1166_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1273' (?1) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:212$714_Y = $techmap$auto$alumacc.cc:470:replace_alu$380.$xor$<techmap.v>:262$1169_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1208' (0?) in module `\signedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$380.$xor$<techmap.v>:263$1170_Y [16] = $auto$alumacc.cc:484:replace_alu$382 [15]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1050' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1051' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1052' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1053' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1054' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1055' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1056' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1057' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1058' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [8] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [8]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1059' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [9] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [9]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1060' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [10] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [10]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1061' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [11] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [11]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1062' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [12] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [12]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1063' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [13] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [13]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1064' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [14] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [14]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1065' (??1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$ternary$<techmap.v>:258$626_Y [15] = $techmap$auto$alumacc.cc:470:replace_alu$393.$not$<techmap.v>:258$625_Y [15]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1099' (?1) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.lcu.$and$<techmap.v>:212$714_Y = $techmap$auto$alumacc.cc:470:replace_alu$393.$xor$<techmap.v>:262$628_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1098' (0?) in module `\sub_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$393.$xor$<techmap.v>:263$629_Y [16] = $auto$alumacc.cc:484:replace_alu$395 [15]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$794' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [0] = \op1 [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$795' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [1] = \op1 [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$796' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [2] = \op1 [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$797' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [3] = \op1 [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$798' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [4] = \op1 [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$799' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [5] = \op1 [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$800' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [6] = \op1 [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$801' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [7] = \op1 [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$802' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [8] = \op1 [8]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$803' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [9] = \op1 [9]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$804' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [10] = \op1 [10]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$805' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [11] = \op1 [11]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$806' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [12] = \op1 [12]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$807' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [13] = \op1 [13]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$808' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [14] = \op1 [14]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$809' (??0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$ternary$<techmap.v>:258$626_Y [15] = \op1 [15]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$646' (?0) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$xor$<techmap.v>:263$629_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$396.$xor$<techmap.v>:262$628_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$826' (const_and) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.lcu.$and$<techmap.v>:212$714_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$864' (?0) in module `\sum_16bit' with constant driver `$auto$alumacc.cc:484:replace_alu$398 [0] = $techmap$auto$alumacc.cc:470:replace_alu$396.$and$<techmap.v>:260$627_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$662' (0?) in module `\sum_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$396.$xor$<techmap.v>:263$629_Y [16] = $auto$alumacc.cc:484:replace_alu$398 [15]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1735' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [8] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [8]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1736' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [9] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [9]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1737' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [10] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [10]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1738' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [11] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [11]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1739' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [12] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [12]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1740' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [13] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [13]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1741' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [14] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [14]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1742' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [15] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [15]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1731' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1732' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1733' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1734' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1729' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1730' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1728' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1727' (??1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$ternary$<techmap.v>:258$626_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$400.$not$<techmap.v>:258$625_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1776' (?1) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:212$714_Y = $techmap$auto$alumacc.cc:470:replace_alu$400.$xor$<techmap.v>:262$628_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1775' (0?) in module `\unsignedGreaterOrEqual_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$400.$xor$<techmap.v>:263$629_Y [16] = $auto$alumacc.cc:484:replace_alu$402 [15]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1568' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [8] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [8]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1569' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [9] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [9]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1570' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [10] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [10]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1571' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [11] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [11]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1572' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [12] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [12]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1573' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [13] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [13]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1574' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [14] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [14]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1575' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [15] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [15]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1564' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1565' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1566' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1567' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1562' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1563' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1561' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1560' (??1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$ternary$<techmap.v>:258$626_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$412.$not$<techmap.v>:258$625_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1609' (?1) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:212$714_Y = $techmap$auto$alumacc.cc:470:replace_alu$412.$xor$<techmap.v>:262$628_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1608' (0?) in module `\unsignedLessThen_16bit' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$412.$xor$<techmap.v>:263$629_Y [16] = $auto$alumacc.cc:484:replace_alu$414 [15]'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$4033' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4048'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$4030 [1] = $auto$simplemap.cc:250:simplemap_eqne$4045 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4033' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$4024' is identical to cell `$auto$simplemap.cc:177:logic_reduce$4061'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$4023 [0] = $auto$simplemap.cc:168:logic_reduce$4060 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4024' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$4019' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4034'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$4015 [2] = $auto$simplemap.cc:250:simplemap_eqne$4030 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4019' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$4004' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4034'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$4000 [2] = $auto$simplemap.cc:250:simplemap_eqne$4030 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4004' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$4003' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4048'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$4000 [1] = $auto$simplemap.cc:250:simplemap_eqne$4045 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4003' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3994' is identical to cell `$auto$simplemap.cc:177:logic_reduce$4061'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3993 [0] = $auto$simplemap.cc:168:logic_reduce$4060 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3994' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$4155' is identical to cell `$auto$simplemap.cc:177:logic_reduce$4142'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$4154 = $auto$simplemap.cc:168:logic_reduce$4141
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4155' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3990' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4050'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3985 [3] = $auto$simplemap.cc:250:simplemap_eqne$4045 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3990' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$4100' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4127'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$4098 [0] = $auto$simplemap.cc:250:simplemap_eqne$4125 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4100' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3972' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4002'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3970 [0] = $auto$simplemap.cc:250:simplemap_eqne$4000 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3972' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3975' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4050'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3970 [3] = $auto$simplemap.cc:250:simplemap_eqne$4045 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3975' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3964' is identical to cell `$auto$simplemap.cc:177:logic_reduce$4061'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3963 [0] = $auto$simplemap.cc:168:logic_reduce$4060 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3964' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3959' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4034'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3955 [2] = $auto$simplemap.cc:250:simplemap_eqne$4030 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3959' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3960' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4050'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3955 [3] = $auto$simplemap.cc:250:simplemap_eqne$4045 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3960' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3944' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4034'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3940 [2] = $auto$simplemap.cc:250:simplemap_eqne$4030 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3944' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3942' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4002'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3940 [0] = $auto$simplemap.cc:250:simplemap_eqne$4000 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3942' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3945' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4050'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3940 [3] = $auto$simplemap.cc:250:simplemap_eqne$4045 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3945' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3929' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4034'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3925 [2] = $auto$simplemap.cc:250:simplemap_eqne$4030 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3929' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3928' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4048'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3925 [1] = $auto$simplemap.cc:250:simplemap_eqne$4045 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3928' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3930' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4050'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3925 [3] = $auto$simplemap.cc:250:simplemap_eqne$4045 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3930' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3914' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4034'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3910 [2] = $auto$simplemap.cc:250:simplemap_eqne$4030 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3914' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3913' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4048'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3910 [1] = $auto$simplemap.cc:250:simplemap_eqne$4045 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3913' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3912' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4002'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3910 [0] = $auto$simplemap.cc:250:simplemap_eqne$4000 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3912' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3915' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4050'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3910 [3] = $auto$simplemap.cc:250:simplemap_eqne$4045 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3915' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3905' is identical to cell `$auto$simplemap.cc:177:logic_reduce$4062'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3903 [1] = $auto$simplemap.cc:168:logic_reduce$4060 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3905' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3897' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4002'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3895 [0] = $auto$simplemap.cc:250:simplemap_eqne$4000 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3897' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3890' is identical to cell `$auto$simplemap.cc:177:logic_reduce$4062'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3888 [1] = $auto$simplemap.cc:168:logic_reduce$4060 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3890' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3883' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4048'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3880 [1] = $auto$simplemap.cc:250:simplemap_eqne$4045 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3883' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3875' is identical to cell `$auto$simplemap.cc:177:logic_reduce$4062'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3873 [1] = $auto$simplemap.cc:168:logic_reduce$4060 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3875' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$4092' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$4174'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$4091 [0] = $auto$simplemap.cc:127:simplemap_reduce$4173
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4092' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3868' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4048'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3865 [1] = $auto$simplemap.cc:250:simplemap_eqne$4045 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3868' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3867' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4002'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3865 [0] = $auto$simplemap.cc:250:simplemap_eqne$4000 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3867' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$4093' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$4068'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$4091 [1] = $auto$simplemap.cc:127:simplemap_reduce$4066 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4093' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$4128' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4115'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$4125 [1] = $auto$simplemap.cc:250:simplemap_eqne$4112 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$4128' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3844' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4034'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3840 [2] = $auto$simplemap.cc:250:simplemap_eqne$4030 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3844' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3842' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$4002'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$3840 [0] = $auto$simplemap.cc:250:simplemap_eqne$4000 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3842' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$4170' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$4068'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$345 = $auto$simplemap.cc:127:simplemap_reduce$4066 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4170' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$4237' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$4139'.
    Redirecting output \Y: $techmap$procmux$138.$reduce_or$<techmap.v>:445$4086_Y = $auto$opt_reduce.cc:132:opt_mux$357
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4237' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3980' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$3995'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3978 [1] = $auto$simplemap.cc:127:simplemap_reduce$3993 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3980' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3950' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$3965'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3948 [1] = $auto$simplemap.cc:127:simplemap_reduce$3963 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3950' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3949' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$3979'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3948 [0] = $auto$simplemap.cc:127:simplemap_reduce$3978 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3949' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$4055' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$3995'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$4053 [1] = $auto$simplemap.cc:127:simplemap_reduce$3993 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4055' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3935' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$3965'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3933 [1] = $auto$simplemap.cc:127:simplemap_reduce$3963 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3935' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3934' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$4054'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3933 [0] = $auto$simplemap.cc:127:simplemap_reduce$4053 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3934' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3920' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$3965'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3918 [1] = $auto$simplemap.cc:127:simplemap_reduce$3963 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3920' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$4039' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$4054'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$4038 [0] = $auto$simplemap.cc:127:simplemap_reduce$4053 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4039' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3904' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$3979'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3903 [0] = $auto$simplemap.cc:127:simplemap_reduce$3978 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3904' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3889' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$4054'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3888 [0] = $auto$simplemap.cc:127:simplemap_reduce$4053 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3889' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3874' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$3919'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3873 [0] = $auto$simplemap.cc:127:simplemap_reduce$3918 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3874' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$4025' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$4040'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$4023 [1] = $auto$simplemap.cc:127:simplemap_reduce$4038 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4025' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3850' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$4040'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3848 [1] = $auto$simplemap.cc:127:simplemap_reduce$4038 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3850' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$3849' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$3979'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$3848 [0] = $auto$simplemap.cc:127:simplemap_reduce$3978 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$3849' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$4010' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$4040'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$4008 [1] = $auto$simplemap.cc:127:simplemap_reduce$4038 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4010' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$4009' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$3919'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$4008 [0] = $auto$simplemap.cc:127:simplemap_reduce$3918 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$4009' from module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2079' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2094'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2077 [1] = $auto$simplemap.cc:127:simplemap_reduce$2092 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2079' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2064' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2094'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2062 [1] = $auto$simplemap.cc:127:simplemap_reduce$2092 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2064' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2057' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2072'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$2054 [1] = $auto$simplemap.cc:250:simplemap_eqne$2069 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2057' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2056' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2086'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$2054 [0] = $auto$simplemap.cc:250:simplemap_eqne$2084 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2056' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2028' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2043'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$2024 [2] = $auto$simplemap.cc:250:simplemap_eqne$2039 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2028' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2026' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2086'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$2024 [0] = $auto$simplemap.cc:250:simplemap_eqne$2084 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2026' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2013' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2043'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$2009 [2] = $auto$simplemap.cc:250:simplemap_eqne$2039 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2013' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2012' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2072'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$2009 [1] = $auto$simplemap.cc:250:simplemap_eqne$2069 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2012' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1998' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2043'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1994 [2] = $auto$simplemap.cc:250:simplemap_eqne$2039 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1998' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1997' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2072'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1994 [1] = $auto$simplemap.cc:250:simplemap_eqne$2069 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1997' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1996' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2086'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1994 [0] = $auto$simplemap.cc:250:simplemap_eqne$2084 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1996' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1988' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2048'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1987 [0] = $auto$simplemap.cc:127:simplemap_reduce$2047 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1988' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1966' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2086'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1964 [0] = $auto$simplemap.cc:250:simplemap_eqne$2084 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1966' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1969' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1984'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1964 [3] = $auto$simplemap.cc:250:simplemap_eqne$1979 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1969' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1952' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2072'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1949 [1] = $auto$simplemap.cc:250:simplemap_eqne$2069 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1952' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1954' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1984'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1949 [3] = $auto$simplemap.cc:250:simplemap_eqne$1979 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1954' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1937' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2072'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1934 [1] = $auto$simplemap.cc:250:simplemap_eqne$2069 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1937' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1936' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2086'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1934 [0] = $auto$simplemap.cc:250:simplemap_eqne$2084 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1936' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1939' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1984'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1934 [3] = $auto$simplemap.cc:250:simplemap_eqne$1979 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1939' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1928' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2048'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1927 [0] = $auto$simplemap.cc:127:simplemap_reduce$2047 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1928' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1923' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2043'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1919 [2] = $auto$simplemap.cc:250:simplemap_eqne$2039 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1923' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1924' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1984'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1919 [3] = $auto$simplemap.cc:250:simplemap_eqne$1979 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1924' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1908' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2043'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1904 [2] = $auto$simplemap.cc:250:simplemap_eqne$2039 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1908' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1906' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2086'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1904 [0] = $auto$simplemap.cc:250:simplemap_eqne$2084 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1906' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1909' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1984'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1904 [3] = $auto$simplemap.cc:250:simplemap_eqne$1979 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1909' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1893' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2043'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1889 [2] = $auto$simplemap.cc:250:simplemap_eqne$2039 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1893' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1892' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2072'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1889 [1] = $auto$simplemap.cc:250:simplemap_eqne$2069 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1892' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1894' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1984'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1889 [3] = $auto$simplemap.cc:250:simplemap_eqne$1979 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1894' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1845' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2043'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1841 [2] = $auto$simplemap.cc:250:simplemap_eqne$2039 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1845' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1844' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2072'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1841 [1] = $auto$simplemap.cc:250:simplemap_eqne$2069 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1844' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1843' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2086'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1841 [0] = $auto$simplemap.cc:250:simplemap_eqne$2084 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1843' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1846' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1984'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1841 [3] = $auto$simplemap.cc:250:simplemap_eqne$1979 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1846' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2034' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2049'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2032 [1] = $auto$simplemap.cc:127:simplemap_reduce$2047 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2034' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2033' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2093'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2032 [0] = $auto$simplemap.cc:127:simplemap_reduce$2092 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2033' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2019' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2049'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2017 [1] = $auto$simplemap.cc:127:simplemap_reduce$2047 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2019' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2018' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2078'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2017 [0] = $auto$simplemap.cc:127:simplemap_reduce$2077 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2018' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2004' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2049'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2002 [1] = $auto$simplemap.cc:127:simplemap_reduce$2047 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2004' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2003' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2063'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2002 [0] = $auto$simplemap.cc:127:simplemap_reduce$2062 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2003' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1974' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1989'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1972 [1] = $auto$simplemap.cc:127:simplemap_reduce$1987 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1974' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1973' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2093'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1972 [0] = $auto$simplemap.cc:127:simplemap_reduce$2092 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1973' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1959' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1989'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1957 [1] = $auto$simplemap.cc:127:simplemap_reduce$1987 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1959' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1958' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2078'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1957 [0] = $auto$simplemap.cc:127:simplemap_reduce$2077 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1958' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1944' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1989'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1942 [1] = $auto$simplemap.cc:127:simplemap_reduce$1987 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1944' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1943' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2063'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1942 [0] = $auto$simplemap.cc:127:simplemap_reduce$2062 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1943' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1914' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1929'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1912 [1] = $auto$simplemap.cc:127:simplemap_reduce$1927 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1914' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1913' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2093'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1912 [0] = $auto$simplemap.cc:127:simplemap_reduce$2092 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1913' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1899' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1929'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1897 [1] = $auto$simplemap.cc:127:simplemap_reduce$1927 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1899' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1898' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2078'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1897 [0] = $auto$simplemap.cc:127:simplemap_reduce$2077 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1898' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1851' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1929'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1849 [1] = $auto$simplemap.cc:127:simplemap_reduce$1927 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1851' from module `\mux4_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1850' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2063'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1849 [0] = $auto$simplemap.cc:127:simplemap_reduce$2062 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1850' from module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1345' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1457'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1338 [6] = $techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$721_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1345' from module `\signedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1344' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1458'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1338 [5] = $techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$724_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1344' from module `\signedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1343' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1459'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1338 [4] = $techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$727_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1343' from module `\signedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1342' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1460'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1338 [3] = $techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$730_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1342' from module `\signedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1341' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1461'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1338 [2] = $techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$733_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1341' from module `\signedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1340' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1462'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1338 [1] = $techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$736_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1340' from module `\signedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1339' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1463'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1338 [0] = $techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$739_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1339' from module `\signedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1350' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1464'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1347 [2] = $techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$745_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1350' from module `\signedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1349' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1465'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1347 [1] = $techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$748_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1349' from module `\signedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1348' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1466'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1347 [0] = $techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$751_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1348' from module `\signedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1353' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1467'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1352 [0] = $techmap$auto$alumacc.cc:470:replace_alu$366.lcu.$and$<techmap.v>:222$757_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1353' from module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1178' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1289'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1171 [6] = $techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$721_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1178' from module `\signedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1177' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1290'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1171 [5] = $techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$724_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1177' from module `\signedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1176' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1291'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1171 [4] = $techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$727_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1176' from module `\signedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1175' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1292'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1171 [3] = $techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$730_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1175' from module `\signedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1174' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1293'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1171 [2] = $techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$733_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1174' from module `\signedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1173' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1294'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1171 [1] = $techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$736_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1173' from module `\signedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1172' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1295'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1171 [0] = $techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$739_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1172' from module `\signedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1183' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1296'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1180 [2] = $techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$745_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1183' from module `\signedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1182' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1297'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1180 [1] = $techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$748_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1182' from module `\signedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1181' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1298'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1180 [0] = $techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$751_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1181' from module `\signedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1186' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1299'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1185 [0] = $techmap$auto$alumacc.cc:470:replace_alu$380.lcu.$and$<techmap.v>:222$757_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1186' from module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1683' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1792'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1676 [6] = $techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$721_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1683' from module `\unsignedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1682' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1793'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1676 [5] = $techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$724_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1682' from module `\unsignedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1681' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1794'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1676 [4] = $techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$727_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1681' from module `\unsignedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1680' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1795'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1676 [3] = $techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$730_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1680' from module `\unsignedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1679' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1796'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1676 [2] = $techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$733_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1679' from module `\unsignedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1678' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1797'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1676 [1] = $techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$736_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1678' from module `\unsignedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1677' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1798'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1676 [0] = $techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$739_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1677' from module `\unsignedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1688' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1799'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1685 [2] = $techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$745_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1688' from module `\unsignedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1687' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1800'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1685 [1] = $techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$748_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1687' from module `\unsignedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1686' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1801'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1685 [0] = $techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$751_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1686' from module `\unsignedGreaterOrEqual_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1691' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1802'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1690 [0] = $techmap$auto$alumacc.cc:470:replace_alu$400.lcu.$and$<techmap.v>:222$757_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1691' from module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1516' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1625'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1509 [6] = $techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$721_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1516' from module `\unsignedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1515' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1626'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1509 [5] = $techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$724_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1515' from module `\unsignedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1514' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1627'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1509 [4] = $techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$727_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1514' from module `\unsignedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1513' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1628'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1509 [3] = $techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$730_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1513' from module `\unsignedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1512' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1629'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1509 [2] = $techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$733_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1512' from module `\unsignedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1511' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1630'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1509 [1] = $techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$736_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1511' from module `\unsignedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1510' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1631'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1509 [0] = $techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$739_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1510' from module `\unsignedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1521' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1632'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1518 [2] = $techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$745_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1521' from module `\unsignedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1520' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1633'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1518 [1] = $techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$748_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1520' from module `\unsignedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1519' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1634'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1518 [0] = $techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$751_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1519' from module `\unsignedLessThen_16bit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1524' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1635'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1523 [0] = $techmap$auto$alumacc.cc:470:replace_alu$412.lcu.$and$<techmap.v>:222$757_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$1524' from module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 148 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:206:simplemap_lognot$3102'.
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2843'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2844'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2845'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2846'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2847'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2848'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2849'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2850'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2851'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2852'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2853'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2854'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2855'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2856'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2857'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2858'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$3006'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$3013'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$3016'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$3017'.
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1360'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1361'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1362'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1363'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1364'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1365'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1366'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1367'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1368'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1369'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1370'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1371'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1372'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1373'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1374'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1469'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1470'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1472'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1473'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1474'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1475'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1476'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1477'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1496'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1497'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1499'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1500'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1501'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1502'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1503'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1504'.
Finding unused cells or wires in module \signedLessThen_16bit..
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1192'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1193'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1194'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1195'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1196'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1197'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1198'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1199'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1200'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1201'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1202'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1203'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1204'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1205'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1206'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1301'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1302'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1304'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1305'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1306'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1307'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1308'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1309'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1328'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1329'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1331'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1332'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1333'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1334'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1335'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1336'.
Finding unused cells or wires in module \sub_16bit..
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1033'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1107'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1111'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1113'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1114'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1121'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1124'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1125'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1145'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1149'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1151'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1152'.
Finding unused cells or wires in module \sum_16bit..
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$678'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$810'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$811'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$812'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$813'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$814'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$815'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$816'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$817'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$818'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$819'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$820'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$821'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$822'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$823'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$824'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$825'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$834'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$838'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$840'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$841'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$848'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$851'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$852'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$872'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$876'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$878'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$879'.
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1759'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1760'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1761'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1762'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1763'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1764'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1765'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1766'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1767'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1768'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1769'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1770'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1771'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1772'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1773'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1774'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1803'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1804'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1805'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1806'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1807'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1808'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1809'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1810'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1811'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1812'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1813'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1830'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1831'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1832'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1833'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1834'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1835'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1836'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1837'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1838'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1839'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1840'.
Finding unused cells or wires in module \unsignedLessThen_16bit..
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1592'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1593'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1594'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1595'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1596'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1597'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1598'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1599'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1600'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1601'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1602'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1603'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1604'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1605'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1606'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1607'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1636'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1637'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1638'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1639'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1640'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1641'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1642'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1643'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1644'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1645'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1646'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1663'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1664'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1665'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1666'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1667'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1668'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1669'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1670'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1671'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1672'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1673'.
Finding unused cells or wires in module \xor_16bit..

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\address_mux' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 49 wires to a netlist network with 33 inputs and 16 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       16
Removing temp directory.

3.20.2. Extracting gate netlist of module `\alu_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 32 wires to a netlist network with 16 inputs and 1 outputs.

3.20.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        7
ABC RESULTS:               NOR cells:        8
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        1
Removing temp directory.

3.20.3. Extracting gate netlist of module `\and_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

3.20.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.20.4. Extracting gate netlist of module `\control_unit' to `<abc-temp-dir>/input.blif'..
Extracted 109 gates and 121 wires to a netlist network with 10 inputs and 13 outputs.

3.20.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       27
ABC RESULTS:              AOI3 cells:        6
ABC RESULTS:              AOI4 cells:        3
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        9
ABC RESULTS:               NOT cells:        7
ABC RESULTS:              OAI3 cells:        6
ABC RESULTS:                OR cells:       10
ABC RESULTS:        internal signals:       98
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       13
Removing temp directory.

3.20.5. Extracting gate netlist of module `\data_mux' to `<abc-temp-dir>/input.blif'..
Extracted 36 gates and 90 wires to a netlist network with 53 inputs and 16 outputs.

3.20.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:               MUX cells:       32
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:       21
ABC RESULTS:           input signals:       53
ABC RESULTS:          output signals:       16
Removing temp directory.

3.20.6. Extracting gate netlist of module `\immediate_operation' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 26 wires to a netlist network with 9 inputs and 16 outputs.

3.20.6.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:       16
Removing temp directory.

3.20.7. Extracting gate netlist of module `\instruction_decoder' to `<abc-temp-dir>/input.blif'..
Extracted 44 gates and 85 wires to a netlist network with 40 inputs and 22 outputs.

3.20.7.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       22
ABC RESULTS:               MUX cells:       22
ABC RESULTS:        internal signals:       23
ABC RESULTS:           input signals:       40
ABC RESULTS:          output signals:       22
Removing temp directory.

3.20.8. Extracting gate netlist of module `\internal_register' to `<abc-temp-dir>/input.blif'..
Extracted 473 gates and 662 wires to a netlist network with 188 inputs and 160 outputs.

3.20.8.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.8.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       33
ABC RESULTS:               MUX cells:      416
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOT cells:        7
ABC RESULTS:                OR cells:       18
ABC RESULTS:        internal signals:      314
ABC RESULTS:           input signals:      188
ABC RESULTS:          output signals:      160
Removing temp directory.

3.20.9. Extracting gate netlist of module `\isEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 64 wires to a netlist network with 32 inputs and 1 outputs.

3.20.9.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.9.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       15
ABC RESULTS:              XNOR cells:       16
ABC RESULTS:        internal signals:       31
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.20.10. Extracting gate netlist of module `\isNotEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 63 wires to a netlist network with 32 inputs and 1 outputs.

3.20.10.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.10.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:       15
ABC RESULTS:               XOR cells:       16
ABC RESULTS:        internal signals:       30
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.20.11. Extracting gate netlist of module `\mux4_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 536 gates and 797 wires to a netlist network with 260 inputs and 16 outputs.

3.20.11.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.11.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       10
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:              AOI4 cells:       16
ABC RESULTS:               MUX cells:       16
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:      211
ABC RESULTS:              OAI3 cells:       16
ABC RESULTS:              OAI4 cells:       96
ABC RESULTS:                OR cells:      113
ABC RESULTS:        internal signals:      521
ABC RESULTS:           input signals:      260
ABC RESULTS:          output signals:       16
Removing temp directory.

3.20.12. Extracting gate netlist of module `\or_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

3.20.12.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.12.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.20.13. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 128 gates and 165 wires to a netlist network with 35 inputs and 16 outputs.

3.20.13.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.13.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       32
ABC RESULTS:               MUX cells:       16
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               NOT cells:       17
ABC RESULTS:              OAI4 cells:       16
ABC RESULTS:                OR cells:        1
ABC RESULTS:              XNOR cells:        8
ABC RESULTS:               XOR cells:        7
ABC RESULTS:        internal signals:      114
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       16
Removing temp directory.

3.20.14. Extracting gate netlist of module `\program_counter_preset' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 49 wires to a netlist network with 33 inputs and 16 outputs.

3.20.14.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.14.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       16
Removing temp directory.

3.20.15. Extracting gate netlist of module `\signedGreaterOrEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 104 gates and 136 wires to a netlist network with 32 inputs and 1 outputs.

3.20.15.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.15.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       12
ABC RESULTS:              AOI3 cells:        9
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:              NAND cells:       13
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:       18
ABC RESULTS:              OAI3 cells:       10
ABC RESULTS:              XNOR cells:       11
ABC RESULTS:               XOR cells:        7
ABC RESULTS:        internal signals:      103
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.20.16. Extracting gate netlist of module `\signedLessThen_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 105 gates and 137 wires to a netlist network with 32 inputs and 1 outputs.

3.20.16.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       15
ABC RESULTS:              AOI3 cells:       10
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:       22
ABC RESULTS:              OAI3 cells:        9
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:       10
ABC RESULTS:              XNOR cells:        9
ABC RESULTS:               XOR cells:        8
ABC RESULTS:        internal signals:      104
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.20.17. Extracting gate netlist of module `\sub_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 116 gates and 149 wires to a netlist network with 32 inputs and 16 outputs.

3.20.17.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.17.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       11
ABC RESULTS:              AOI3 cells:       11
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:       21
ABC RESULTS:              OAI3 cells:       11
ABC RESULTS:                OR cells:        4
ABC RESULTS:              XNOR cells:       11
ABC RESULTS:               XOR cells:       22
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.20.18. Extracting gate netlist of module `\sum_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 130 wires to a netlist network with 32 inputs and 16 outputs.

3.20.18.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.18.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       10
ABC RESULTS:              AOI3 cells:       11
ABC RESULTS:              NAND cells:       11
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        6
ABC RESULTS:              OAI3 cells:       11
ABC RESULTS:                OR cells:        4
ABC RESULTS:              XNOR cells:       12
ABC RESULTS:               XOR cells:       21
ABC RESULTS:        internal signals:       82
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.20.19. Extracting gate netlist of module `\uProcessor' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.20.20. Extracting gate netlist of module `\unsignedGreaterOrEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 96 gates and 128 wires to a netlist network with 32 inputs and 1 outputs.

3.20.20.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.20.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:              AOI3 cells:        5
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               NOR cells:        7
ABC RESULTS:               NOT cells:       16
ABC RESULTS:              OAI3 cells:       10
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:       17
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:       95
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.20.21. Extracting gate netlist of module `\unsignedLessThen_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 97 gates and 129 wires to a netlist network with 32 inputs and 1 outputs.

3.20.21.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.21.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       17
ABC RESULTS:              AOI3 cells:       10
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:              NAND cells:        7
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               NOT cells:       16
ABC RESULTS:              OAI3 cells:        5
ABC RESULTS:                OR cells:        1
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:               XOR cells:        2
ABC RESULTS:        internal signals:       96
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.20.22. Extracting gate netlist of module `\xor_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

3.20.22.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.22.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4901' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4663' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4660' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4664' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4666' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4743' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4740' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4744' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4904' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4824' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4905' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4821' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4825' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4746' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4827' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4600' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4603' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4604' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4606' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4610' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4613' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4614' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4616' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4620' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4623' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4624' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4626' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4630' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4633' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4634' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4636' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4640' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4643' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4644' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4646' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4650' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4653' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4654' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4656' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4670' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4673' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4674' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4676' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4680' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4683' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4684' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4686' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4690' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4693' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4694' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4696' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4700' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4703' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4704' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4706' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4710' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4713' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4714' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4716' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4720' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4723' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4724' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4726' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4730' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4733' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4734' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4736' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4750' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4753' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4754' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4756' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4781' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4784' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4785' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4787' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4791' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4794' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4795' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4797' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4801' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4804' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4805' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4807' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4811' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4814' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4815' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4817' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4831' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4834' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4835' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4837' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4841' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4844' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4845' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4847' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4851' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4854' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4855' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4857' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4861' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4864' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4865' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4867' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4871' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4874' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4875' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4877' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4881' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4884' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4885' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4887' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4891' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4894' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4895' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4897' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4907' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4911' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4914' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4915' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4917' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4921' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4924' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4925' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4927' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4931' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4934' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4935' in module `internal_register'.
Optimizing away select inverter for $_MUX_ cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4937' in module `internal_register'.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
  removing unused non-port wire \opcode_type.
  removed 1 unused temporary wires.
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
  removing unused `$_NOT_' cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4595'.
  removing unused `$_NOT_' cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4596'.
  removing unused `$_NOT_' cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4597'.
  removing unused `$_NOT_' cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4777'.
  removing unused `$_NOT_' cell `$abc$4479$auto$blifparse.cc:286:parse_blif$4778'.
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \uProcessor
Used module:     \address_mux
Used module:     \alu_16bit
Used module:         \sum_16bit
Used module:         \xor_16bit
Used module:         \or_16bit
Used module:         \and_16bit
Used module:         \isEqual_16bit
Used module:         \isNotEqual_16bit
Used module:         \sub_16bit
Used module:         \signedLessThen_16bit
Used module:         \signedGreaterOrEqual_16bit
Used module:         \unsignedLessThen_16bit
Used module:         \unsignedGreaterOrEqual_16bit
Used module:         \mux4_16bit
Used module:     \control_unit
Used module:     \data_mux
Used module:     \immediate_operation
Used module:     \instruction_decoder
Used module:     \internal_register
Used module:     \program_counter
Used module:     \program_counter_preset

3.22.2. Analyzing design hierarchy..
Top module:  \uProcessor
Used module:     \address_mux
Used module:     \alu_16bit
Used module:         \sum_16bit
Used module:         \xor_16bit
Used module:         \or_16bit
Used module:         \and_16bit
Used module:         \isEqual_16bit
Used module:         \isNotEqual_16bit
Used module:         \sub_16bit
Used module:         \signedLessThen_16bit
Used module:         \signedGreaterOrEqual_16bit
Used module:         \unsignedLessThen_16bit
Used module:         \unsignedGreaterOrEqual_16bit
Used module:         \mux4_16bit
Used module:     \control_unit
Used module:     \data_mux
Used module:     \immediate_operation
Used module:     \instruction_decoder
Used module:     \internal_register
Used module:     \program_counter
Used module:     \program_counter_preset
Removed 0 unused modules.

3.23. Printing statistics.

=== address_mux ===

   Number of wires:                  4
   Number of wire bits:             49
   Number of public wires:           4
   Number of public wire bits:      49
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_MUX_                         16

=== alu_16bit ===

   Number of wires:                 30
   Number of wire bits:            243
   Number of public wires:          16
   Number of public wire bits:     229
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $_AND_                          7
     $_NOR_                          8
     and_16bit                       1
     isEqual_16bit                   1
     isNotEqual_16bit                1
     mux4_16bit                      1
     or_16bit                        1
     signedGreaterOrEqual_16bit      1
     signedLessThen_16bit            1
     sub_16bit                       1
     sum_16bit                       1
     unsignedGreaterOrEqual_16bit      1
     unsignedLessThen_16bit          1
     xor_16bit                       1

=== and_16bit ===

   Number of wires:                  3
   Number of wire bits:             48
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                         16

=== control_unit ===

   Number of wires:                 75
   Number of wire bits:             83
   Number of public wires:          13
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 75
     $_AND_                         27
     $_AOI3_                         6
     $_AOI4_                         3
     $_DFF_P_                        5
     $_NAND_                         2
     $_NOR_                          9
     $_NOT_                          7
     $_OAI3_                         6
     $_OR_                          10

=== data_mux ===

   Number of wires:                 27
   Number of wire bits:            105
   Number of public wires:           7
   Number of public wire bits:      85
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $_AND_                          2
     $_MUX_                         32
     $_NOR_                          1
     $_NOT_                          1

=== immediate_operation ===

   Number of wires:                  4
   Number of wire bits:             26
   Number of public wires:           3
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 17
     $_AND_                         16
     $_NOT_                          1

=== instruction_decoder ===

   Number of wires:                 38
   Number of wire bits:             85
   Number of public wires:          10
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 66
     $_AND_                         22
     $_DFF_P_                       22
     $_MUX_                         22

=== internal_register ===

   Number of wires:                460
   Number of wire bits:            661
   Number of public wires:          18
   Number of public wire bits:     189
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                632
     $_AND_                         33
     $_DFF_P_                      160
     $_MUX_                        416
     $_NAND_                         3
     $_NOT_                          2
     $_OR_                          18

=== isEqual_16bit ===

   Number of wires:                 33
   Number of wire bits:             78
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 31
     $_AND_                         15
     $_XNOR_                        16

=== isNotEqual_16bit ===

   Number of wires:                 33
   Number of wire bits:             78
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 31
     $_OR_                          15
     $_XOR_                         16

=== mux4_16bit ===

   Number of wires:                489
   Number of wire bits:            747
   Number of public wires:          18
   Number of public wire bits:     276
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                487
     $_AND_                         10
     $_AOI3_                         1
     $_AOI4_                        16
     $_MUX_                         16
     $_NAND_                         5
     $_NOR_                          3
     $_NOT_                        211
     $_OAI3_                        16
     $_OAI4_                        96
     $_OR_                         113

=== or_16bit ===

   Number of wires:                  3
   Number of wire bits:             48
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_OR_                          16

=== program_counter ===

   Number of wires:                 96
   Number of wire bits:            157
   Number of public wires:           6
   Number of public wire bits:      52
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                121
     $_AND_                         32
     $_DFF_P_                       16
     $_MUX_                         16
     $_NAND_                         8
     $_NOT_                         17
     $_OAI4_                        16
     $_OR_                           1
     $_XNOR_                         8
     $_XOR_                          7

=== program_counter_preset ===

   Number of wires:                  4
   Number of wire bits:             49
   Number of public wires:           4
   Number of public wire bits:      49
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_MUX_                         16

=== signedGreaterOrEqual_16bit ===

   Number of wires:                 88
   Number of wire bits:            133
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 86
     $_AND_                         12
     $_AOI3_                         9
     $_AOI4_                         1
     $_NAND_                        13
     $_NOR_                          5
     $_NOT_                         18
     $_OAI3_                        10
     $_XNOR_                        11
     $_XOR_                          7

=== signedLessThen_16bit ===

   Number of wires:                 94
   Number of wire bits:            139
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 92
     $_AND_                         15
     $_AOI3_                        10
     $_NAND_                         6
     $_NOR_                          2
     $_NOT_                         22
     $_OAI3_                         9
     $_OAI4_                         1
     $_OR_                          10
     $_XNOR_                         9
     $_XOR_                          8

=== sub_16bit ===

   Number of wires:                 89
   Number of wire bits:            134
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                102
     $_AND_                         11
     $_AOI3_                        11
     $_NAND_                        10
     $_NOR_                          1
     $_NOT_                         21
     $_OAI3_                        11
     $_OR_                           4
     $_XNOR_                        11
     $_XOR_                         22

=== sum_16bit ===

   Number of wires:                 74
   Number of wire bits:            119
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 87
     $_AND_                         10
     $_AOI3_                        11
     $_NAND_                        11
     $_NOR_                          1
     $_NOT_                          6
     $_OAI3_                        11
     $_OR_                           4
     $_XNOR_                        12
     $_XOR_                         21

=== uProcessor ===

   Number of wires:                 30
   Number of wire bits:            242
   Number of public wires:          30
   Number of public wire bits:     242
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     address_mux                     1
     alu_16bit                       1
     control_unit                    1
     data_mux                        1
     immediate_operation             1
     instruction_decoder             1
     internal_register               1
     program_counter                 1
     program_counter_preset          1

=== unsignedGreaterOrEqual_16bit ===

   Number of wires:                 79
   Number of wire bits:            124
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 77
     $_AND_                          1
     $_AOI3_                         5
     $_NAND_                         4
     $_NOR_                          7
     $_NOT_                         16
     $_OAI3_                        10
     $_OAI4_                         1
     $_OR_                          17
     $_XNOR_                         2
     $_XOR_                         14

=== unsignedLessThen_16bit ===

   Number of wires:                 79
   Number of wire bits:            124
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 77
     $_AND_                         17
     $_AOI3_                        10
     $_AOI4_                         1
     $_NAND_                         7
     $_NOR_                          4
     $_NOT_                         16
     $_OAI3_                         5
     $_OR_                           1
     $_XNOR_                        14
     $_XOR_                          2

=== xor_16bit ===

   Number of wires:                  3
   Number of wire bits:             48
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_XOR_                         16

=== design hierarchy ===

   uProcessor                        1
     address_mux                     1
     alu_16bit                       1
       and_16bit                     1
       isEqual_16bit                 1
       isNotEqual_16bit              1
       mux4_16bit                    1
       or_16bit                      1
       signedGreaterOrEqual_16bit      1
       signedLessThen_16bit          1
       sub_16bit                     1
       sum_16bit                     1
       unsignedGreaterOrEqual_16bit      1
       unsignedLessThen_16bit        1
       xor_16bit                     1
     control_unit                    1
     data_mux                        1
     immediate_operation             1
     instruction_decoder             1
     internal_register               1
     program_counter                 1
     program_counter_preset          1

   Number of wires:               1835
   Number of wire bits:           3520
   Number of public wires:         162
   Number of public wire bits:    1786
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2112
     $_AND_                        246
     $_AOI3_                        63
     $_AOI4_                        21
     $_DFF_P_                      203
     $_MUX_                        534
     $_NAND_                        69
     $_NOR_                         41
     $_NOT_                        338
     $_OAI3_                        78
     $_OAI4_                       114
     $_OR_                         209
     $_XNOR_                        83
     $_XOR_                        113

3.24. Executing CHECK pass (checking for obvious problems).
checking module address_mux..
checking module alu_16bit..
checking module and_16bit..
checking module control_unit..
checking module data_mux..
checking module immediate_operation..
checking module instruction_decoder..
checking module internal_register..
checking module isEqual_16bit..
checking module isNotEqual_16bit..
checking module mux4_16bit..
checking module or_16bit..
checking module program_counter..
checking module program_counter_preset..
checking module signedGreaterOrEqual_16bit..
checking module signedLessThen_16bit..
checking module sub_16bit..
checking module sum_16bit..
checking module uProcessor..
checking module unsignedGreaterOrEqual_16bit..
checking module unsignedLessThen_16bit..
checking module xor_16bit..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\address_mux':
Mapping DFF cells in module `\alu_16bit':
Mapping DFF cells in module `\and_16bit':
Mapping DFF cells in module `\control_unit':
  mapped 5 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\data_mux':
Mapping DFF cells in module `\immediate_operation':
Mapping DFF cells in module `\instruction_decoder':
  mapped 22 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\internal_register':
  mapped 160 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\isEqual_16bit':
Mapping DFF cells in module `\isNotEqual_16bit':
Mapping DFF cells in module `\mux4_16bit':
Mapping DFF cells in module `\or_16bit':
Mapping DFF cells in module `\program_counter':
  mapped 16 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\program_counter_preset':
Mapping DFF cells in module `\signedGreaterOrEqual_16bit':
Mapping DFF cells in module `\signedLessThen_16bit':
Mapping DFF cells in module `\sub_16bit':
Mapping DFF cells in module `\sum_16bit':
Mapping DFF cells in module `\uProcessor':
Mapping DFF cells in module `\unsignedGreaterOrEqual_16bit':
Mapping DFF cells in module `\unsignedLessThen_16bit':
Mapping DFF cells in module `\xor_16bit':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\address_mux' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 49 wires to a netlist network with 33 inputs and 16 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       16
ABC RESULTS:           NAND2X1 cells:       16
ABC RESULTS:           OAI21X1 cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       16
Removing temp directory.

6.2. Extracting gate netlist of module `\alu_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 15 gates and 31 wires to a netlist network with 16 inputs and 1 outputs.

6.2.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:            NOR2X1 cells:       10
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        1
Removing temp directory.

6.3. Extracting gate netlist of module `\and_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

6.3.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

6.4. Extracting gate netlist of module `\control_unit' to `<abc-temp-dir>/input.blif'..
Extracted 70 gates and 80 wires to a netlist network with 10 inputs and 13 outputs.

6.4.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:             INVX1 cells:        8
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:           NAND3X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        6
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       13
Removing temp directory.

6.5. Extracting gate netlist of module `\data_mux' to `<abc-temp-dir>/input.blif'..
Extracted 36 gates and 89 wires to a netlist network with 53 inputs and 16 outputs.

6.5.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.5.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       35
ABC RESULTS:           NAND2X1 cells:       33
ABC RESULTS:           NAND3X1 cells:       32
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:           OAI21X1 cells:       16
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:       20
ABC RESULTS:           input signals:       53
ABC RESULTS:          output signals:       16
Removing temp directory.

6.6. Extracting gate netlist of module `\immediate_operation' to `<abc-temp-dir>/input.blif'..
Extracted 17 gates and 26 wires to a netlist network with 9 inputs and 16 outputs.

6.6.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.6.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        8
ABC RESULTS:             INVX1 cells:        8
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:       16
Removing temp directory.

6.7. Extracting gate netlist of module `\instruction_decoder' to `<abc-temp-dir>/input.blif'..
Extracted 44 gates and 84 wires to a netlist network with 40 inputs and 22 outputs.

6.7.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.7.2. Re-integrating ABC results.
ABC RESULTS:           AOI21X1 cells:       22
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           NAND2X1 cells:       38
ABC RESULTS:        internal signals:       22
ABC RESULTS:           input signals:       40
ABC RESULTS:          output signals:       22
Removing temp directory.

6.8. Extracting gate netlist of module `\internal_register' to `<abc-temp-dir>/input.blif'..
Extracted 472 gates and 660 wires to a netlist network with 188 inputs and 160 outputs.

6.8.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.8.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:       96
ABC RESULTS:             INVX1 cells:       24
ABC RESULTS:            MUX2X1 cells:       96
ABC RESULTS:           NAND2X1 cells:       53
ABC RESULTS:           NAND3X1 cells:        1
ABC RESULTS:            NOR2X1 cells:      135
ABC RESULTS:           OAI21X1 cells:      176
ABC RESULTS:           OAI22X1 cells:       64
ABC RESULTS:        internal signals:      312
ABC RESULTS:           input signals:      188
ABC RESULTS:          output signals:      160
Removing temp directory.

6.9. Extracting gate netlist of module `\isEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 63 wires to a netlist network with 32 inputs and 1 outputs.

6.9.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.9.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       16
ABC RESULTS:           NAND2X1 cells:        2
ABC RESULTS:            NOR2X1 cells:       21
ABC RESULTS:           OAI22X1 cells:        8
ABC RESULTS:        internal signals:       30
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.10. Extracting gate netlist of module `\isNotEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 63 wires to a netlist network with 32 inputs and 1 outputs.

6.10.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.10.2. Re-integrating ABC results.
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:           NAND2X1 cells:        9
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:             OR2X2 cells:        4
ABC RESULTS:           XNOR2X1 cells:       12
ABC RESULTS:        internal signals:       30
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.11. Extracting gate netlist of module `\mux4_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 487 gates and 747 wires to a netlist network with 260 inputs and 16 outputs.

6.11.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.11.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI22X1 cells:       64
ABC RESULTS:             INVX1 cells:       87
ABC RESULTS:           NAND2X1 cells:       90
ABC RESULTS:           NAND3X1 cells:       17
ABC RESULTS:            NOR2X1 cells:       55
ABC RESULTS:            NOR3X1 cells:        5
ABC RESULTS:           OAI21X1 cells:       48
ABC RESULTS:           OAI22X1 cells:       16
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:      471
ABC RESULTS:           input signals:      260
ABC RESULTS:          output signals:       16
Removing temp directory.

6.12. Extracting gate netlist of module `\or_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

6.12.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.12.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

6.13. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 105 gates and 140 wires to a netlist network with 35 inputs and 16 outputs.

6.13.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.13.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:       13
ABC RESULTS:           AOI22X1 cells:       16
ABC RESULTS:             INVX1 cells:       24
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:           NAND3X1 cells:       20
ABC RESULTS:            NOR2X1 cells:        3
ABC RESULTS:            NOR3X1 cells:        6
ABC RESULTS:           OAI21X1 cells:       15
ABC RESULTS:        internal signals:       89
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       16
Removing temp directory.

6.14. Extracting gate netlist of module `\program_counter_preset' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 49 wires to a netlist network with 33 inputs and 16 outputs.

6.14.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.14.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       16
ABC RESULTS:           NAND2X1 cells:       16
ABC RESULTS:           OAI21X1 cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       16
Removing temp directory.

6.15. Extracting gate netlist of module `\signedGreaterOrEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 86 gates and 118 wires to a netlist network with 32 inputs and 1 outputs.

6.15.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.15.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        7
ABC RESULTS:           AOI22X1 cells:        4
ABC RESULTS:             INVX1 cells:       24
ABC RESULTS:           NAND2X1 cells:       14
ABC RESULTS:           NAND3X1 cells:        6
ABC RESULTS:            NOR2X1 cells:       12
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:           OAI22X1 cells:        5
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:           XNOR2X1 cells:        4
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:        internal signals:       85
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.16. Extracting gate netlist of module `\signedLessThen_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 92 gates and 124 wires to a netlist network with 32 inputs and 1 outputs.

6.16.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.16.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:        9
ABC RESULTS:           AOI22X1 cells:        4
ABC RESULTS:             INVX1 cells:       20
ABC RESULTS:           NAND2X1 cells:       12
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:            NOR2X1 cells:       15
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:           OAI21X1 cells:        9
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           XNOR2X1 cells:        3
ABC RESULTS:        internal signals:       91
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.17. Extracting gate netlist of module `\sub_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 102 gates and 134 wires to a netlist network with 32 inputs and 16 outputs.

6.17.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.17.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        5
ABC RESULTS:           AOI21X1 cells:        9
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:       26
ABC RESULTS:           NAND2X1 cells:       27
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:            NOR2X1 cells:       17
ABC RESULTS:           OAI21X1 cells:       17
ABC RESULTS:             OR2X2 cells:        6
ABC RESULTS:           XNOR2X1 cells:       20
ABC RESULTS:            XOR2X1 cells:        5
ABC RESULTS:        internal signals:       86
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

6.18. Extracting gate netlist of module `\sum_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 87 gates and 119 wires to a netlist network with 32 inputs and 16 outputs.

6.18.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.18.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        8
ABC RESULTS:           AOI21X1 cells:       12
ABC RESULTS:             INVX1 cells:       18
ABC RESULTS:           NAND2X1 cells:       24
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:            NOR2X1 cells:       25
ABC RESULTS:           OAI21X1 cells:       14
ABC RESULTS:             OR2X2 cells:        7
ABC RESULTS:           XNOR2X1 cells:       13
ABC RESULTS:            XOR2X1 cells:        4
ABC RESULTS:        internal signals:       71
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

6.19. Extracting gate netlist of module `\uProcessor' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.20. Extracting gate netlist of module `\unsignedGreaterOrEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 77 gates and 109 wires to a netlist network with 32 inputs and 1 outputs.

6.20.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.20.2. Re-integrating ABC results.
ABC RESULTS:           AOI21X1 cells:       10
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:             INVX1 cells:       20
ABC RESULTS:           NAND2X1 cells:       10
ABC RESULTS:           NAND3X1 cells:        6
ABC RESULTS:            NOR2X1 cells:       15
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:             OR2X2 cells:        6
ABC RESULTS:           XNOR2X1 cells:        8
ABC RESULTS:        internal signals:       76
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.21. Extracting gate netlist of module `\unsignedLessThen_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 77 gates and 109 wires to a netlist network with 32 inputs and 1 outputs.

6.21.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.21.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:           AOI22X1 cells:        6
ABC RESULTS:             INVX1 cells:       21
ABC RESULTS:           NAND2X1 cells:       22
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:            NOR2X1 cells:       11
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:           OAI21X1 cells:       10
ABC RESULTS:             OR2X2 cells:        7
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:        internal signals:       76
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.22. Extracting gate netlist of module `\xor_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

6.22.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       16
ABC RESULTS:            NOR2X1 cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Mapping uProcessor.control_unit_ints_09 using control_unit.
Mapping uProcessor.instruction_decoder_inst_08 using instruction_decoder.
Mapping uProcessor.immediate_operation_inst02 using immediate_operation.
Mapping uProcessor.data_mux_inst_06 using data_mux.
Mapping uProcessor.internal_register_inst_07 using internal_register.
Mapping uProcessor.alu_inst01 using alu_16bit.
Mapping uProcessor.program_counter_preset_inst_04 using program_counter_preset.
Mapping uProcessor.program_counter_inst03 using program_counter.
Mapping uProcessor.address_mux_inst_05 using address_mux.
Mapping uProcessor.alu_inst01.inst01 using sum_16bit.
Mapping uProcessor.alu_inst01.inst02 using xor_16bit.
Mapping uProcessor.alu_inst01.inst03 using or_16bit.
Mapping uProcessor.alu_inst01.inst04 using and_16bit.
Mapping uProcessor.alu_inst01.inst05 using isEqual_16bit.
Mapping uProcessor.alu_inst01.inst06 using isNotEqual_16bit.
Mapping uProcessor.alu_inst01.inst07 using sub_16bit.
Mapping uProcessor.alu_inst01.inst08 using signedLessThen_16bit.
Mapping uProcessor.alu_inst01.inst09 using signedGreaterOrEqual_16bit.
Mapping uProcessor.alu_inst01.inst10 using unsignedLessThen_16bit.
Mapping uProcessor.alu_inst01.inst11 using unsignedGreaterOrEqual_16bit.
Mapping uProcessor.alu_inst01.inst12 using mux4_16bit.
No more expansions possible.
Deleting now unused module address_mux.
Deleting now unused module alu_16bit.
Deleting now unused module and_16bit.
Deleting now unused module control_unit.
Deleting now unused module data_mux.
Deleting now unused module immediate_operation.
Deleting now unused module instruction_decoder.
Deleting now unused module internal_register.
Deleting now unused module isEqual_16bit.
Deleting now unused module isNotEqual_16bit.
Deleting now unused module mux4_16bit.
Deleting now unused module or_16bit.
Deleting now unused module program_counter.
Deleting now unused module program_counter_preset.
Deleting now unused module signedGreaterOrEqual_16bit.
Deleting now unused module signedLessThen_16bit.
Deleting now unused module sub_16bit.
Deleting now unused module sum_16bit.
Deleting now unused module unsignedGreaterOrEqual_16bit.
Deleting now unused module unsignedLessThen_16bit.
Deleting now unused module xor_16bit.
Removed 15 unused cells and 3068 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port uProcessor.adrs_bus using BUFX2.
Don't map input port uProcessor.clock: Missing option -inpad.
Don't map input port uProcessor.data_in: Missing option -inpad.
Mapping port uProcessor.data_out using BUFX2.
Mapping port uProcessor.mem_rd using BUFX2.
Mapping port uProcessor.mem_wr using BUFX2.
Don't map input port uProcessor.reset: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uProcessor'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uProcessor.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uProcessor'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uProcessor..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing Verilog backend.
Dumping module `\uProcessor'.

11. Printing statistics.

=== uProcessor ===

   Number of wires:               2062
   Number of wire bits:           2594
   Number of public wires:        2062
   Number of public wire bits:    2594
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2485
     AND2X2                         87
     AOI21X1                       187
     AOI22X1                        99
     BUFX2                          34
     DFFPOSX1                      203
     INVX1                         349
     MUX2X1                         96
     NAND2X1                       375
     NAND3X1                        98
     NOR2X1                        357
     NOR3X1                         19
     OAI21X1                       359
     OAI22X1                        94
     OR2X2                          56
     XNOR2X1                        62
     XOR2X1                         10

End of script. Logfile hash: 0ae72622d0
CPU: user 3.44s system 0.10s, MEM: 46.69 MB total, 19.38 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 22% 20x opt_expr (0 sec), 16% 19x opt_merge (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Running vlogFanout
vlogFanout -l 200 -c 30 -I uProcessor_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y uProcessor_mapped.v uProcessor_sized.v

vlogFanout for qflow 1.4.79
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 66 (load 2072.21) from node \instruction_decoder_inst_08.rAadrs [0],
driven by DFFPOSX1 with strength 313.624 (fF driven at latency 200)
Top fanout load-to-strength ratio is 16.0543 (latency = 3210.87 ps)
Top input node fanout is 203 (load 8224.71) from node clock.
0 gates exceed specified minimum load.
277 buffers were added.
Warning 1: load of 125.829 is 1.23542 times greater than strongest gate OAI21X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 6: load of 162.211 is 1.30379 times greater than strongest gate AOI21X1
Warning 11: load of 149.358 is 1.46097 times greater than strongest gate NAND2X1
Warning 12: load of 168.69 is 1.54355 times greater than strongest gate XNOR2X1
Warning 16: load of 173.047 is 1.58342 times greater than strongest gate XNOR2X1
Warning 32: load of 463.786 is 4.53659 times greater than strongest gate NAND2X1
Warning 33: load of 467.714 is 4.57501 times greater than strongest gate NAND2X1
Warning 35: load of 466.869 is 4.60673 times greater than strongest gate NAND3X1
Warning 65: load of 2082.21 is 6.63918 times greater than strongest gate DFFPOSX1
Warning 72: load of 751.368 is 7.34962 times greater than strongest gate NAND2X1
Warning 77: load of 1754.87 is 16.1463 times greater than strongest gate NOR2X1
26 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 2322    	Out: 2296    	-26
	"2" gates	In: 440    	Out: 442    	+2

125 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 2322    	Out: 2296    	-26
	"2" gates	In: 440    	Out: 442    	+2

Number of gates changed: 0
Running vlog2Verilog for antenna cell mapping.
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
   -o uProcessor.v uProcessor_sized.v

Generating RTL verilog and SPICE netlist file in directory
	 /home/akash/Documents/DigitalLab/verilog_tasks/task_4/synthesis
Files:
   Verilog: /home/akash/Documents/DigitalLab/verilog_tasks/task_4/synthesis/uProcessor.rtl.v
   Verilog: /home/akash/Documents/DigitalLab/verilog_tasks/task_4/synthesis/uProcessor.rtlnopwr.v
   Verilog: /home/akash/Documents/DigitalLab/verilog_tasks/task_4/synthesis/uProcessor.rtlbb.v
   Spice:   /home/akash/Documents/DigitalLab/verilog_tasks/task_4/synthesis/uProcessor.spc

Running vlog2Verilog.
vlog2Verilog -c -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
	-o uProcessor.rtl.v
   uProcessor.v
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
	-o uProcessor.rtlnopwr.v
   uProcessor.v
/usr/local/share/qflow/bin/vlog2Verilog -c -p -b -n -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
   -o uProcessor.rtlbb.v
Running vlog2Spice.
vlog2Spice -i -l  /usr/local/share/qflow/tech/osu035/osu035_stdcells.sp -o uProcessor.spc uProcessor.rtl.v
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" uProcessor.spc uProcessor.xspice

Synthesis script ended on Mo 10. Aug 13:38:49 CEST 2020
