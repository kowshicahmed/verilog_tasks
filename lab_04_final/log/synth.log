Qflow synthesis logfile created on Sun Aug 9 18:42:17 CEST 2020
Running yosys for verilog parsing and synthesis
yosys  -s uProcessor.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 02f1c7b9, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Executing script file `uProcessor.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/rabby/digital_design_lab/lab_04/source/uProcessor.v
Parsing Verilog input from `/home/rabby/digital_design_lab/lab_04/source/uProcessor.v' to AST representation.
Generating RTLIL representation for module `\sum_16bit'.
Generating RTLIL representation for module `\xor_16bit'.
Generating RTLIL representation for module `\or_16bit'.
Generating RTLIL representation for module `\and_16bit'.
Generating RTLIL representation for module `\isEqual_16bit'.
Generating RTLIL representation for module `\isNotEqual_16bit'.
Generating RTLIL representation for module `\sub_16bit'.
Generating RTLIL representation for module `\signedLessThen_16bit'.
Generating RTLIL representation for module `\signedGreaterOrEqual_16bit'.
Generating RTLIL representation for module `\unsignedLessThen_16bit'.
Generating RTLIL representation for module `\unsignedGreaterOrEqual_16bit'.
Generating RTLIL representation for module `\mux4_16bit'.
Note: Assuming pure combinatorial block at ./alu/./mux4_16bit.v:27.1-61.12 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\alu_16bit'.
Generating RTLIL representation for module `\immediate_operation'.
Generating RTLIL representation for module `\program_counter'.
Generating RTLIL representation for module `\program_counter_preset'.
Generating RTLIL representation for module `\address_mux'.
Generating RTLIL representation for module `\data_mux'.
Generating RTLIL representation for module `\internal_register'.
Generating RTLIL representation for module `\instruction_decoder'.
Generating RTLIL representation for module `\control_unit'.
Note: Assuming pure combinatorial block at ./control_unit.v:72.1-85.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./control_unit.v:88.1-161.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./control_unit.v:164.1-183.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\uProcessor'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \uProcessor
Used module:     \control_unit
Used module:     \instruction_decoder
Used module:     \internal_register
Used module:     \data_mux
Used module:     \address_mux
Used module:     \program_counter_preset
Used module:     \program_counter
Used module:     \immediate_operation
Used module:     \alu_16bit
Used module:         \mux4_16bit
Used module:         \unsignedGreaterOrEqual_16bit
Used module:         \unsignedLessThen_16bit
Used module:         \signedGreaterOrEqual_16bit
Used module:         \signedLessThen_16bit
Used module:         \sub_16bit
Used module:         \isNotEqual_16bit
Used module:         \isEqual_16bit
Used module:         \and_16bit
Used module:         \or_16bit
Used module:         \xor_16bit
Used module:         \sum_16bit

3.1.2. Analyzing design hierarchy..
Top module:  \uProcessor
Used module:     \control_unit
Used module:     \instruction_decoder
Used module:     \internal_register
Used module:     \data_mux
Used module:     \address_mux
Used module:     \program_counter_preset
Used module:     \program_counter
Used module:     \immediate_operation
Used module:     \alu_16bit
Used module:         \mux4_16bit
Used module:         \unsignedGreaterOrEqual_16bit
Used module:         \unsignedLessThen_16bit
Used module:         \signedGreaterOrEqual_16bit
Used module:         \signedLessThen_16bit
Used module:         \sub_16bit
Used module:         \isNotEqual_16bit
Used module:         \isEqual_16bit
Used module:         \and_16bit
Used module:         \or_16bit
Used module:         \xor_16bit
Used module:         \sum_16bit
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./control_unit.v:164$52 in module control_unit.
Marked 2 switch rules as full_case in process $proc$./control_unit.v:72$50 in module control_unit.
Marked 1 switch rules as full_case in process $proc$./control_unit.v:63$48 in module control_unit.
Marked 1 switch rules as full_case in process $proc$./instruction_decoder.v:25$46 in module instruction_decoder.
Marked 3 switch rules as full_case in process $proc$./internal_register.v:20$28 in module internal_register.
Marked 2 switch rules as full_case in process $proc$./data_mux.v:13$23 in module data_mux.
Removed 1 dead cases from process $proc$./program_counter.v:23$18 in module program_counter.
Marked 2 switch rules as full_case in process $proc$./program_counter.v:23$18 in module program_counter.
Removed 1 dead cases from process $proc$./alu/./mux4_16bit.v:27$14 in module mux4_16bit.
Marked 1 switch rules as full_case in process $proc$./alu/./mux4_16bit.v:27$14 in module mux4_16bit.
Removed a total of 2 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 7 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\internal_register.$proc$./internal_register.v:15$45'.
  Set init value: \rb_out = 16'0000000000000000
Found init rule in `\internal_register.$proc$./internal_register.v:14$44'.
  Set init value: \ra_out = 16'0000000000000000

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\control_unit.$proc$./control_unit.v:164$52'.
     1/1: $1\opcode_type[2:0]
Creating decoders for process `\control_unit.$proc$./control_unit.v:88$51'.
     1/8: $0\mem_wr[0:0]
     2/8: $0\mem_rd[0:0]
     3/8: $0\adrs_ctrl[0:0]
     4/8: $0\imm_en[0:0]
     5/8: $0\rD_wr[0:0]
     6/8: $0\reg_en[0:0]
     7/8: $0\inst_wr[0:0]
     8/8: $0\pc_op[1:0]
Creating decoders for process `\control_unit.$proc$./control_unit.v:72$50'.
     1/1: $0\nState[2:0]
Creating decoders for process `\control_unit.$proc$./control_unit.v:63$48'.
     1/1: $0\cState[2:0]
Creating decoders for process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
     1/6: $0\rBadrs[2:0]
     2/6: $0\rAadrs[2:0]
     3/6: $0\rDadrs[2:0]
     4/6: $0\opcode[3:0]
     5/6: $0\imm[7:0]
     6/6: $0\flag[0:0]
Creating decoders for process `\internal_register.$proc$./internal_register.v:15$45'.
Creating decoders for process `\internal_register.$proc$./internal_register.v:14$44'.
Creating decoders for process `\internal_register.$proc$./internal_register.v:20$28'.
     1/11: $3$mem2bits$\internal_reg$./internal_register.v:33$26[15:0]$40
     2/11: $3$mem2bits$\internal_reg$./internal_register.v:32$25[15:0]$39
     3/11: $2$mem2bits$\internal_reg$./internal_register.v:33$26[15:0]$38
     4/11: $2$mem2bits$\internal_reg$./internal_register.v:32$25[15:0]$37
     5/11: $1$mem2bits$\internal_reg$./internal_register.v:33$26[15:0]$36
     6/11: $1$mem2bits$\internal_reg$./internal_register.v:32$25[15:0]$35
     7/11: $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33
     8/11: $0$memwr$\internal_reg$./internal_register.v:29$27_DATA[15:0]$32
     9/11: $0$memwr$\internal_reg$./internal_register.v:29$27_ADDR[2:0]$31
    10/11: $0\rb_out[15:0]
    11/11: $0\ra_out[15:0]
Creating decoders for process `\data_mux.$proc$./data_mux.v:13$23'.
     1/2: $2\m_regD[15:0]
     2/2: $1\m_regD[15:0]
Creating decoders for process `\program_counter.$proc$./program_counter.v:23$18'.
     1/1: $0\mPc[15:0]
Creating decoders for process `\mux4_16bit.$proc$./alu/./mux4_16bit.v:27$14'.
     1/1: $1\y[15:0]

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\control_unit.\opcode_type' from process `\control_unit.$proc$./control_unit.v:164$52'.
No latch inferred for signal `\control_unit.\adrs_ctrl' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\imm_en' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\inst_wr' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\pc_op' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\reg_en' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\rD_wr' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\mem_rd' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\mem_wr' from process `\control_unit.$proc$./control_unit.v:88$51'.
No latch inferred for signal `\control_unit.\nState' from process `\control_unit.$proc$./control_unit.v:72$50'.
No latch inferred for signal `\data_mux.\m_regD' from process `\data_mux.$proc$./data_mux.v:13$23'.
No latch inferred for signal `\mux4_16bit.\y' from process `\mux4_16bit.$proc$./alu/./mux4_16bit.v:27$14'.

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\control_unit.\cState' using process `\control_unit.$proc$./control_unit.v:63$48'.
  created $dff cell `$procdff$296' with positive edge clock.
Creating register for signal `\instruction_decoder.\flag' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$297' with positive edge clock.
Creating register for signal `\instruction_decoder.\imm' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$298' with positive edge clock.
Creating register for signal `\instruction_decoder.\opcode' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$299' with positive edge clock.
Creating register for signal `\instruction_decoder.\rDadrs' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$300' with positive edge clock.
Creating register for signal `\instruction_decoder.\rAadrs' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$301' with positive edge clock.
Creating register for signal `\instruction_decoder.\rBadrs' using process `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
  created $dff cell `$procdff$302' with positive edge clock.
Creating register for signal `\internal_register.\ra_out' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$303' with positive edge clock.
Creating register for signal `\internal_register.\rb_out' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$304' with positive edge clock.
Creating register for signal `\internal_register.$mem2bits$\internal_reg$./internal_register.v:32$25' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$305' with positive edge clock.
Creating register for signal `\internal_register.$mem2bits$\internal_reg$./internal_register.v:33$26' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$306' with positive edge clock.
Creating register for signal `\internal_register.$memwr$\internal_reg$./internal_register.v:29$27_ADDR' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$307' with positive edge clock.
Creating register for signal `\internal_register.$memwr$\internal_reg$./internal_register.v:29$27_DATA' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$308' with positive edge clock.
Creating register for signal `\internal_register.$memwr$\internal_reg$./internal_register.v:29$27_EN' using process `\internal_register.$proc$./internal_register.v:20$28'.
  created $dff cell `$procdff$309' with positive edge clock.
Creating register for signal `\program_counter.\mPc' using process `\program_counter.$proc$./program_counter.v:23$18'.
  created $dff cell `$procdff$310' with positive edge clock.

3.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\control_unit.$proc$./control_unit.v:164$52'.
Removing empty process `control_unit.$proc$./control_unit.v:164$52'.
Found and cleaned up 3 empty switches in `\control_unit.$proc$./control_unit.v:88$51'.
Removing empty process `control_unit.$proc$./control_unit.v:88$51'.
Found and cleaned up 2 empty switches in `\control_unit.$proc$./control_unit.v:72$50'.
Removing empty process `control_unit.$proc$./control_unit.v:72$50'.
Found and cleaned up 1 empty switch in `\control_unit.$proc$./control_unit.v:63$48'.
Removing empty process `control_unit.$proc$./control_unit.v:63$48'.
Found and cleaned up 2 empty switches in `\instruction_decoder.$proc$./instruction_decoder.v:25$46'.
Removing empty process `instruction_decoder.$proc$./instruction_decoder.v:25$46'.
Removing empty process `internal_register.$proc$./internal_register.v:15$45'.
Removing empty process `internal_register.$proc$./internal_register.v:14$44'.
Found and cleaned up 3 empty switches in `\internal_register.$proc$./internal_register.v:20$28'.
Removing empty process `internal_register.$proc$./internal_register.v:20$28'.
Found and cleaned up 2 empty switches in `\data_mux.$proc$./data_mux.v:13$23'.
Removing empty process `data_mux.$proc$./data_mux.v:13$23'.
Found and cleaned up 2 empty switches in `\program_counter.$proc$./program_counter.v:23$18'.
Removing empty process `program_counter.$proc$./program_counter.v:23$18'.
Found and cleaned up 1 empty switch in `\mux4_16bit.$proc$./alu/./mux4_16bit.v:27$14'.
Removing empty process `mux4_16bit.$proc$./alu/./mux4_16bit.v:27$14'.
Cleaned up 17 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module uProcessor.
Optimizing module control_unit.
<suppressed ~7 debug messages>
Optimizing module instruction_decoder.
<suppressed ~6 debug messages>
Optimizing module internal_register.
<suppressed ~11 debug messages>
Optimizing module data_mux.
Optimizing module address_mux.
Optimizing module program_counter_preset.
Optimizing module program_counter.
<suppressed ~2 debug messages>
Optimizing module immediate_operation.
Optimizing module alu_16bit.
<suppressed ~1 debug messages>
Optimizing module mux4_16bit.
<suppressed ~1 debug messages>
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module isEqual_16bit.
Optimizing module and_16bit.
Optimizing module or_16bit.
Optimizing module xor_16bit.
Optimizing module sum_16bit.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \xor_16bit..
Finding unused cells or wires in module \sum_16bit..
Removed 18 unused cells and 130 unused wires.
<suppressed ~39 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module address_mux..
checking module alu_16bit..
checking module and_16bit..
checking module control_unit..
checking module data_mux..
checking module immediate_operation..
checking module instruction_decoder..
checking module internal_register..
checking module isEqual_16bit..
checking module isNotEqual_16bit..
checking module mux4_16bit..
checking module or_16bit..
checking module program_counter..
checking module program_counter_preset..
checking module signedGreaterOrEqual_16bit..
checking module signedLessThen_16bit..
checking module sub_16bit..
checking module sum_16bit..
checking module uProcessor..
checking module unsignedGreaterOrEqual_16bit..
checking module unsignedLessThen_16bit..
checking module xor_16bit..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
<suppressed ~93 debug messages>
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 31 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$145.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$266.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 2 multiplexer ports.
<suppressed ~28 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
    New ctrl vector for $pmux cell $procmux$139: { $procmux$136_CMP $procmux$129_CMP $procmux$105_CMP $auto$opt_reduce.cc:134:opt_mux$312 }
    New ctrl vector for $pmux cell $procmux$112: $auto$opt_reduce.cc:134:opt_mux$314
    New ctrl vector for $pmux cell $procmux$54: { $auto$opt_reduce.cc:134:opt_mux$316 $procmux$58_CMP $procmux$57_CMP $procmux$56_CMP $procmux$55_CMP }
    New ctrl vector for $pmux cell $procmux$120: $auto$opt_reduce.cc:134:opt_mux$318
    New ctrl vector for $pmux cell $procmux$106: $auto$opt_reduce.cc:134:opt_mux$320
    New ctrl vector for $pmux cell $procmux$88: $auto$opt_reduce.cc:134:opt_mux$322
    New ctrl vector for $pmux cell $procmux$95: $auto$opt_reduce.cc:134:opt_mux$324
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
    Consolidated identical input bits for $mux cell $procmux$219:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$procmux$219_Y
      New ports: A=1'0, B=1'1, Y=$procmux$219_Y [0]
      New connections: $procmux$219_Y [15:1] = { $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] $procmux$219_Y [0] }
  Optimizing cells in module \internal_register.
    Consolidated identical input bits for $mux cell $procmux$221:
      Old ports: A=16'0000000000000000, B=$procmux$219_Y, Y=$procmux$221_Y
      New ports: A=1'0, B=$procmux$219_Y [0], Y=$procmux$221_Y [0]
      New connections: $procmux$221_Y [15:1] = { $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] $procmux$221_Y [0] }
  Optimizing cells in module \internal_register.
    Consolidated identical input bits for $mux cell $procmux$224:
      Old ports: A=16'0000000000000000, B=$procmux$221_Y, Y=$0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33
      New ports: A=1'0, B=$procmux$221_Y [0], Y=$0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0]
      New connections: $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [15:1] = { $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] $0$memwr$\internal_reg$./internal_register.v:29$27_EN[15:0]$33 [0] }
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 10 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
<suppressed ~12 debug messages>
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 4 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..
Removed 0 unused cells and 37 unused wires.
<suppressed ~2 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
    New ctrl vector for $pmux cell $procmux$101: $auto$opt_reduce.cc:134:opt_mux$326
    New ctrl vector for $pmux cell $procmux$79: { $procmux$129_CMP $auto$opt_reduce.cc:134:opt_mux$328 }
    New ctrl vector for $pmux cell $procmux$91: $auto$opt_reduce.cc:134:opt_mux$330
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 3 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
<suppressed ~6 debug messages>
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 2 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$55_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell control_unit.$procmux$56_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell control_unit.$procmux$57_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell control_unit.$procmux$58_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$65_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$66_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$67_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unit.$procmux$100_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unit.$procmux$105_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unit.$procmux$108_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell control_unit.$procmux$115_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unit.$procmux$129_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell control_unit.$procmux$136_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell data_mux.$eq$./data_mux.v:17$24 ($eq).
Removed cell internal_register.$procmux$228 ($mux).
Removed cell internal_register.$procmux$230 ($mux).
Removed cell internal_register.$procmux$233 ($mux).
Removed cell internal_register.$procmux$237 ($mux).
Removed cell internal_register.$procmux$239 ($mux).
Removed cell internal_register.$procmux$242 ($mux).
Removed top 15 bits (of 16) from FF cell internal_register.$procdff$309 ($dff).
Removed top 1 bits (of 4) from port B of cell mux4_16bit.$procmux$288_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell mux4_16bit.$procmux$289_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell mux4_16bit.$procmux$290_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell mux4_16bit.$procmux$291_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell mux4_16bit.$procmux$292_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell mux4_16bit.$procmux$293_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell mux4_16bit.$procmux$294_CMP0 ($eq).
Removed top 15 bits (of 16) from port B of cell program_counter.$add$./program_counter.v:35$20 ($add).
Removed top 1 bits (of 2) from port B of cell program_counter.$procmux$274_CMP0 ($eq).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

3.10. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module address_mux:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module alu_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module and_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module control_unit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_mux:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module immediate_operation:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module instruction_decoder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module internal_register:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module isEqual_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module isNotEqual_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux4_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module or_16bit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module program_counter:
  creating $macc model for $add$./program_counter.v:35$20 ($add).
  creating $alu model for $macc $add$./program_counter.v:35$20.
  creating $alu cell for $add$./program_counter.v:35$20: $auto$alumacc.cc:485:replace_alu$331
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module program_counter_preset:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module signedGreaterOrEqual_16bit:
  creating $alu model for $lt$./alu/./signedGreaterOrEqual_16bit.v:10$9 ($lt): new $alu
  creating $alu cell for $lt$./alu/./signedGreaterOrEqual_16bit.v:10$9: $auto$alumacc.cc:485:replace_alu$335
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module signedLessThen_16bit:
  creating $alu model for $lt$./alu/./signedLessThen_16bit.v:10$8 ($lt): new $alu
  creating $alu cell for $lt$./alu/./signedLessThen_16bit.v:10$8: $auto$alumacc.cc:485:replace_alu$349
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sub_16bit:
  creating $macc model for $sub$./alu/./sub_16bit.v:10$7 ($sub).
  creating $alu model for $macc $sub$./alu/./sub_16bit.v:10$7.
  creating $alu cell for $sub$./alu/./sub_16bit.v:10$7: $auto$alumacc.cc:485:replace_alu$362
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sum_16bit:
  creating $macc model for $add$./alu/./sum_16bit.v:7$1 ($add).
  creating $alu model for $macc $add$./alu/./sum_16bit.v:7$1.
  creating $alu cell for $add$./alu/./sum_16bit.v:7$1: $auto$alumacc.cc:485:replace_alu$365
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uProcessor:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module unsignedGreaterOrEqual_16bit:
  creating $alu model for $lt$./alu/./unsignedGreaterOrEqual_16bit.v:11$12 ($lt): new $alu
  creating $alu cell for $lt$./alu/./unsignedGreaterOrEqual_16bit.v:11$12: $auto$alumacc.cc:485:replace_alu$369
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module unsignedLessThen_16bit:
  creating $alu model for $lt$./alu/./unsignedLessThen_16bit.v:10$11 ($lt): new $alu
  creating $alu cell for $lt$./alu/./unsignedLessThen_16bit.v:10$11: $auto$alumacc.cc:485:replace_alu$381
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module xor_16bit:
  created 0 $alu and 0 $macc cells.

3.11. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module internal_register that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\internal_reg$./internal_register.v:33$42 ($memrd):
    Found 1 activation_patterns using ctrl signal { \wr_en \enable \reset }.
    Found 1 candidates: $memrd$\internal_reg$./internal_register.v:32$41
    Analyzing resource sharing with $memrd$\internal_reg$./internal_register.v:32$41 ($memrd):
      Found 1 activation_patterns using ctrl signal { \wr_en \enable \reset }.
      Activation pattern for cell $memrd$\internal_reg$./internal_register.v:33$42: { \wr_en \enable \reset } = 3'011
      Activation pattern for cell $memrd$\internal_reg$./internal_register.v:32$41: { \wr_en \enable \reset } = 3'011
      Size of SAT problem: 0 cells, 12 variables, 25 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { \wr_en \enable \reset } = 3'011
  Analyzing resource sharing options for $memrd$\internal_reg$./internal_register.v:32$41 ($memrd):
    Found 1 activation_patterns using ctrl signal { \wr_en \enable \reset }.
    No candidates found.

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
<suppressed ~1 debug messages>
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
<suppressed ~1 debug messages>
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

3.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 0 changes.

3.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.12.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..
Removed 2 unused cells and 8 unused wires.
<suppressed ~6 debug messages>

3.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.12.9. Rerunning OPT passes. (Maybe there is more to do..)

3.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

3.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 0 changes.

3.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.12.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.12.16. Finished OPT passes. (There is nothing left to do.)

3.13. Executing FSM pass (extract and optimize FSM).

3.13.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register control_unit.cState.

3.13.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\cState' from module `\control_unit'.
  found $dff cell for state register: $procdff$296
  root of input selection tree: $0\cState[2:0]
  found reset state: 3'000 (guessed from mux tree)
  found ctrl input: \reset
  found state code: 3'000
  found ctrl input: $auto$opt_reduce.cc:134:opt_mux$312
  found ctrl input: $procmux$105_CMP
  found ctrl input: $procmux$129_CMP
  found ctrl input: $procmux$136_CMP
  found state code: 3'001
  found state code: 3'110
  found state code: 3'010
  found state code: 3'011
  found ctrl output: $procmux$102_CMP
  found ctrl output: $procmux$105_CMP
  found ctrl output: $procmux$129_CMP
  found ctrl output: $procmux$136_CMP
  found ctrl output: $procmux$137_CMP
  ctrl inputs: { $auto$opt_reduce.cc:134:opt_mux$312 \reset }
  ctrl outputs: { $procmux$137_CMP $procmux$136_CMP $procmux$129_CMP $procmux$105_CMP $procmux$102_CMP $0\cState[2:0] }
  transition:      3'000 2'-0 ->      3'000 8'10000000
  transition:      3'000 2'-1 ->      3'001 8'10000001
  transition:      3'010 2'-0 ->      3'000 8'00010000
  transition:      3'010 2'-1 ->      3'110 8'00010110
  transition:      3'110 2'-0 ->      3'000 8'00001000
  transition:      3'110 2'-1 ->      3'001 8'00001001
  transition:      3'001 2'-0 ->      3'000 8'01000000
  transition:      3'001 2'-1 ->      3'011 8'01000011
  transition:      3'011 2'-0 ->      3'000 8'00100000
  transition:      3'011 2'-1 ->      3'010 8'00100010

3.13.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\cState$392' from module `\control_unit'.
  Removing unused input signal $auto$opt_reduce.cc:134:opt_mux$312.

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..
Removed 9 unused cells and 9 unused wires.
<suppressed ~11 debug messages>

3.13.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\cState$392' from module `\control_unit'.
  Removing unused output signal $0\cState[2:0] [0].
  Removing unused output signal $0\cState[2:0] [1].
  Removing unused output signal $0\cState[2:0] [2].

3.13.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\cState$392' from module `\control_unit' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000 -> ----1
  010 -> ---1-
  110 -> --1--
  001 -> -1---
  011 -> 1----

3.13.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\cState$392' from module `control_unit':
-------------------------------------

  Information on FSM $fsm$\cState$392 (\cState):

  Number of input signals:    1
  Number of output signals:   5
  Number of state bits:       5

  Input signals:
    0: \reset

  Output signals:
    0: $procmux$102_CMP
    1: $procmux$105_CMP
    2: $procmux$129_CMP
    3: $procmux$136_CMP
    4: $procmux$137_CMP

  State encoding:
    0:    5'----1  <RESET STATE>
    1:    5'---1-
    2:    5'--1--
    3:    5'-1---
    4:    5'1----

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 1'0   ->     0 5'10000
      1:     0 1'1   ->     3 5'10000
      2:     1 1'0   ->     0 5'00010
      3:     1 1'1   ->     2 5'00010
      4:     2 1'0   ->     0 5'00001
      5:     2 1'1   ->     3 5'00001
      6:     3 1'0   ->     0 5'01000
      7:     3 1'1   ->     4 5'01000
      8:     4 1'0   ->     0 5'00100
      9:     4 1'1   ->     1 5'00100

-------------------------------------

3.13.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\cState$392' from module `\control_unit'.

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
<suppressed ~5 debug messages>
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.14.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

3.14.5. Finished fast OPT passes.

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\internal_reg$./internal_register.v:0$43' in module `\internal_register': merged $dff to cell.
Checking cell `$memrd$\internal_reg$./internal_register.v:32$41' in module `\internal_register': no (compatible) $dff found.
Checking cell `$memrd$\internal_reg$./internal_register.v:33$42' in module `\internal_register': no (compatible) $dff found.

3.15.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

3.15.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.15.6. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\internal_reg' in module `\internal_register':
  $memwr$\internal_reg$./internal_register.v:0$43 ($memwr)
  $memrd$\internal_reg$./internal_register.v:32$41 ($memrd)
  $memrd$\internal_reg$./internal_register.v:33$42 ($memrd)

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
<suppressed ~12 debug messages>
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
<suppressed ~1 debug messages>
Optimizing module internal_register.
<suppressed ~3 debug messages>
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
<suppressed ~1 debug messages>
Optimizing module or_16bit.
Optimizing module program_counter.
<suppressed ~1 debug messages>
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.17.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..
Removed 2 unused cells and 10 unused wires.
<suppressed ~6 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \internal_reg in module \internal_register:
  created 8 $dff cells and 0 static cells of width 16.
  read interface: 0 $dff and 14 $mux cells.
  write interface: 8 write mux blocks.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
<suppressed ~6 debug messages>
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
    Consolidated identical input bits for $mux cell $procmux$132:
      Old ports: A=2'11, B=2'01, Y=$procmux$132_Y
      New ports: A=1'1, B=1'0, Y=$procmux$132_Y [1]
      New connections: $procmux$132_Y [0] = 1'1
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 1 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..
Removed 0 unused cells and 27 unused wires.
<suppressed ~1 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
<suppressed ~1 debug messages>
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.19.18. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=15 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
No more expansions possible.
<suppressed ~1002 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
<suppressed ~103 debug messages>
Optimizing module data_mux.
<suppressed ~20 debug messages>
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
<suppressed ~60 debug messages>
Optimizing module or_16bit.
Optimizing module program_counter.
<suppressed ~95 debug messages>
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
<suppressed ~19 debug messages>
Optimizing module signedLessThen_16bit.
<suppressed ~19 debug messages>
Optimizing module sub_16bit.
<suppressed ~19 debug messages>
Optimizing module sum_16bit.
<suppressed ~20 debug messages>
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
<suppressed ~19 debug messages>
Optimizing module unsignedLessThen_16bit.
<suppressed ~19 debug messages>
Optimizing module xor_16bit.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
<suppressed ~156 debug messages>
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
<suppressed ~150 debug messages>
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
<suppressed ~9 debug messages>
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
<suppressed ~33 debug messages>
Finding identical cells in module `\signedLessThen_16bit'.
<suppressed ~33 debug messages>
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
<suppressed ~33 debug messages>
Finding identical cells in module `\unsignedLessThen_16bit'.
<suppressed ~33 debug messages>
Finding identical cells in module `\xor_16bit'.
Removed a total of 149 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..
Removed 198 unused cells and 674 unused wires.
<suppressed ~210 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\address_mux' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 49 wires to a netlist network with 33 inputs and 16 outputs.

3.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.2. Extracting gate netlist of module `\alu_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 32 wires to a netlist network with 16 inputs and 1 outputs.

3.22.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.2.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:               NOR cells:        1
ABC RESULTS:                OR cells:       11
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        1
Removing temp directory.

3.22.3. Extracting gate netlist of module `\and_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

3.22.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.4. Extracting gate netlist of module `\control_unit' to `<abc-temp-dir>/input.blif'..
Extracted 111 gates and 123 wires to a netlist network with 10 inputs and 13 outputs.

3.22.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:       34
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               NOR cells:       11
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:       26
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:        internal signals:      100
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       13
Removing temp directory.

3.22.5. Extracting gate netlist of module `\data_mux' to `<abc-temp-dir>/input.blif'..
Extracted 36 gates and 89 wires to a netlist network with 53 inputs and 16 outputs.

3.22.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.5.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:               MUX cells:       32
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:       20
ABC RESULTS:           input signals:       53
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.6. Extracting gate netlist of module `\immediate_operation' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 26 wires to a netlist network with 9 inputs and 16 outputs.

3.22.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:        8
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.7. Extracting gate netlist of module `\instruction_decoder' to `<abc-temp-dir>/input.blif'..
Extracted 44 gates and 85 wires to a netlist network with 40 inputs and 22 outputs.

3.22.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.7.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       22
ABC RESULTS:               MUX cells:       22
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:       23
ABC RESULTS:           input signals:       40
ABC RESULTS:          output signals:       22
Removing temp directory.

3.22.8. Extracting gate netlist of module `\internal_register' to `<abc-temp-dir>/input.blif'..
Extracted 473 gates and 662 wires to a netlist network with 188 inputs and 160 outputs.

3.22.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.8.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:               MUX cells:      416
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        7
ABC RESULTS:                OR cells:       16
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:        internal signals:      314
ABC RESULTS:           input signals:      188
ABC RESULTS:          output signals:      160
Removing temp directory.

3.22.9. Extracting gate netlist of module `\isEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 64 wires to a netlist network with 32 inputs and 1 outputs.

3.22.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.9.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        4
ABC RESULTS:                OR cells:       11
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       15
ABC RESULTS:        internal signals:       31
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.22.10. Extracting gate netlist of module `\isNotEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 63 wires to a netlist network with 32 inputs and 1 outputs.

3.22.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.10.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:       15
ABC RESULTS:               XOR cells:       16
ABC RESULTS:        internal signals:       30
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.22.11. Extracting gate netlist of module `\mux4_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 536 gates and 796 wires to a netlist network with 260 inputs and 16 outputs.

3.22.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.11.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:      243
ABC RESULTS:               MUX cells:       16
ABC RESULTS:              NAND cells:        8
ABC RESULTS:                OR cells:      244
ABC RESULTS:             ORNOT cells:        5
ABC RESULTS:        internal signals:      520
ABC RESULTS:           input signals:      260
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.12. Extracting gate netlist of module `\or_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

3.22.12.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.12.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.13. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 160 gates and 196 wires to a netlist network with 35 inputs and 16 outputs.

3.22.13.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.13.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       86
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        8
ABC RESULTS:                OR cells:       36
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:      145
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.14. Extracting gate netlist of module `\program_counter_preset' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 49 wires to a netlist network with 33 inputs and 16 outputs.

3.22.14.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.14.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.15. Extracting gate netlist of module `\signedGreaterOrEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 104 gates and 136 wires to a netlist network with 32 inputs and 1 outputs.

3.22.15.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.15.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       40
ABC RESULTS:              NAND cells:        1
ABC RESULTS:                OR cells:        3
ABC RESULTS:             ORNOT cells:       16
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:               XOR cells:       10
ABC RESULTS:        internal signals:      103
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.22.16. Extracting gate netlist of module `\signedLessThen_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 105 gates and 137 wires to a netlist network with 32 inputs and 1 outputs.

3.22.16.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       42
ABC RESULTS:              NAND cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:             ORNOT cells:       15
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:               XOR cells:       10
ABC RESULTS:        internal signals:      104
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.22.17. Extracting gate netlist of module `\sub_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 116 gates and 148 wires to a netlist network with 32 inputs and 16 outputs.

3.22.17.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.17.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       29
ABC RESULTS:               NOR cells:       11
ABC RESULTS:                OR cells:       16
ABC RESULTS:             ORNOT cells:       11
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:               XOR cells:       26
ABC RESULTS:        internal signals:      100
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.18. Extracting gate netlist of module `\sum_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 130 wires to a netlist network with 32 inputs and 16 outputs.

3.22.18.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.18.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:            ANDNOT cells:       23
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:       11
ABC RESULTS:                OR cells:       16
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:       18
ABC RESULTS:               XOR cells:       13
ABC RESULTS:        internal signals:       82
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.19. Extracting gate netlist of module `\uProcessor' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.20. Extracting gate netlist of module `\unsignedGreaterOrEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 96 gates and 128 wires to a netlist network with 32 inputs and 1 outputs.

3.22.20.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.20.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       35
ABC RESULTS:                OR cells:        8
ABC RESULTS:             ORNOT cells:       19
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               XOR cells:       12
ABC RESULTS:        internal signals:       95
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.22.21. Extracting gate netlist of module `\unsignedLessThen_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 97 gates and 129 wires to a netlist network with 32 inputs and 1 outputs.

3.22.21.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.21.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       33
ABC RESULTS:                OR cells:       11
ABC RESULTS:             ORNOT cells:       18
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               XOR cells:       12
ABC RESULTS:        internal signals:       96
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

3.22.22. Extracting gate netlist of module `\xor_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

3.22.22.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.22.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
<suppressed ~128 debug messages>
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

3.23.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..
Removed 5 unused cells and 1816 unused wires.
<suppressed ~27 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \uProcessor
Used module:     \address_mux
Used module:     \alu_16bit
Used module:         \sum_16bit
Used module:         \xor_16bit
Used module:         \or_16bit
Used module:         \and_16bit
Used module:         \isEqual_16bit
Used module:         \isNotEqual_16bit
Used module:         \sub_16bit
Used module:         \signedLessThen_16bit
Used module:         \signedGreaterOrEqual_16bit
Used module:         \unsignedLessThen_16bit
Used module:         \unsignedGreaterOrEqual_16bit
Used module:         \mux4_16bit
Used module:     \control_unit
Used module:     \data_mux
Used module:     \immediate_operation
Used module:     \instruction_decoder
Used module:     \internal_register
Used module:     \program_counter
Used module:     \program_counter_preset

3.24.2. Analyzing design hierarchy..
Top module:  \uProcessor
Used module:     \address_mux
Used module:     \alu_16bit
Used module:         \sum_16bit
Used module:         \xor_16bit
Used module:         \or_16bit
Used module:         \and_16bit
Used module:         \isEqual_16bit
Used module:         \isNotEqual_16bit
Used module:         \sub_16bit
Used module:         \signedLessThen_16bit
Used module:         \signedGreaterOrEqual_16bit
Used module:         \unsignedLessThen_16bit
Used module:         \unsignedGreaterOrEqual_16bit
Used module:         \mux4_16bit
Used module:     \control_unit
Used module:     \data_mux
Used module:     \immediate_operation
Used module:     \instruction_decoder
Used module:     \internal_register
Used module:     \program_counter
Used module:     \program_counter_preset
Removed 0 unused modules.

3.25. Printing statistics.

=== address_mux ===

   Number of wires:                  4
   Number of wire bits:             49
   Number of public wires:           4
   Number of public wire bits:      49
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_MUX_                         16

=== alu_16bit ===

   Number of wires:                 30
   Number of wire bits:            243
   Number of public wires:          16
   Number of public wire bits:     229
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $_ANDNOT_                       3
     $_NOR_                          1
     $_OR_                          11
     and_16bit                       1
     isEqual_16bit                   1
     isNotEqual_16bit                1
     mux4_16bit                      1
     or_16bit                        1
     signedGreaterOrEqual_16bit      1
     signedLessThen_16bit            1
     sub_16bit                       1
     sum_16bit                       1
     unsignedGreaterOrEqual_16bit      1
     unsignedLessThen_16bit          1
     xor_16bit                       1

=== and_16bit ===

   Number of wires:                  3
   Number of wire bits:             48
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                         16

=== control_unit ===

   Number of wires:                 92
   Number of wire bits:            100
   Number of public wires:          13
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 92
     $_ANDNOT_                      34
     $_AND_                          8
     $_DFF_P_                        5
     $_NAND_                         4
     $_NOR_                         11
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                          26

=== data_mux ===

   Number of wires:                 26
   Number of wire bits:            104
   Number of public wires:           7
   Number of public wire bits:      85
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 35
     $_ANDNOT_                       2
     $_MUX_                         32
     $_OR_                           1

=== immediate_operation ===

   Number of wires:                  3
   Number of wire bits:             25
   Number of public wires:           3
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_ANDNOT_                       8
     $_AND_                          8

=== instruction_decoder ===

   Number of wires:                 39
   Number of wire bits:             86
   Number of public wires:          10
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 67
     $_ANDNOT_                      22
     $_DFF_P_                       22
     $_MUX_                         22
     $_NOT_                          1

=== internal_register ===

   Number of wires:                460
   Number of wire bits:            661
   Number of public wires:          18
   Number of public wire bits:     189
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                632
     $_ANDNOT_                      32
     $_DFF_P_                      160
     $_MUX_                        416
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          2
     $_ORNOT_                        2
     $_OR_                          16

=== isEqual_16bit ===

   Number of wires:                 33
   Number of wire bits:             78
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 31
     $_ANDNOT_                       4
     $_OR_                          11
     $_XNOR_                         1
     $_XOR_                         15

=== isNotEqual_16bit ===

   Number of wires:                 33
   Number of wire bits:             78
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 31
     $_OR_                          15
     $_XOR_                         16

=== mux4_16bit ===

   Number of wires:                519
   Number of wire bits:            777
   Number of public wires:          18
   Number of public wire bits:     276
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                517
     $_ANDNOT_                     243
     $_AND_                          1
     $_MUX_                         16
     $_NAND_                         8
     $_ORNOT_                        5
     $_OR_                         244

=== or_16bit ===

   Number of wires:                  3
   Number of wire bits:             48
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_OR_                          16

=== program_counter ===

   Number of wires:                150
   Number of wire bits:            211
   Number of public wires:           6
   Number of public wire bits:      52
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                175
     $_ANDNOT_                      86
     $_DFF_P_                       16
     $_MUX_                          1
     $_NAND_                         8
     $_NOR_                          1
     $_NOT_                          8
     $_ORNOT_                        4
     $_OR_                          36
     $_XNOR_                         1
     $_XOR_                         14

=== program_counter_preset ===

   Number of wires:                  4
   Number of wire bits:             49
   Number of public wires:           4
   Number of public wire bits:      49
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_MUX_                         16

=== signedGreaterOrEqual_16bit ===

   Number of wires:                 81
   Number of wire bits:            126
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     $_ANDNOT_                      40
     $_AND_                          2
     $_NAND_                         1
     $_ORNOT_                       16
     $_OR_                           3
     $_XNOR_                         7
     $_XOR_                         10

=== signedLessThen_16bit ===

   Number of wires:                 81
   Number of wire bits:            126
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     $_ANDNOT_                      42
     $_AND_                          2
     $_NAND_                         1
     $_ORNOT_                       15
     $_OR_                           2
     $_XNOR_                         7
     $_XOR_                         10

=== sub_16bit ===

   Number of wires:                 85
   Number of wire bits:            130
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 98
     $_ANDNOT_                      29
     $_NOR_                         11
     $_ORNOT_                       11
     $_OR_                          16
     $_XNOR_                         5
     $_XOR_                         26

=== sum_16bit ===

   Number of wires:                 85
   Number of wire bits:            130
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 98
     $_ANDNOT_                      23
     $_AND_                          5
     $_NAND_                        10
     $_NOR_                         11
     $_ORNOT_                        2
     $_OR_                          16
     $_XNOR_                        18
     $_XOR_                         13

=== uProcessor ===

   Number of wires:                 30
   Number of wire bits:            242
   Number of public wires:          30
   Number of public wire bits:     242
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     address_mux                     1
     alu_16bit                       1
     control_unit                    1
     data_mux                        1
     immediate_operation             1
     instruction_decoder             1
     internal_register               1
     program_counter                 1
     program_counter_preset          1

=== unsignedGreaterOrEqual_16bit ===

   Number of wires:                 80
   Number of wire bits:            125
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 78
     $_ANDNOT_                      35
     $_ORNOT_                       19
     $_OR_                           8
     $_XNOR_                         4
     $_XOR_                         12

=== unsignedLessThen_16bit ===

   Number of wires:                 80
   Number of wire bits:            125
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 78
     $_ANDNOT_                      33
     $_ORNOT_                       18
     $_OR_                          11
     $_XNOR_                         4
     $_XOR_                         12

=== xor_16bit ===

   Number of wires:                  3
   Number of wire bits:             48
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_XOR_                         16

=== design hierarchy ===

   uProcessor                        1
     address_mux                     1
     alu_16bit                       1
       and_16bit                     1
       isEqual_16bit                 1
       isNotEqual_16bit              1
       mux4_16bit                    1
       or_16bit                      1
       signedGreaterOrEqual_16bit      1
       signedLessThen_16bit          1
       sub_16bit                     1
       sum_16bit                     1
       unsignedGreaterOrEqual_16bit      1
       unsignedLessThen_16bit        1
       xor_16bit                     1
     control_unit                    1
     data_mux                        1
     immediate_operation             1
     instruction_decoder             1
     internal_register               1
     program_counter                 1
     program_counter_preset          1

   Number of wires:               1924
   Number of wire bits:           3609
   Number of public wires:         162
   Number of public wire bits:    1786
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2201
     $_ANDNOT_                     636
     $_AND_                         42
     $_DFF_P_                      203
     $_MUX_                        519
     $_NAND_                        34
     $_NOR_                         37
     $_NOT_                         12
     $_ORNOT_                       95
     $_OR_                         432
     $_XNOR_                        47
     $_XOR_                        144

3.26. Executing CHECK pass (checking for obvious problems).
checking module address_mux..
checking module alu_16bit..
checking module and_16bit..
checking module control_unit..
checking module data_mux..
checking module immediate_operation..
checking module instruction_decoder..
checking module internal_register..
checking module isEqual_16bit..
checking module isNotEqual_16bit..
checking module mux4_16bit..
checking module or_16bit..
checking module program_counter..
checking module program_counter_preset..
checking module signedGreaterOrEqual_16bit..
checking module signedLessThen_16bit..
checking module sub_16bit..
checking module sum_16bit..
checking module uProcessor..
checking module unsignedGreaterOrEqual_16bit..
checking module unsignedLessThen_16bit..
checking module xor_16bit..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    \DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    \DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    \DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    \DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    \DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    \DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    \DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    \DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    \DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    \DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    \DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    \DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    \DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    \DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    \DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\address_mux':
Mapping DFF cells in module `\alu_16bit':
Mapping DFF cells in module `\and_16bit':
Mapping DFF cells in module `\control_unit':
  mapped 5 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\data_mux':
Mapping DFF cells in module `\immediate_operation':
Mapping DFF cells in module `\instruction_decoder':
  mapped 22 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\internal_register':
  mapped 160 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\isEqual_16bit':
Mapping DFF cells in module `\isNotEqual_16bit':
Mapping DFF cells in module `\mux4_16bit':
Mapping DFF cells in module `\or_16bit':
Mapping DFF cells in module `\program_counter':
  mapped 16 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\program_counter_preset':
Mapping DFF cells in module `\signedGreaterOrEqual_16bit':
Mapping DFF cells in module `\signedLessThen_16bit':
Mapping DFF cells in module `\sub_16bit':
Mapping DFF cells in module `\sum_16bit':
Mapping DFF cells in module `\uProcessor':
Mapping DFF cells in module `\unsignedGreaterOrEqual_16bit':
Mapping DFF cells in module `\unsignedLessThen_16bit':
Mapping DFF cells in module `\xor_16bit':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \address_mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \and_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \immediate_operation..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \instruction_decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \internal_register..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \isNotEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux4_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \or_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter_preset..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \signedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sum_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedGreaterOrEqual_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \unsignedLessThen_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \xor_16bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \address_mux.
  Optimizing cells in module \alu_16bit.
  Optimizing cells in module \and_16bit.
  Optimizing cells in module \control_unit.
  Optimizing cells in module \data_mux.
  Optimizing cells in module \immediate_operation.
  Optimizing cells in module \instruction_decoder.
  Optimizing cells in module \internal_register.
  Optimizing cells in module \isEqual_16bit.
  Optimizing cells in module \isNotEqual_16bit.
  Optimizing cells in module \mux4_16bit.
  Optimizing cells in module \or_16bit.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \program_counter_preset.
  Optimizing cells in module \signedGreaterOrEqual_16bit.
  Optimizing cells in module \signedLessThen_16bit.
  Optimizing cells in module \sub_16bit.
  Optimizing cells in module \sum_16bit.
  Optimizing cells in module \uProcessor.
  Optimizing cells in module \unsignedGreaterOrEqual_16bit.
  Optimizing cells in module \unsignedLessThen_16bit.
  Optimizing cells in module \xor_16bit.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\address_mux'.
Finding identical cells in module `\alu_16bit'.
Finding identical cells in module `\and_16bit'.
Finding identical cells in module `\control_unit'.
Finding identical cells in module `\data_mux'.
Finding identical cells in module `\immediate_operation'.
Finding identical cells in module `\instruction_decoder'.
Finding identical cells in module `\internal_register'.
Finding identical cells in module `\isEqual_16bit'.
Finding identical cells in module `\isNotEqual_16bit'.
Finding identical cells in module `\mux4_16bit'.
Finding identical cells in module `\or_16bit'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\program_counter_preset'.
Finding identical cells in module `\signedGreaterOrEqual_16bit'.
Finding identical cells in module `\signedLessThen_16bit'.
Finding identical cells in module `\sub_16bit'.
Finding identical cells in module `\sum_16bit'.
Finding identical cells in module `\uProcessor'.
Finding identical cells in module `\unsignedGreaterOrEqual_16bit'.
Finding identical cells in module `\unsignedLessThen_16bit'.
Finding identical cells in module `\xor_16bit'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \address_mux..
Finding unused cells or wires in module \alu_16bit..
Finding unused cells or wires in module \and_16bit..
Finding unused cells or wires in module \control_unit..
Finding unused cells or wires in module \data_mux..
Finding unused cells or wires in module \immediate_operation..
Finding unused cells or wires in module \instruction_decoder..
Finding unused cells or wires in module \internal_register..
Finding unused cells or wires in module \isEqual_16bit..
Finding unused cells or wires in module \isNotEqual_16bit..
Finding unused cells or wires in module \mux4_16bit..
Finding unused cells or wires in module \or_16bit..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \program_counter_preset..
Finding unused cells or wires in module \signedGreaterOrEqual_16bit..
Finding unused cells or wires in module \signedLessThen_16bit..
Finding unused cells or wires in module \sub_16bit..
Finding unused cells or wires in module \sum_16bit..
Finding unused cells or wires in module \uProcessor..
Finding unused cells or wires in module \unsignedGreaterOrEqual_16bit..
Finding unused cells or wires in module \unsignedLessThen_16bit..
Finding unused cells or wires in module \xor_16bit..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module address_mux.
Optimizing module alu_16bit.
Optimizing module and_16bit.
Optimizing module control_unit.
Optimizing module data_mux.
Optimizing module immediate_operation.
Optimizing module instruction_decoder.
Optimizing module internal_register.
Optimizing module isEqual_16bit.
Optimizing module isNotEqual_16bit.
Optimizing module mux4_16bit.
Optimizing module or_16bit.
Optimizing module program_counter.
Optimizing module program_counter_preset.
Optimizing module signedGreaterOrEqual_16bit.
Optimizing module signedLessThen_16bit.
Optimizing module sub_16bit.
Optimizing module sum_16bit.
Optimizing module uProcessor.
Optimizing module unsignedGreaterOrEqual_16bit.
Optimizing module unsignedLessThen_16bit.
Optimizing module xor_16bit.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\address_mux' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 49 wires to a netlist network with 33 inputs and 16 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       16
ABC RESULTS:           NAND2X1 cells:       16
ABC RESULTS:           OAI21X1 cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       16
Removing temp directory.

6.2. Extracting gate netlist of module `\alu_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 15 gates and 31 wires to a netlist network with 16 inputs and 1 outputs.

6.2.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:            NOR2X1 cells:       10
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        1
Removing temp directory.

6.3. Extracting gate netlist of module `\and_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

6.3.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

6.4. Extracting gate netlist of module `\control_unit' to `<abc-temp-dir>/input.blif'..
Extracted 87 gates and 97 wires to a netlist network with 10 inputs and 13 outputs.

6.4.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        2
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:       11
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:           OAI21X1 cells:        7
ABC RESULTS:        internal signals:       74
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       13
Removing temp directory.

6.5. Extracting gate netlist of module `\data_mux' to `<abc-temp-dir>/input.blif'..
Extracted 35 gates and 88 wires to a netlist network with 53 inputs and 16 outputs.

6.5.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.5.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       35
ABC RESULTS:           NAND2X1 cells:       33
ABC RESULTS:           NAND3X1 cells:       32
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:           OAI21X1 cells:       16
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:       19
ABC RESULTS:           input signals:       53
ABC RESULTS:          output signals:       16
Removing temp directory.

6.6. Extracting gate netlist of module `\immediate_operation' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 25 wires to a netlist network with 9 inputs and 16 outputs.

6.6.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.6.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        8
ABC RESULTS:             INVX1 cells:        8
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:       16
Removing temp directory.

6.7. Extracting gate netlist of module `\instruction_decoder' to `<abc-temp-dir>/input.blif'..
Extracted 45 gates and 85 wires to a netlist network with 40 inputs and 22 outputs.

6.7.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.7.2. Re-integrating ABC results.
ABC RESULTS:           AOI21X1 cells:       22
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           NAND2X1 cells:       38
ABC RESULTS:        internal signals:       23
ABC RESULTS:           input signals:       40
ABC RESULTS:          output signals:       22
Removing temp directory.

6.8. Extracting gate netlist of module `\internal_register' to `<abc-temp-dir>/input.blif'..
Extracted 472 gates and 660 wires to a netlist network with 188 inputs and 160 outputs.

6.8.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.8.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:       96
ABC RESULTS:             INVX1 cells:       24
ABC RESULTS:            MUX2X1 cells:       96
ABC RESULTS:           NAND2X1 cells:       53
ABC RESULTS:           NAND3X1 cells:        1
ABC RESULTS:            NOR2X1 cells:      135
ABC RESULTS:           OAI21X1 cells:      176
ABC RESULTS:           OAI22X1 cells:       64
ABC RESULTS:        internal signals:      312
ABC RESULTS:           input signals:      188
ABC RESULTS:          output signals:      160
Removing temp directory.

6.9. Extracting gate netlist of module `\isEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 63 wires to a netlist network with 32 inputs and 1 outputs.

6.9.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.9.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            NOR2X1 cells:        9
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:            XOR2X1 cells:       12
ABC RESULTS:        internal signals:       30
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.10. Extracting gate netlist of module `\isNotEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 63 wires to a netlist network with 32 inputs and 1 outputs.

6.10.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.10.2. Re-integrating ABC results.
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:           NAND2X1 cells:        9
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:             OR2X2 cells:        4
ABC RESULTS:           XNOR2X1 cells:       12
ABC RESULTS:        internal signals:       30
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.11. Extracting gate netlist of module `\mux4_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 517 gates and 777 wires to a netlist network with 260 inputs and 16 outputs.

6.11.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.11.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       19
ABC RESULTS:           AOI22X1 cells:       16
ABC RESULTS:             INVX1 cells:      116
ABC RESULTS:           NAND2X1 cells:       59
ABC RESULTS:           NAND3X1 cells:      112
ABC RESULTS:            NOR2X1 cells:       54
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:           OAI21X1 cells:       16
ABC RESULTS:           OAI22X1 cells:       48
ABC RESULTS:        internal signals:      501
ABC RESULTS:           input signals:      260
ABC RESULTS:          output signals:       16
Removing temp directory.

6.12. Extracting gate netlist of module `\or_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

6.12.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.12.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

6.13. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 159 gates and 194 wires to a netlist network with 35 inputs and 16 outputs.

6.13.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.13.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:       13
ABC RESULTS:           AOI22X1 cells:       15
ABC RESULTS:             INVX1 cells:       22
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:           NAND3X1 cells:       19
ABC RESULTS:            NOR2X1 cells:        7
ABC RESULTS:            NOR3X1 cells:        6
ABC RESULTS:           OAI21X1 cells:       18
ABC RESULTS:        internal signals:      143
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       16
Removing temp directory.

6.14. Extracting gate netlist of module `\program_counter_preset' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 49 wires to a netlist network with 33 inputs and 16 outputs.

6.14.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.14.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       16
ABC RESULTS:           NAND2X1 cells:       16
ABC RESULTS:           OAI21X1 cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       16
Removing temp directory.

6.15. Extracting gate netlist of module `\signedGreaterOrEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 79 gates and 111 wires to a netlist network with 32 inputs and 1 outputs.

6.15.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.15.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        6
ABC RESULTS:           AOI22X1 cells:        9
ABC RESULTS:             INVX1 cells:       30
ABC RESULTS:           NAND2X1 cells:       23
ABC RESULTS:           NAND3X1 cells:        6
ABC RESULTS:            NOR2X1 cells:        9
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:           OAI21X1 cells:        9
ABC RESULTS:           OAI22X1 cells:        7
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:        internal signals:       78
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.16. Extracting gate netlist of module `\signedLessThen_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 79 gates and 111 wires to a netlist network with 32 inputs and 1 outputs.

6.16.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.16.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           AOI22X1 cells:       10
ABC RESULTS:             INVX1 cells:       27
ABC RESULTS:           NAND2X1 cells:       15
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:            NOR2X1 cells:       10
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        7
ABC RESULTS:           OAI22X1 cells:        5
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           XNOR2X1 cells:        4
ABC RESULTS:        internal signals:       78
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.17. Extracting gate netlist of module `\sub_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 130 wires to a netlist network with 32 inputs and 16 outputs.

6.17.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.17.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        5
ABC RESULTS:           AOI21X1 cells:        9
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:       26
ABC RESULTS:           NAND2X1 cells:       27
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            NOR2X1 cells:       18
ABC RESULTS:           OAI21X1 cells:       16
ABC RESULTS:             OR2X2 cells:        4
ABC RESULTS:           XNOR2X1 cells:       19
ABC RESULTS:            XOR2X1 cells:        7
ABC RESULTS:        internal signals:       82
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

6.18. Extracting gate netlist of module `\sum_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 130 wires to a netlist network with 32 inputs and 16 outputs.

6.18.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.18.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       10
ABC RESULTS:           AOI21X1 cells:       11
ABC RESULTS:             INVX1 cells:       16
ABC RESULTS:           NAND2X1 cells:       19
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            NOR2X1 cells:       33
ABC RESULTS:           OAI21X1 cells:       17
ABC RESULTS:             OR2X2 cells:        4
ABC RESULTS:           XNOR2X1 cells:       12
ABC RESULTS:            XOR2X1 cells:        5
ABC RESULTS:        internal signals:       82
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

6.19. Extracting gate netlist of module `\uProcessor' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.20. Extracting gate netlist of module `\unsignedGreaterOrEqual_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 78 gates and 110 wires to a netlist network with 32 inputs and 1 outputs.

6.20.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.20.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:        7
ABC RESULTS:           AOI22X1 cells:        8
ABC RESULTS:             INVX1 cells:       30
ABC RESULTS:           NAND2X1 cells:       17
ABC RESULTS:           NAND3X1 cells:        6
ABC RESULTS:            NOR2X1 cells:       10
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:        internal signals:       77
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.21. Extracting gate netlist of module `\unsignedLessThen_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 78 gates and 110 wires to a netlist network with 32 inputs and 1 outputs.

6.21.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.21.2. Re-integrating ABC results.
ABC RESULTS:           AOI21X1 cells:        5
ABC RESULTS:           AOI22X1 cells:        5
ABC RESULTS:             INVX1 cells:       30
ABC RESULTS:           NAND2X1 cells:        9
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            NOR2X1 cells:       12
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:       12
ABC RESULTS:           OAI22X1 cells:        8
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:       77
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        1
Removing temp directory.

6.22. Extracting gate netlist of module `\xor_16bit' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 48 wires to a netlist network with 32 inputs and 16 outputs.

6.22.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       16
ABC RESULTS:            NOR2X1 cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Using template control_unit for cells of type control_unit.
Using template instruction_decoder for cells of type instruction_decoder.
Using template immediate_operation for cells of type immediate_operation.
Using template data_mux for cells of type data_mux.
Using template internal_register for cells of type internal_register.
Using template alu_16bit for cells of type alu_16bit.
Using template program_counter_preset for cells of type program_counter_preset.
Using template program_counter for cells of type program_counter.
Using template address_mux for cells of type address_mux.
Using template sum_16bit for cells of type sum_16bit.
Using template xor_16bit for cells of type xor_16bit.
Using template or_16bit for cells of type or_16bit.
Using template and_16bit for cells of type and_16bit.
Using template isEqual_16bit for cells of type isEqual_16bit.
Using template isNotEqual_16bit for cells of type isNotEqual_16bit.
Using template sub_16bit for cells of type sub_16bit.
Using template signedLessThen_16bit for cells of type signedLessThen_16bit.
Using template signedGreaterOrEqual_16bit for cells of type signedGreaterOrEqual_16bit.
Using template unsignedLessThen_16bit for cells of type unsignedLessThen_16bit.
Using template unsignedGreaterOrEqual_16bit for cells of type unsignedGreaterOrEqual_16bit.
Using template mux4_16bit for cells of type mux4_16bit.
<suppressed ~21 debug messages>
No more expansions possible.
Deleting now unused module address_mux.
Deleting now unused module alu_16bit.
Deleting now unused module and_16bit.
Deleting now unused module control_unit.
Deleting now unused module data_mux.
Deleting now unused module immediate_operation.
Deleting now unused module instruction_decoder.
Deleting now unused module internal_register.
Deleting now unused module isEqual_16bit.
Deleting now unused module isNotEqual_16bit.
Deleting now unused module mux4_16bit.
Deleting now unused module or_16bit.
Deleting now unused module program_counter.
Deleting now unused module program_counter_preset.
Deleting now unused module signedGreaterOrEqual_16bit.
Deleting now unused module signedLessThen_16bit.
Deleting now unused module sub_16bit.
Deleting now unused module sum_16bit.
Deleting now unused module unsignedGreaterOrEqual_16bit.
Deleting now unused module unsignedLessThen_16bit.
Deleting now unused module xor_16bit.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 15 unused cells and 3157 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port uProcessor.adrs_bus using BUFX2.
Don't map input port uProcessor.clock: Missing option -inpad.
Don't map input port uProcessor.data_in: Missing option -inpad.
Mapping port uProcessor.data_out using BUFX2.
Mapping port uProcessor.mem_rd using BUFX2.
Mapping port uProcessor.mem_wr using BUFX2.
Don't map input port uProcessor.reset: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uProcessor.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uProcessor'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uProcessor.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uProcessor'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uProcessor..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uProcessor.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uProcessor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uProcessor.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uProcessor'.
Removed a total of 0 cells.

10.13. Executing OPT_RMDFF pass (remove dff with constant values).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uProcessor..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uProcessor.

10.16. Finished OPT passes. (There is nothing left to do.)

11. Executing Verilog backend.
Dumping module `\uProcessor'.

12. Printing statistics.

=== uProcessor ===

   Number of wires:               2128
   Number of wire bits:           2660
   Number of public wires:        2128
   Number of public wire bits:    2660
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2551
     AND2X2                         91
     AOI21X1                       174
     AOI22X1                        67
     BUFX2                          34
     DFFPOSX1                      203
     INVX1                         409
     MUX2X1                         96
     NAND2X1                       343
     NAND3X1                       192
     NOR2X1                        347
     NOR3X1                         16
     OAI21X1                       334
     OAI22X1                       138
     OR2X2                          34
     XNOR2X1                        49
     XOR2X1                         24

End of script. Logfile hash: 037fa9e88d, CPU: user 2.65s system 0.22s, MEM: 25.88 MB peak
Yosys 0.9+2406 (git sha1 02f1c7b9, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 30% 2x write_verilog (0 sec), 13% 21x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Running vlogFanout
vlogFanout -l 200 -c 30 -I uProcessor_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y uProcessor_mapped.v uProcessor_sized.v

vlogFanout for qflow 1.4.76
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 66 (load 2072.21) from node \instruction_decoder_inst_08.rAadrs [0],
driven by DFFPOSX1 with strength 313.624 (fF driven at latency 200)
Top fanout load-to-strength ratio is 16.0543 (latency = 3210.87 ps)
Top input node fanout is 203 (load 8224.71) from node clock.
0 gates exceed specified minimum load.
302 buffers were added.
Warning 1: load of 125.829 is 1.23542 times greater than strongest gate OAI21X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 4: load of 150.711 is 1.37904 times greater than strongest gate XNOR2X1
Warning 10: load of 195.301 is 1.78704 times greater than strongest gate XNOR2X1
Warning 22: load of 467.714 is 4.57501 times greater than strongest gate NAND2X1
Warning 35: load of 1101.61 is 10.1358 times greater than strongest gate NOR2X1
Warning 66: load of 1754.87 is 16.1463 times greater than strongest gate NOR2X1
29 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 2406    	Out: 2377    	-29
	"2" gates	In: 447    	Out: 451    	+4

113 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 2406    	Out: 2377    	-29
	"2" gates	In: 447    	Out: 451    	+4

Number of gates changed: 0
Running vlog2Verilog for antenna cell mapping.
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
   -o uProcessor.v uProcessor_sized.v

Generating RTL verilog and SPICE netlist file in directory
	 /home/rabby/digital_design_lab/lab_04/synthesis
Files:
   Verilog: /home/rabby/digital_design_lab/lab_04/synthesis/uProcessor.rtl.v
   Verilog: /home/rabby/digital_design_lab/lab_04/synthesis/uProcessor.rtlnopwr.v
   Verilog: /home/rabby/digital_design_lab/lab_04/synthesis/uProcessor.rtlbb.v
   Spice:   /home/rabby/digital_design_lab/lab_04/synthesis/uProcessor.spc

Running vlog2Verilog.
vlog2Verilog -c -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
	-o uProcessor.rtl.v
   uProcessor.v
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
	-o uProcessor.rtlnopwr.v
   uProcessor.v
/usr/local/share/qflow/bin/vlog2Verilog -c -p -b -n -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
   -o uProcessor.rtlbb.v
Running vlog2Spice.
vlog2Spice -i -l  /usr/local/share/qflow/tech/osu035/osu035_stdcells.sp -o uProcessor.spc uProcessor.rtl.v
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" uProcessor.spc uProcessor.xspice

Synthesis script ended on Sun Aug 9 18:42:25 CEST 2020
