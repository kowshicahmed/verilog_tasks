Qflow synthesis logfile created on So 12. Jul 18:46:24 CEST 2020
Running yosys for verilog parsing and synthesis
yosys  -s control_unit.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `control_unit.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v' to AST representation.
Generating RTLIL representation for module `\control_unit'.
Note: Assuming pure combinatorial block at /home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:74 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:151 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \control_unit

3.1.2. Analyzing design hierarchy..
Top module:  \control_unit
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:151$5'.
     1/2: $1\opcode_type[2:0]
     2/2: $0\opcode_type[2:0]
Creating decoders for process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
     1/9: $0\decoder_en[0:0]
     2/9: $0\mem_wr[0:0]
     3/9: $0\mem_rd[0:0]
     4/9: $0\adrs_ctrl[0:0]
     5/9: $0\imm_en[0:0]
     6/9: $0\rD_wr[0:0]
     7/9: $0\reg_en[0:0]
     8/9: $0\inst_wr[0:0]
     9/9: $0\pc_op[1:0]
Creating decoders for process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:74$3'.
     1/1: $0\nState[2:0]
Creating decoders for process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:65$1'.
     1/1: $0\cState[2:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\control_unit.\opcode_type' from process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:151$5'.
No latch inferred for signal `\control_unit.\inst_wr' from process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
No latch inferred for signal `\control_unit.\pc_op' from process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
No latch inferred for signal `\control_unit.\reg_en' from process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
No latch inferred for signal `\control_unit.\rD_wr' from process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
No latch inferred for signal `\control_unit.\imm_en' from process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
No latch inferred for signal `\control_unit.\adrs_ctrl' from process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
No latch inferred for signal `\control_unit.\mem_rd' from process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
No latch inferred for signal `\control_unit.\mem_wr' from process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
No latch inferred for signal `\control_unit.\decoder_en' from process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
No latch inferred for signal `\control_unit.\nState' from process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:74$3'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\control_unit.\cState' using process `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:65$1'.
  created $dff cell `$procdff$104' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:151$5'.
Removing empty process `control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:151$5'.
Found and cleaned up 3 empty switches in `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
Removing empty process `control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:90$4'.
Found and cleaned up 2 empty switches in `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:74$3'.
Removing empty process `control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:74$3'.
Found and cleaned up 1 empty switch in `\control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:65$1'.
Removing empty process `control_unit.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:65$1'.
Cleaned up 7 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$procmux$22_CMP0' in module `control_unit' with $logic_not.
Replacing $eq cell `$procmux$55_CMP0' in module `control_unit' with $logic_not.
Replacing $eq cell `$procmux$66_CMP0' in module `control_unit' with $logic_not.
Replacing $eq cell `$procmux$76_CMP0' in module `control_unit' with $logic_not.
Replacing $eq cell `$procmux$90_CMP0' in module `control_unit' with $logic_not.
Replacing $eq cell `$procmux$100_CMP0' in module `control_unit' with $logic_not.
Optimizing away select inverter for $mux cell `$procmux$102' in module `control_unit'.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..
  removing unused `$logic_not' cell `$logic_not$/home/akash/Documents/DigitalLab/verilog_tasks/task_3/source/control_unit.v:66$2'.

3.5. Executing CHECK pass (checking for obvious problems).
checking module control_unit..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
  Cell `$procmux$54_CMP0' is identical to cell `$procmux$45_CMP0'.
    Redirecting output \Y: $procmux$54_CMP = $procmux$45_CMP
    Removing $eq cell `$procmux$54_CMP0' from module `\control_unit'.
  Cell `$procmux$57_CMP0' is identical to cell `$procmux$37_CMP0'.
    Redirecting output \Y: $procmux$57_CMP = $procmux$37_CMP
    Removing $eq cell `$procmux$57_CMP0' from module `\control_unit'.
  Cell `$procmux$64_CMP0' is identical to cell `$procmux$45_CMP0'.
    Redirecting output \Y: $procmux$64_CMP = $procmux$45_CMP
    Removing $eq cell `$procmux$64_CMP0' from module `\control_unit'.
  Cell `$procmux$65_CMP0' is identical to cell `$procmux$35_CMP0'.
    Redirecting output \Y: $procmux$65_CMP = $procmux$35_CMP
    Removing $eq cell `$procmux$65_CMP0' from module `\control_unit'.
  Cell `$procmux$66_CMP0' is identical to cell `$procmux$55_CMP0'.
    Redirecting output \Y: $procmux$66_CMP = $procmux$55_CMP
    Removing $logic_not cell `$procmux$66_CMP0' from module `\control_unit'.
  Cell `$procmux$68_CMP0' is identical to cell `$procmux$37_CMP0'.
    Redirecting output \Y: $procmux$68_CMP = $procmux$37_CMP
    Removing $eq cell `$procmux$68_CMP0' from module `\control_unit'.
  Cell `$procmux$74_CMP0' is identical to cell `$procmux$45_CMP0'.
    Redirecting output \Y: $procmux$74_CMP = $procmux$45_CMP
    Removing $eq cell `$procmux$74_CMP0' from module `\control_unit'.
  Cell `$procmux$75_CMP0' is identical to cell `$procmux$35_CMP0'.
    Redirecting output \Y: $procmux$75_CMP = $procmux$35_CMP
    Removing $eq cell `$procmux$75_CMP0' from module `\control_unit'.
  Cell `$procmux$76_CMP0' is identical to cell `$procmux$55_CMP0'.
    Redirecting output \Y: $procmux$76_CMP = $procmux$55_CMP
    Removing $logic_not cell `$procmux$76_CMP0' from module `\control_unit'.
  Cell `$procmux$77_CMP0' is identical to cell `$procmux$47_CMP0'.
    Redirecting output \Y: $procmux$77_CMP = $procmux$47_CMP
    Removing $eq cell `$procmux$77_CMP0' from module `\control_unit'.
  Cell `$procmux$89_CMP0' is identical to cell `$procmux$83_CMP0'.
    Redirecting output \Y: $procmux$89_CMP = $procmux$83_CMP
    Removing $eq cell `$procmux$89_CMP0' from module `\control_unit'.
  Cell `$procmux$90_CMP0' is identical to cell `$procmux$100_CMP0'.
    Redirecting output \Y: $procmux$90_CMP = $procmux$100_CMP
    Removing $logic_not cell `$procmux$90_CMP0' from module `\control_unit'.
  Cell `$procmux$93_CMP0' is identical to cell `$procmux$37_CMP0'.
    Redirecting output \Y: $procmux$93_CMP = $procmux$37_CMP
    Removing $eq cell `$procmux$93_CMP0' from module `\control_unit'.
  Cell `$procmux$94_CMP0' is identical to cell `$procmux$47_CMP0'.
    Redirecting output \Y: $procmux$94_CMP = $procmux$47_CMP
    Removing $eq cell `$procmux$94_CMP0' from module `\control_unit'.
  Cell `$procmux$95_CMP0' is identical to cell `$procmux$27_CMP0'.
    Redirecting output \Y: $procmux$95_CMP = $procmux$27_CMP
    Removing $eq cell `$procmux$95_CMP0' from module `\control_unit'.
  Cell `$procmux$96_CMP0' is identical to cell `$procmux$83_CMP0'.
    Redirecting output \Y: $procmux$96_CMP = $procmux$83_CMP
    Removing $eq cell `$procmux$96_CMP0' from module `\control_unit'.
Removed a total of 16 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$26 (pure)
    Root of a mux tree: $procmux$36 (pure)
    Root of a mux tree: $procmux$46 (pure)
    Root of a mux tree: $procmux$56 (pure)
    Root of a mux tree: $procmux$102 (pure)
    Root of a mux tree: $procmux$67 (pure)
    Root of a mux tree: $procmux$7 (pure)
    Root of a mux tree: $procmux$82 (pure)
    Root of a mux tree: $procmux$88 (pure)
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$98.
Removed 1 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unit.
    New ctrl vector for $pmux cell $procmux$53: $auto$opt_reduce.cc:132:opt_mux$106
    New ctrl vector for $pmux cell $procmux$63: $auto$opt_reduce.cc:132:opt_mux$108
    New ctrl vector for $pmux cell $procmux$7: { $auto$opt_reduce.cc:132:opt_mux$110 $procmux$11_CMP $procmux$10_CMP $procmux$9_CMP $procmux$8_CMP }
    New ctrl vector for $pmux cell $procmux$73: $auto$opt_reduce.cc:132:opt_mux$112
    New ctrl vector for $pmux cell $procmux$92: { $procmux$83_CMP $procmux$27_CMP $procmux$47_CMP $auto$opt_reduce.cc:132:opt_mux$114 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$105: { $procmux$45_CMP $procmux$55_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$107: { $procmux$35_CMP $procmux$45_CMP $procmux$55_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$109: { $procmux$12_CMP $procmux$13_CMP $procmux$14_CMP $procmux$15_CMP $procmux$16_CMP $procmux$17_CMP $procmux$18_CMP $procmux$19_CMP $procmux$20_CMP $procmux$21_CMP $procmux$22_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$111: { $procmux$35_CMP $procmux$45_CMP $procmux$55_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$113: { $procmux$37_CMP $procmux$100_CMP }
  Optimizing cells in module \control_unit.
Performed a total of 10 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$107' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$111'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$108 = $auto$opt_reduce.cc:132:opt_mux$112
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$107' from module `\control_unit'.
  Cell `$procmux$73' is identical to cell `$procmux$63'.
    Redirecting output \Y: $procmux$73_Y = $procmux$63_Y
    Removing $mux cell `$procmux$73' from module `\control_unit'.
Removed a total of 2 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$102 (pure)
    Root of a mux tree: $procmux$26 (pure)
    Root of a mux tree: $procmux$36 (pure)
    Root of a mux tree: $procmux$46 (pure)
    Root of a mux tree: $procmux$56 (pure)
    Root of a mux tree: $procmux$67 (pure)
    Root of a mux tree: $procmux$7 (pure)
    Root of a mux tree: $procmux$82 (pure)
    Root of a mux tree: $procmux$88 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unit.
    New ctrl vector for $pmux cell $procmux$67: $auto$opt_reduce.cc:132:opt_mux$116
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$115: { $procmux$37_CMP $procmux$47_CMP }
  Optimizing cells in module \control_unit.
Performed a total of 2 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$102 (pure)
    Root of a mux tree: $procmux$26 (pure)
    Root of a mux tree: $procmux$36 (pure)
    Root of a mux tree: $procmux$46 (pure)
    Root of a mux tree: $procmux$56 (pure)
    Root of a mux tree: $procmux$67 (pure)
    Root of a mux tree: $procmux$7 (pure)
    Root of a mux tree: $procmux$82 (pure)
    Root of a mux tree: $procmux$88 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unit.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

3.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.6.22. Executing OPT_EXPR pass (perform const folding).

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$8_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell control_unit.$procmux$9_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell control_unit.$procmux$10_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell control_unit.$procmux$11_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$18_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$19_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell control_unit.$procmux$20_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unit.$procmux$27_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell control_unit.$procmux$35_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unit.$procmux$45_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unit.$procmux$47_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell control_unit.$procmux$83_CMP0 ($eq).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module control_unit:
  created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$102 (pure)
    Root of a mux tree: $procmux$26 (pure)
    Root of a mux tree: $procmux$36 (pure)
    Root of a mux tree: $procmux$46 (pure)
    Root of a mux tree: $procmux$56 (pure)
    Root of a mux tree: $procmux$67 (pure)
    Root of a mux tree: $procmux$7 (pure)
    Root of a mux tree: $procmux$82 (pure)
    Root of a mux tree: $procmux$88 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unit.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register control_unit.cState.

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\cState' from module `\control_unit'.
  found $dff cell for state register: $procdff$104
  root of input selection tree: $0\cState[2:0]
  found reset state: 3'000 (guessed from mux tree)
  found ctrl input: \reset
  found state code: 3'000
  found ctrl input: $auto$opt_reduce.cc:132:opt_mux$114
  found ctrl input: $procmux$47_CMP
  found ctrl input: $procmux$27_CMP
  found ctrl input: $procmux$83_CMP
  found state code: 3'001
  found state code: 3'110
  found state code: 3'010
  found state code: 3'011
  found ctrl output: $procmux$27_CMP
  found ctrl output: $procmux$37_CMP
  found ctrl output: $procmux$47_CMP
  found ctrl output: $procmux$83_CMP
  found ctrl output: $procmux$100_CMP
  ctrl inputs: { $auto$opt_reduce.cc:132:opt_mux$114 \reset }
  ctrl outputs: { $procmux$100_CMP $procmux$83_CMP $procmux$47_CMP $procmux$37_CMP $procmux$27_CMP $0\cState[2:0] }
  transition:      3'000 2'-0 ->      3'000 8'10000000
  transition:      3'000 2'-1 ->      3'001 8'10000001
  transition:      3'010 2'-0 ->      3'000 8'00100000
  transition:      3'010 2'-1 ->      3'110 8'00100110
  transition:      3'110 2'-0 ->      3'000 8'00010000
  transition:      3'110 2'-1 ->      3'001 8'00010001
  transition:      3'001 2'-0 ->      3'000 8'01000000
  transition:      3'001 2'-1 ->      3'011 8'01000011
  transition:      3'011 2'-0 ->      3'000 8'00001000
  transition:      3'011 2'-1 ->      3'010 8'00001010

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\cState$117' from module `\control_unit'.
  Removing unused input signal $auto$opt_reduce.cc:132:opt_mux$114.

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..
  removing unused `$eq' cell `$procmux$27_CMP0'.
  removing unused `$eq' cell `$procmux$37_CMP0'.
  removing unused `$eq' cell `$procmux$47_CMP0'.
  removing unused `$reduce_or' cell `$auto$opt_reduce.cc:126:opt_mux$113'.
  removing unused `$eq' cell `$procmux$83_CMP0'.
  removing unused `$pmux' cell `$procmux$92'.
  removing unused `$logic_not' cell `$procmux$100_CMP0'.
  removing unused `$mux' cell `$procmux$102'.
  removing unused `$dff' cell `$procdff$104'.
  removing unused non-port wire \nState.
  removed 1 unused temporary wires.

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\cState$117' from module `\control_unit'.
  Removing unused output signal $0\cState[2:0] [0].
  Removing unused output signal $0\cState[2:0] [1].
  Removing unused output signal $0\cState[2:0] [2].

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\cState$117' from module `\control_unit' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000 -> ----1
  010 -> ---1-
  110 -> --1--
  001 -> -1---
  011 -> 1----

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\cState$117' from module `\control_unit':
-------------------------------------

  Information on FSM $fsm$\cState$117 (\cState):

  Number of input signals:    1
  Number of output signals:   5
  Number of state bits:       5

  Input signals:
    0: \reset

  Output signals:
    0: $procmux$27_CMP
    1: $procmux$37_CMP
    2: $procmux$47_CMP
    3: $procmux$83_CMP
    4: $procmux$100_CMP

  State encoding:
    0:    5'----1  <RESET STATE>
    1:    5'---1-
    2:    5'--1--
    3:    5'-1---
    4:    5'1----

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 1'0   ->     0 5'10000
      1:     0 1'1   ->     3 5'10000
      2:     1 1'0   ->     0 5'00100
      3:     1 1'1   ->     2 5'00100
      4:     2 1'0   ->     0 5'00010
      5:     2 1'1   ->     3 5'00010
      6:     3 1'0   ->     0 5'01000
      7:     3 1'1   ->     4 5'01000
      8:     4 1'0   ->     0 5'00001
      9:     4 1'1   ->     1 5'00001

-------------------------------------

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\cState$117' from module `\control_unit'.

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$auto$fsm_map.cc:77:implement_pattern_cache$145' (1) in module `\control_unit' with constant driver `$auto$fsm_map.cc:74:implement_pattern_cache$144 = \reset'.
Replacing $eq cell `$auto$fsm_map.cc:77:implement_pattern_cache$139' (1) in module `\control_unit' with constant driver `$auto$fsm_map.cc:74:implement_pattern_cache$138 = \reset'.
Replacing $eq cell `$auto$fsm_map.cc:77:implement_pattern_cache$131' (1) in module `\control_unit' with constant driver `$auto$fsm_map.cc:74:implement_pattern_cache$130 = \reset'.
Replacing $eq cell `$auto$fsm_map.cc:77:implement_pattern_cache$135' (1) in module `\control_unit' with constant driver `$auto$fsm_map.cc:74:implement_pattern_cache$134 = \reset'.
Replacing $eq cell `$auto$fsm_map.cc:77:implement_pattern_cache$129' in module `control_unit' with inverter.

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$26' (mux_bool) in module `\control_unit' with constant driver `\decoder_en = \cState [4]'.
Replacing $mux cell `$procmux$34' (mux_bool) in module `\control_unit' with constant driver `$procmux$34_Y = $procmux$35_CMP'.
Replacing $mux cell `$procmux$44' (mux_bool) in module `\control_unit' with constant driver `$procmux$44_Y = $procmux$45_CMP'.
Replacing $mux cell `$procmux$53' (mux_bool) in module `\control_unit' with constant driver `$procmux$53_Y = $auto$opt_reduce.cc:132:opt_mux$106'.
Replacing $mux cell `$procmux$63' (mux_bool) in module `\control_unit' with constant driver `$procmux$63_Y = $auto$opt_reduce.cc:132:opt_mux$108'.
Replacing $mux cell `$procmux$82' (mux_bool) in module `\control_unit' with constant driver `\inst_wr = \cState [3]'.
Replacing $mux cell `$procmux$36' in module `control_unit' with and-gate.
Replacing $mux cell `$procmux$46' in module `control_unit' with and-gate.
Replacing $mux cell `$procmux$56' in module `control_unit' with and-gate.
Replacing $mux cell `$procmux$67' in module `control_unit' with and-gate.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$7 (pure)
    Root of a mux tree: $procmux$88 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unit.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$115: { \cState [1] \cState [2] }
    New input vector for $reduce_or cell $auto$fsm_map.cc:105:implement_pattern_cache$141: { \cState [0] \cState [2] }
  Optimizing cells in module \control_unit.
Performed a total of 2 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$7 (pure)
    Root of a mux tree: $procmux$88 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unit.
Performed a total of 0 changes.

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

3.17.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.17.15. Executing OPT_EXPR pass (perform const folding).

3.17.16. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping control_unit.$auto$fsm_map.cc:121:implement_pattern_cache$147 ($and) with simplemap.
Mapping control_unit.$procmux$8_CMP0 ($eq) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 3
Parameter \S_WIDTH = 5
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=3\S_WIDTH=5'.

3.18.3. Continuing TECHMAP pass.
Mapping control_unit.$procmux$7 using $paramod\_90_pmux\WIDTH=3\S_WIDTH=5.
Mapping control_unit.$procmux$9_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$10_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$11_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$12_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$13_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$14_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$15_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$16_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$17_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$18_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$19_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$20_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$21_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$22_CMP0 ($logic_not) with simplemap.
Mapping control_unit.$procmux$35_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$36 ($and) with simplemap.
Mapping control_unit.$procmux$45_CMP0 ($eq) with simplemap.
Mapping control_unit.$procmux$46 ($and) with simplemap.
Mapping control_unit.$procmux$55_CMP0 ($logic_not) with simplemap.
Mapping control_unit.$procmux$56 ($and) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:121:implement_pattern_cache$143 ($and) with simplemap.
Mapping control_unit.$procmux$67 ($and) with simplemap.
Mapping control_unit.$auto$opt_reduce.cc:126:opt_mux$115 ($reduce_or) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:105:implement_pattern_cache$141 ($reduce_or) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:121:implement_pattern_cache$137 ($and) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 2
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=2\S_WIDTH=2'.

3.18.5. Continuing TECHMAP pass.
Mapping control_unit.$procmux$88 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=2.
Mapping control_unit.$auto$opt_reduce.cc:126:opt_mux$111 ($reduce_or) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:77:implement_pattern_cache$129 ($not) with simplemap.
Mapping control_unit.$auto$opt_reduce.cc:126:opt_mux$109 ($reduce_or) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:172:map_fsm$125 ($dff) with simplemap.
Mapping control_unit.$auto$opt_reduce.cc:126:opt_mux$105 ($reduce_or) with simplemap.
Mapping control_unit.$auto$fsm_map.cc:121:implement_pattern_cache$133 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$7.$reduce_or$<techmap.v>:441$216 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$7.$reduce_or$<techmap.v>:441$217 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$7.$reduce_or$<techmap.v>:441$215 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$7.$and$<techmap.v>:434$214 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$7.$and$<techmap.v>:434$213 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$7.$and$<techmap.v>:434$212 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$7.$and$<techmap.v>:434$211 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$7.$and$<techmap.v>:434$210 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$7.$ternary$<techmap.v>:445$209 ($mux) with simplemap.
Mapping control_unit.$techmap$procmux$7.$reduce_or$<techmap.v>:445$208 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$88.$reduce_or$<techmap.v>:441$464 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$88.$reduce_or$<techmap.v>:441$465 ($reduce_or) with simplemap.
Mapping control_unit.$techmap$procmux$88.$and$<techmap.v>:434$463 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$88.$and$<techmap.v>:434$462 ($and) with simplemap.
Mapping control_unit.$techmap$procmux$88.$ternary$<techmap.v>:445$461 ($mux) with simplemap.
Mapping control_unit.$techmap$procmux$88.$reduce_or$<techmap.v>:445$460 ($reduce_or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$196' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$193 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$198' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$193 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$222' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$218 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$223' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$218 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$235' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$233 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$237' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$233 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$238' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$233 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$251' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$248 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$252' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$248 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$253' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$248 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$280' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$278 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$296' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$293 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$310' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$308 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$311' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$308 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$326' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$323 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$327' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$323 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$340' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$338 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$341' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$338 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$342' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$338 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$358' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$353 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$370' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$368 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$371' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$368 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$373' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$368 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$385' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$383 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$388' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$383 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$400' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$398 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$402' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$398 [2] = \opcode [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$523' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$211_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$526' (1?) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$210_Y [0] = $procmux$8_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$508' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$507 [0] = $procmux$8_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$517' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$213_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$520' (1?) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$212_Y [0] = $procmux$10_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$509' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$507 [1] = $procmux$10_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$514' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$214_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$513' (?0) in module `\control_unit' with constant driver `$techmap$procmux$7.$reduce_or$<techmap.v>:441$215_Y = $auto$simplemap.cc:127:simplemap_reduce$510'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$524' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$211_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$527' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$210_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$494' (00) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$493 [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$518' (1?) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$213_Y [1] = $procmux$11_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$521' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$212_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$495' (0?) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$493 [1] = $procmux$11_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$497' (0?) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$496 = $procmux$11_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$515' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$214_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$499' (?0) in module `\control_unit' with constant driver `$techmap$procmux$7.$reduce_or$<techmap.v>:441$216_Y = $procmux$11_CMP'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$422' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$419 [1] = $techmap$procmux$7.$ternary$<techmap.v>:445$209_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$525' (1?) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$211_Y [2] = $procmux$9_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$528' (1?) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$210_Y [2] = $procmux$8_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$519' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$213_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$522' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$212_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$502' (00) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$500 [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$504' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$503 = $auto$simplemap.cc:127:simplemap_reduce$500 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$516' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$7.$and$<techmap.v>:434$214_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$506' (?0) in module `\control_unit' with constant driver `$techmap$procmux$7.$reduce_or$<techmap.v>:441$217_Y = $auto$simplemap.cc:127:simplemap_reduce$500 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$423' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$419 [2] = $techmap$procmux$7.$ternary$<techmap.v>:445$209_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$435' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$433 [0] = $techmap$procmux$7.$ternary$<techmap.v>:445$209_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$437' (?0) in module `\control_unit' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$433 [2] = $techmap$procmux$7.$ternary$<techmap.v>:445$209_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$543' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$88.$and$<techmap.v>:434$463_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$545' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$88.$and$<techmap.v>:434$462_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$540' (00) in module `\control_unit' with constant driver `$techmap$procmux$88.$reduce_or$<techmap.v>:441$464_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$544' (const_and) in module `\control_unit' with constant driver `$techmap$procmux$88.$and$<techmap.v>:434$463_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$546' (1?) in module `\control_unit' with constant driver `$techmap$procmux$88.$and$<techmap.v>:434$462_Y [1] = \cState [3]'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$542' (?0) in module `\control_unit' with constant driver `$techmap$procmux$88.$reduce_or$<techmap.v>:441$465_Y = \cState [3]'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$386' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$383 [1] = $auto$simplemap.cc:250:simplemap_eqne$398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$386' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$372' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$387'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$368 [2] = $auto$simplemap.cc:250:simplemap_eqne$383 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$372' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$357' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$387'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$353 [2] = $auto$simplemap.cc:250:simplemap_eqne$383 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$357' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$356' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$353 [1] = $auto$simplemap.cc:250:simplemap_eqne$398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$356' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$347' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$377'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$346 [0] = $auto$simplemap.cc:127:simplemap_reduce$376 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$347' from module `\control_unit'.
  Cell `$auto$simplemap.cc:177:logic_reduce$414' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$377'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$413 [0] = $auto$simplemap.cc:127:simplemap_reduce$376 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$414' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$343' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$403'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$338 [3] = $auto$simplemap.cc:250:simplemap_eqne$398 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$343' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$325' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$355'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$323 [0] = $auto$simplemap.cc:250:simplemap_eqne$353 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$325' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$328' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$403'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$323 [3] = $auto$simplemap.cc:250:simplemap_eqne$398 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$328' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$317' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$377'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$316 [0] = $auto$simplemap.cc:127:simplemap_reduce$376 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$317' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$312' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$387'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$308 [2] = $auto$simplemap.cc:250:simplemap_eqne$383 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$312' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$313' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$403'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$308 [3] = $auto$simplemap.cc:250:simplemap_eqne$398 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$313' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$297' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$387'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$293 [2] = $auto$simplemap.cc:250:simplemap_eqne$383 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$297' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$295' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$355'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$293 [0] = $auto$simplemap.cc:250:simplemap_eqne$353 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$295' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$298' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$403'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$293 [3] = $auto$simplemap.cc:250:simplemap_eqne$398 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$298' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$282' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$387'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$278 [2] = $auto$simplemap.cc:250:simplemap_eqne$383 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$282' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$281' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$278 [1] = $auto$simplemap.cc:250:simplemap_eqne$398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$281' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$283' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$403'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$278 [3] = $auto$simplemap.cc:250:simplemap_eqne$398 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$283' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$267' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$387'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$263 [2] = $auto$simplemap.cc:250:simplemap_eqne$383 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$267' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$266' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$263 [1] = $auto$simplemap.cc:250:simplemap_eqne$398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$266' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$265' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$355'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$263 [0] = $auto$simplemap.cc:250:simplemap_eqne$353 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$265' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$268' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$403'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$263 [3] = $auto$simplemap.cc:250:simplemap_eqne$398 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$268' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$250' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$355'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$248 [0] = $auto$simplemap.cc:250:simplemap_eqne$353 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$250' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$243' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$258'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$241 [1] = $auto$simplemap.cc:127:simplemap_reduce$256 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$243' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$533' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$501'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$532 [0] = $auto$simplemap.cc:127:simplemap_reduce$500 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$533' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$236' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$233 [1] = $auto$simplemap.cc:250:simplemap_eqne$398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$236' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$228' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$258'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$226 [1] = $auto$simplemap.cc:127:simplemap_reduce$256 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$228' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$221' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$218 [1] = $auto$simplemap.cc:250:simplemap_eqne$398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$221' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$220' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$355'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$218 [0] = $auto$simplemap.cc:250:simplemap_eqne$353 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$220' from module `\control_unit'.
  Cell `$auto$simplemap.cc:177:logic_reduce$415' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$258'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$413 [1] = $auto$simplemap.cc:127:simplemap_reduce$256 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$415' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$197' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$387'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$193 [2] = $auto$simplemap.cc:250:simplemap_eqne$383 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$197' from module `\control_unit'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$195' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$355'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$193 [0] = $auto$simplemap.cc:250:simplemap_eqne$353 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$195' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$491' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$467'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$106 = $auto$simplemap.cc:127:simplemap_reduce$466
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$491' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$407' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$392'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$406 [0] = $auto$simplemap.cc:127:simplemap_reduce$391 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$407' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$303' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$318'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$301 [1] = $auto$simplemap.cc:127:simplemap_reduce$316 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$303' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$302' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$332'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$301 [0] = $auto$simplemap.cc:127:simplemap_reduce$331 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$302' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$378' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$393'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$376 [1] = $auto$simplemap.cc:127:simplemap_reduce$391 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$378' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$288' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$318'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$286 [1] = $auto$simplemap.cc:127:simplemap_reduce$316 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$288' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$287' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$392'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$286 [0] = $auto$simplemap.cc:127:simplemap_reduce$391 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$287' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$273' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$318'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$271 [1] = $auto$simplemap.cc:127:simplemap_reduce$316 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$273' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$363' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$393'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$361 [1] = $auto$simplemap.cc:127:simplemap_reduce$391 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$363' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$362' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$272'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$361 [0] = $auto$simplemap.cc:127:simplemap_reduce$271 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$362' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$257' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$332'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$256 [0] = $auto$simplemap.cc:127:simplemap_reduce$331 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$257' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$242' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$392'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$241 [0] = $auto$simplemap.cc:127:simplemap_reduce$391 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$242' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$227' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$272'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$226 [0] = $auto$simplemap.cc:127:simplemap_reduce$271 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$227' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$348' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$333'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$346 [1] = $auto$simplemap.cc:127:simplemap_reduce$331 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$348' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$408' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$333'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$406 [1] = $auto$simplemap.cc:127:simplemap_reduce$331 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$408' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$203' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$393'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$201 [1] = $auto$simplemap.cc:127:simplemap_reduce$391 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$203' from module `\control_unit'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$202' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$332'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$201 [0] = $auto$simplemap.cc:127:simplemap_reduce$331 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$202' from module `\control_unit'.
Removed a total of 49 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\control_unit' to `<abc-temp-dir>/input.blif'..
Extracted 87 gates and 98 wires to a netlist network with 10 inputs and 11 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       17
ABC RESULTS:              AOI3 cells:        4
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               NOT cells:        5
ABC RESULTS:              OAI3 cells:        4
ABC RESULTS:              OAI4 cells:        3
ABC RESULTS:                OR cells:       13
ABC RESULTS:        internal signals:       77
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       11
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..
  removing unused non-port wire \opcode_type.
  removed 1 unused temporary wires.

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \control_unit

3.22.2. Analyzing design hierarchy..
Top module:  \control_unit
Removed 0 unused modules.

3.23. Printing statistics.

=== control_unit ===

   Number of wires:                 64
   Number of wire bits:             72
   Number of public wires:          14
   Number of public wire bits:      22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 61
     $_AND_                         17
     $_AOI3_                         4
     $_AOI4_                         2
     $_DFF_P_                        5
     $_NAND_                         4
     $_NOR_                          4
     $_NOT_                          5
     $_OAI3_                         4
     $_OAI4_                         3
     $_OR_                          13

3.24. Executing CHECK pass (checking for obvious problems).
checking module control_unit..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\control_unit':
  mapped 5 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unit.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\control_unit' to `<abc-temp-dir>/input.blif'..
Extracted 56 gates and 66 wires to a netlist network with 10 inputs and 11 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:             INVX1 cells:        8
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:            NOR2X1 cells:        6
ABC RESULTS:           OAI21X1 cells:        2
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:       45
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       11
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 66 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port control_unit.adrs_ctrl using BUFX2.
Don't map input port control_unit.clock: Missing option -inpad.
Mapping port control_unit.decoder_en using BUFX2.
Don't map input port control_unit.flag: Missing option -inpad.
Mapping port control_unit.imm_en using BUFX2.
Mapping port control_unit.inst_wr using BUFX2.
Mapping port control_unit.mem_rd using BUFX2.
Mapping port control_unit.mem_wr using BUFX2.
Don't map input port control_unit.opcode: Missing option -inpad.
Mapping port control_unit.pc_op using BUFX2.
Mapping port control_unit.rD_wr using BUFX2.
Mapping port control_unit.reg_en using BUFX2.
Don't map input port control_unit.reset: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unit.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unit'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unit..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing Verilog backend.
Dumping module `\control_unit'.

11. Printing statistics.

=== control_unit ===

   Number of wires:                 42
   Number of wire bits:             51
   Number of public wires:          42
   Number of public wire bits:      51
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 42
     AND2X2                          3
     AOI21X1                         1
     BUFX2                          10
     DFFPOSX1                        5
     INVX1                           8
     NAND2X1                         5
     NOR2X1                          6
     OAI21X1                         2
     OAI22X1                         1
     OR2X2                           1

End of script. Logfile hash: 5c550a0f4d
CPU: user 0.33s system 0.01s, MEM: 36.88 MB total, 9.99 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 15% 1x share (0 sec), 13% 18x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Running vlogFanout
vlogFanout -l 200 -c 30 -I control_unit_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y control_unit_mapped.v control_unit_sized.v

vlogFanout for qflow 1.4.79
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 4 (load 304.53) from node cState[2],
driven by DFFPOSX1 with strength 313.624 (fF driven at latency 200)
Top fanout load-to-strength ratio is 1.11254 (latency = 222.507 ps)
Top input node fanout is 5 (load 202.579) from node clock.
0 gates exceed specified minimum load.
0 buffers were added.
Warning 1: load of 241.222 is 1.16065 times greater than strongest gate OR2X2
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 28    	Out: 28    	+0
	"2" gates	In: 14    	Out: 14    	+0

Number of gates changed: 0
Running vlog2Verilog for antenna cell mapping.
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
   -o control_unit.v control_unit_sized.v

Generating RTL verilog and SPICE netlist file in directory
	 /home/akash/Documents/DigitalLab/verilog_tasks/task_3/synthesis
Files:
   Verilog: /home/akash/Documents/DigitalLab/verilog_tasks/task_3/synthesis/control_unit.rtl.v
   Verilog: /home/akash/Documents/DigitalLab/verilog_tasks/task_3/synthesis/control_unit.rtlnopwr.v
   Verilog: /home/akash/Documents/DigitalLab/verilog_tasks/task_3/synthesis/control_unit.rtlbb.v
   Spice:   /home/akash/Documents/DigitalLab/verilog_tasks/task_3/synthesis/control_unit.spc

Running vlog2Verilog.
vlog2Verilog -c -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
	-o control_unit.rtl.v
   control_unit.v
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
	-o control_unit.rtlnopwr.v
   control_unit.v
/usr/local/share/qflow/bin/vlog2Verilog -c -p -b -n -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
   -o control_unit.rtlbb.v
Running vlog2Spice.
vlog2Spice -i -l  /usr/local/share/qflow/tech/osu035/osu035_stdcells.sp -o control_unit.spc control_unit.rtl.v
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" control_unit.spc control_unit.xspice

Synthesis script ended on So 12. Jul 18:46:25 CEST 2020
