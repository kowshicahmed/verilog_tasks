Qflow synthesis logfile created on Mo 8. Jun 17:05:40 CEST 2020
Running yosys for verilog parsing and synthesis
yosys  -s program_counter.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `program_counter.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v' to AST representation.
Generating RTLIL representation for module `\program_counter'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \program_counter

3.1.2. Analyzing design hierarchy..
Top module:  \program_counter
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:19$1 in module program_counter.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\program_counter.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:17$3'.
  Set init value: \pre_pc = 16'0000000000000000

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\program_counter.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:17$3'.
     1/1: $1\pre_pc[15:0]
Creating decoders for process `\program_counter.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:19$1'.
     1/2: $0\pc_out[15:0]
     2/2: $0\pre_pc[15:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\program_counter.\pc_out' using process `\program_counter.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:19$1'.
  created $dff cell `$procdff$12' with positive edge clock.
Creating register for signal `\program_counter.\pre_pc' using process `\program_counter.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:19$1'.
  created $dff cell `$procdff$13' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `program_counter.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:17$3'.
Found and cleaned up 1 empty switch in `\program_counter.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:19$1'.
Removing empty process `program_counter.$proc$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:19$1'.
Cleaned up 1 empty switch.

3.3. Executing OPT_EXPR pass (perform const folding).

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.5. Executing CHECK pass (checking for obvious problems).
checking module program_counter..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
  Cell `$procmux$6_CMP0' is identical to cell `$procmux$10_CMP0'.
    Redirecting output \Y: $procmux$6_CMP = $procmux$10_CMP
    Removing $eq cell `$procmux$6_CMP0' from module `\program_counter'.
  Cell `$procmux$7_CMP0' is identical to cell `$procmux$11_CMP0'.
    Redirecting output \Y: $procmux$7_CMP = $procmux$11_CMP
    Removing $eq cell `$procmux$7_CMP0' from module `\program_counter'.
Removed a total of 2 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$4 (pure)
    Root of a mux tree: $procmux$9 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
    New ctrl vector for $pmux cell $procmux$9: $auto$opt_reduce.cc:132:opt_mux$15
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$14: { $procmux$10_CMP $procmux$11_CMP }
  Optimizing cells in module \program_counter.
Performed a total of 2 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$4 (pure)
    Root of a mux tree: $procmux$9 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 15 bits (of 16) from port B of cell program_counter.$add$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:35$2 ($add).
Removed top 1 bits (of 2) from port B of cell program_counter.$procmux$11_CMP0 ($eq).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module program_counter:
  creating $macc model for $add$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:35$2 ($add).
  creating $alu model for $macc $add$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:35$2.
  creating $alu cell for $add$/home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/source/program_counter.v:35$2: $auto$alumacc.cc:470:replace_alu$16
  created 1 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$4 (pure)
    Root of a mux tree: $procmux$9 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$4 (pure)
    Root of a mux tree: $procmux$9 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping program_counter.$procmux$5_CMP0 ($eq) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 16
Parameter \Y_WIDTH = 16
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16'.

3.18.3. Continuing TECHMAP pass.
Mapping program_counter.$auto$alumacc.cc:470:replace_alu$16 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 16
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=16\S_WIDTH=3'.

3.18.5. Continuing TECHMAP pass.
Mapping program_counter.$procmux$4 using $paramod\_90_pmux\WIDTH=16\S_WIDTH=3.
Mapping program_counter.$auto$opt_reduce.cc:126:opt_mux$14 ($reduce_or) with simplemap.
Mapping program_counter.$procmux$10_CMP0 ($eq) with simplemap.
Mapping program_counter.$procmux$9 ($mux) with simplemap.
Mapping program_counter.$procmux$11_CMP0 ($eq) with simplemap.
Mapping program_counter.$procdff$12 ($dff) with simplemap.
Mapping program_counter.$procdff$13 ($dff) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76 ($xor) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:263$77 ($xor) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75 ($and) with simplemap.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 16
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=16'.

3.18.7. Executing PROC pass (convert processes to netlists).

3.18.7.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.7.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.7.3. Executing PROC_INIT pass (extract init attributes).

3.18.7.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.7.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=16.$proc$<techmap.v>:207$252'.
     1/32: $0\p[15:0] [14]
     2/32: $0\g[15:0] [14]
     3/32: $0\p[15:0] [12]
     4/32: $0\g[15:0] [12]
     5/32: $0\p[15:0] [10]
     6/32: $0\g[15:0] [10]
     7/32: $0\p[15:0] [8]
     8/32: $0\g[15:0] [8]
     9/32: $0\p[15:0] [6]
    10/32: $0\g[15:0] [6]
    11/32: $0\p[15:0] [4]
    12/32: $0\g[15:0] [4]
    13/32: $0\p[15:0] [2]
    14/32: $0\g[15:0] [2]
    15/32: $0\p[15:0] [13]
    16/32: $0\g[15:0] [13]
    17/32: $0\p[15:0] [9]
    18/32: $0\g[15:0] [9]
    19/32: $0\p[15:0] [5]
    20/32: $0\g[15:0] [5]
    21/32: $0\p[15:0] [11]
    22/32: $0\g[15:0] [11]
    23/32: $0\p[15:0] [15]
    24/32: $0\g[15:0] [15]
    25/32: $0\p[15:0] [7]
    26/32: $0\g[15:0] [7]
    27/32: $0\p[15:0] [3]
    28/32: $0\g[15:0] [3]
    29/32: $0\p[15:0] [1]
    30/32: $0\g[15:0] [1]
    31/32: $0\g[15:0] [0]
    32/32: $0\p[15:0] [0]

3.18.7.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=16.\p' from process `$paramod\_90_lcu\WIDTH=16.$proc$<techmap.v>:207$252'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=16.\g' from process `$paramod\_90_lcu\WIDTH=16.$proc$<techmap.v>:207$252'.

3.18.7.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.7.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=16.$proc$<techmap.v>:207$252'.
Cleaned up 0 empty switches.

3.18.8. Executing OPT pass (performing simple optimizations).

3.18.8.1. Executing OPT_EXPR pass (perform const folding).

3.18.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=16'.
Removed a total of 0 cells.

3.18.8.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=16..
  removing unused `$and' cell `$and$<techmap.v>:222$257'.
  removing unused `$and' cell `$and$<techmap.v>:222$281'.
  removing unused `$and' cell `$and$<techmap.v>:222$293'.
  removing unused `$and' cell `$and$<techmap.v>:222$299'.
  removing unused `$and' cell `$and$<techmap.v>:230$302'.
  removing unused `$and' cell `$and$<techmap.v>:230$305'.
  removing unused `$and' cell `$and$<techmap.v>:230$308'.
  removing unused `$and' cell `$and$<techmap.v>:230$311'.
  removing unused `$and' cell `$and$<techmap.v>:230$314'.
  removing unused `$and' cell `$and$<techmap.v>:230$317'.
  removing unused `$and' cell `$and$<techmap.v>:230$320'.
  removing unused `$and' cell `$and$<techmap.v>:230$323'.
  removing unused `$and' cell `$and$<techmap.v>:230$326'.
  removing unused `$and' cell `$and$<techmap.v>:230$329'.
  removing unused `$and' cell `$and$<techmap.v>:230$332'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.8.5. Finished fast OPT passes.

3.18.9. Continuing TECHMAP pass.
Mapping program_counter.$auto$alumacc.cc:470:replace_alu$16.lcu using $paramod\_90_lcu\WIDTH=16.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74 ($mux) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.$not$<techmap.v>:258$73 ($not) with simplemap.
Mapping program_counter.$auto$alumacc.cc:470:replace_alu$16.B_conv ($pos) with simplemap.
Mapping program_counter.$auto$alumacc.cc:470:replace_alu$16.A_conv ($pos) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$97 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$98 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$96 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$95 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$94 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$93 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$92 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$91 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$90 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$89 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$88 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$87 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$86 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$85 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$84 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:441$83 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$procmux$4.$and$<techmap.v>:434$82 ($and) with simplemap.
Mapping program_counter.$techmap$procmux$4.$and$<techmap.v>:434$81 ($and) with simplemap.
Mapping program_counter.$techmap$procmux$4.$and$<techmap.v>:434$80 ($and) with simplemap.
Mapping program_counter.$techmap$procmux$4.$ternary$<techmap.v>:445$79 ($mux) with simplemap.
Mapping program_counter.$techmap$procmux$4.$reduce_or$<techmap.v>:445$78 ($reduce_or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:212$253 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$255 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$258 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$261 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$264 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$267 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$270 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$273 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$276 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$279 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$282 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$285 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$288 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$291 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$294 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$297 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:222$260 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:222$263 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:222$266 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:222$269 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:222$272 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:222$275 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:222$278 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:222$284 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:222$287 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:222$290 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:222$296 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$300 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$303 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$306 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$309 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$312 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$315 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$318 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$321 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$324 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$327 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$330 ($and) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:212$254 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$256 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$259 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$262 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$265 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$268 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$271 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$274 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$277 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$280 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$283 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$286 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$289 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$292 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$295 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$298 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:229$301 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:229$304 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:229$307 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:229$310 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:229$313 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:229$316 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:229$319 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:229$322 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:229$325 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:229$328 ($or) with simplemap.
Mapping program_counter.$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:229$331 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$333' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [0] = \pc_in [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$334' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [1] = \pc_in [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$335' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [2] = \pc_in [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$336' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [3] = \pc_in [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$103' (?0) in module `\program_counter' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$101 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$130' (?0) in module `\program_counter' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$127 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$170' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [1] = \pc_in [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$171' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [2] = \pc_in [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$172' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [3] = \pc_in [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$337' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [4] = \pc_in [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$173' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [4] = \pc_in [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$338' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [5] = \pc_in [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$174' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [5] = \pc_in [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$339' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [6] = \pc_in [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$175' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [6] = \pc_in [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$340' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [7] = \pc_in [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$176' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [7] = \pc_in [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$341' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [8] = \pc_in [8]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$177' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [8] = \pc_in [8]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$342' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [9] = \pc_in [9]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$178' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [9] = \pc_in [9]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$343' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [10] = \pc_in [10]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$179' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [10] = \pc_in [10]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$344' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [11] = \pc_in [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$180' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [11] = \pc_in [11]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$345' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [12] = \pc_in [12]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$181' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [12] = \pc_in [12]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$346' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [13] = \pc_in [13]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$182' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [13] = \pc_in [13]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$347' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [14] = \pc_in [14]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$183' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [14] = \pc_in [14]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$348' (??0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$ternary$<techmap.v>:258$74_Y [15] = \pc_in [15]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$184' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [15] = \pc_in [15]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$185' (?0) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:263$77_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:262$76_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$202' (1?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [0] = \pc_in [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$497' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:212$253_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$535' (?0) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [0] = \pc_in [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$203' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$536' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [1] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$255_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$204' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$555' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [2] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$312_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$205' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$499' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$258_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$537' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$259_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$544' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [3] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$279_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$206' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$556' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [4] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$315_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$207' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$500' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$261_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$538' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$262_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$552' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [5] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$303_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$208' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$557' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [6] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$318_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$507' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$282_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$209' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [7] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$501' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$264_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$539' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$265_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$545' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$283_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$548' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [7] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$291_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$210' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [8] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$558' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [8] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$321_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$211' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [9] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$502' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$267_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$540' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$268_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$553' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [9] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$306_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$212' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [10] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$559' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [10] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$324_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$508' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$285_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$213' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [11] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$503' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$270_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$541' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$271_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$546' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$286_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$551' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [11] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$300_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$214' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [12] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$560' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [12] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$327_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$215' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [13] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$504' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$273_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$542' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$274_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$554' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [13] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$309_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$216' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [14] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$561' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [14] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:229$330_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$511' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$294_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$509' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$288_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$217' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$and$<techmap.v>:260$75_Y [15] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$505' (const_and) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$276_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$543' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$277_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$547' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$289_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$549' (00) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$or$<techmap.v>:221$295_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$550' (0?) in module `\program_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$18 [15] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$297_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$201' (0?) in module `\program_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$16.$xor$<techmap.v>:263$77_Y [16] = $techmap$auto$alumacc.cc:470:replace_alu$16.lcu.$and$<techmap.v>:221$297_Y'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$65' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$129'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$63 [0] = $auto$simplemap.cc:250:simplemap_eqne$127 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$65' from module `\program_counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$66' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$104'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$63 [1] = $auto$simplemap.cc:250:simplemap_eqne$101 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$66' from module `\program_counter'.
Removed a total of 2 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$349'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$350'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$351'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$352'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$353'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$354'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$355'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$356'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$357'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$358'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$359'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$360'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$361'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$362'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$363'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$364'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$512'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$519'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$522'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$523'.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 161 gates and 197 wires to a netlist network with 34 inputs and 32 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       30
ABC RESULTS:              AOI3 cells:        3
ABC RESULTS:              AOI4 cells:       16
ABC RESULTS:               MUX cells:       16
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:        4
ABC RESULTS:              OAI3 cells:       13
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               XOR cells:        9
ABC RESULTS:        internal signals:      131
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       32
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \program_counter

3.22.2. Analyzing design hierarchy..
Top module:  \program_counter
Removed 0 unused modules.

3.23. Printing statistics.

=== program_counter ===

   Number of wires:                 85
   Number of wire bits:            161
   Number of public wires:           5
   Number of public wire bits:      51
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                142
     $_AND_                         30
     $_AOI3_                         3
     $_AOI4_                        16
     $_DFF_P_                       32
     $_MUX_                         16
     $_NAND_                        10
     $_NOR_                          3
     $_NOT_                          4
     $_OAI3_                        13
     $_XNOR_                         6
     $_XOR_                          9

3.24. Executing CHECK pass (checking for obvious problems).
checking module program_counter..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\program_counter':
  mapped 32 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 110 gates and 144 wires to a netlist network with 34 inputs and 32 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:           AOI22X1 cells:       14
ABC RESULTS:             INVX1 cells:       23
ABC RESULTS:           NAND2X1 cells:       34
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:            NOR2X1 cells:       11
ABC RESULTS:            NOR3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:       40
ABC RESULTS:        internal signals:       78
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       32
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 144 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port program_counter.clock: Missing option -inpad.
Don't map input port program_counter.opcode: Missing option -inpad.
Don't map input port program_counter.pc_in: Missing option -inpad.
Mapping port program_counter.pc_out using BUFX2.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing Verilog backend.
Dumping module `\program_counter'.

11. Printing statistics.

=== program_counter ===

   Number of wires:                112
   Number of wire bits:            203
   Number of public wires:         112
   Number of public wire bits:     203
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                184
     AND2X2                          3
     AOI21X1                         4
     AOI22X1                        14
     BUFX2                          16
     DFFPOSX1                       32
     INVX1                          23
     NAND2X1                        34
     NAND3X1                         4
     NOR2X1                         11
     NOR3X1                          3
     OAI21X1                        40

End of script. Logfile hash: 931b22ffca
CPU: user 0.33s system 0.03s, MEM: 37.57 MB total, 10.68 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 13% 1x share (0 sec), 11% 16x opt_clean (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Running vlogFanout
vlogFanout -l 200 -c 30 -I program_counter_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y program_counter_mapped.v program_counter_sized.v

vlogFanout for qflow 1.4.79
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 32 (load 740.305) from node _87_,
driven by NOR2X1 with strength 108.686 (fF driven at latency 200)
Top fanout load-to-strength ratio is 6.81144 (latency = 1362.29 ps)
Top input node fanout is 32 (load 1296.51) from node clock.
0 gates exceed specified minimum load.
14 buffers were added.
Warning 1: load of 400.087 is 3.68114 times greater than strongest gate NOR2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 413.334 is 3.80302 times greater than strongest gate NOR2X1
Warning 3: load of 750.305 is 6.90345 times greater than strongest gate NOR2X1
5 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 170    	Out: 165    	-5
	"2" gates	In: 28    	Out: 33    	+5

9 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 170    	Out: 165    	-5
	"2" gates	In: 28    	Out: 33    	+5

Number of gates changed: 0
Running vlog2Verilog for antenna cell mapping.
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
   -o program_counter.v program_counter_sized.v

Generating RTL verilog and SPICE netlist file in directory
	 /home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/synthesis
Files:
   Verilog: /home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/synthesis/program_counter.rtl.v
   Verilog: /home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/synthesis/program_counter.rtlnopwr.v
   Verilog: /home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/synthesis/program_counter.rtlbb.v
   Spice:   /home/akash/Documents/DigitalLab/verilog_tasks/task_2/program_counter/synthesis/program_counter.spc

Running vlog2Verilog.
vlog2Verilog -c -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
	-o program_counter.rtl.v
   program_counter.v
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef 
	-o program_counter.rtlnopwr.v
   program_counter.v
/usr/local/share/qflow/bin/vlog2Verilog -c -p -b -n -v vdd -g gnd  -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
   -o program_counter.rtlbb.v
Running vlog2Spice.
vlog2Spice -i -l  /usr/local/share/qflow/tech/osu035/osu035_stdcells.sp -o program_counter.spc program_counter.rtl.v
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" program_counter.spc program_counter.xspice

Synthesis script ended on Mo 8. Jun 17:05:42 CEST 2020
